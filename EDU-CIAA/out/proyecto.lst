
proyecto/out/proyecto.elf:     file format elf32-littlearm
proyecto/out/proyecto.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00148d

Program Header:
0x70000001 off    0x00014160 vaddr 0x1a004160 paddr 0x1a004160 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000704 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00004168 memsz 0x00004168 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a004168 align 2**16
         filesz 0x000000ec memsz 0x000000ec flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000415c  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  10000000  1a004168  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200ec  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200ec  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200ec  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200ec  2**2
                  CONTENTS
  6 .bss          00000614  100000f0  100000f0  000000f0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200ec  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200ec  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200ec  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200ec  2**2
                  CONTENTS
 11 .init_array   00000004  1a00415c  1a00415c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a004160  1a004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200ec  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200ec  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200ec  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200ec  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200ec  2**2
                  CONTENTS
 18 .noinit       00000000  10000704  10000704  000200ec  2**2
                  CONTENTS
 19 .debug_info   0002342b  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004bad  00000000  00000000  00043517  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000b1fc  00000000  00000000  000480c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000e18  00000000  00000000  000532c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000ee8  00000000  00000000  000540d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000d223  00000000  00000000  00054fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00012a2c  00000000  00000000  000621e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002b148  00000000  00000000  00074c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  0009fd57  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  0009fdbf  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000029e4  00000000  00000000  0009fdf4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000f0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00415c l    d  .init_array	00000000 .init_array
1a004160 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000704 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002364 l     F .text	000000c8 uartProcessIRQ
100005a0 l     O .bss	00000004 rxIsrCallbackUART0
100005a4 l     O .bss	00000004 rxIsrCallbackUART0Params
100005a8 l     O .bss	00000004 rxIsrCallbackUART2
100005ac l     O .bss	00000004 rxIsrCallbackUART2Params
100005b0 l     O .bss	00000004 rxIsrCallbackUART3
100005b4 l     O .bss	00000004 rxIsrCallbackUART3Params
100005b8 l     O .bss	00000004 txIsrCallbackUART0
100005bc l     O .bss	00000004 txIsrCallbackUART0Params
100005c0 l     O .bss	00000004 txIsrCallbackUART2
100005c4 l     O .bss	00000004 txIsrCallbackUART2Params
100005c8 l     O .bss	00000004 txIsrCallbackUART3
100005cc l     O .bss	00000004 txIsrCallbackUART3Params
1a003f90 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 proyecto.c
1a000300 l     F .text	00000052 clear_in_events
1a000352 l     F .text	00000008 clear_internal_events
1a00035a l     F .text	0000000a enseq_conf_Idle_default
1a000364 l     F .text	00000008 exseq_main_region_Idle
1a00036c l     F .text	00000008 exseq_main_region_No_Food
1a000374 l     F .text	0000000a exseq_conf_Idle
1a00037e l     F .text	00000008 react_conf__entry_Default
1a000386 l     F .text	00000008 enseq_conf_default
1a00038e l     F .text	00000004 react
1a000392 l     F .text	0000000e proyecto_eventqueue_init
1a0003a0 l     F .text	00000004 proyecto_eventqueue_size
1a0003a4 l     F .text	00000038 proyecto_eventqueue_push
1a0003dc l     F .text	00000004 proyecto_event_init
1a0003e0 l     F .text	00000042 proyecto_eventqueue_pop
1a000422 l     F .text	0000001a proyecto_add_event_to_queue
1a00043c l     F .text	000000d6 proyecto_dispatch_event
1a000512 l     F .text	00000046 proyecto_get_next_event
1a000558 l     F .text	0000001a proyecto_dispatch_next_event
1a000572 l     F .text	000000c2 proyecto_get_timed_event_name
1a000634 l     F .text	00000008 enact_main_region_Idle
1a00063c l     F .text	00000012 enseq_main_region_Idle_default
1a00064e l     F .text	00000008 react_main_region__entry_Default
1a000656 l     F .text	00000008 enseq_main_region_default
1a00065e l     F .text	00000020 enact_clk_Init
1a00067e l     F .text	00000012 enseq_clk_Init_default
1a000690 l     F .text	00000008 react_clk__entry_Default
1a000698 l     F .text	00000008 enseq_clk_default
1a0006a0 l     F .text	00000034 enact_clk_Minutes
1a0006d4 l     F .text	00000012 enseq_clk_Minutes_default
1a0006e6 l     F .text	00000038 enact_clk_Seconds
1a00071e l     F .text	00000012 enseq_clk_Seconds_default
1a000730 l     F .text	00000034 enact_clk_Hours
1a000764 l     F .text	00000012 enseq_clk_Hours_default
1a000776 l     F .text	00000034 enact_clk_Days
1a0007aa l     F .text	00000012 enseq_clk_Days_default
1a0007bc l     F .text	0000000c exact_main_region_Feeding
1a0007c8 l     F .text	0000000e exseq_main_region_Feeding
1a0007d6 l     F .text	0000000c exact_main_region_Paused
1a0007e2 l     F .text	0000000e exseq_main_region_Paused
1a0007f0 l     F .text	00000022 exact_clk_Seconds
1a000812 l     F .text	00000010 exseq_clk_Seconds
1a000822 l     F .text	00000090 clk_Seconds_react
1a0008b2 l     F .text	00000022 exact_clk_Minutes
1a0008d4 l     F .text	00000010 exseq_clk_Minutes
1a0008e4 l     F .text	0000009a clk_Minutes_react
1a00097e l     F .text	0000000c exact_clk_Init
1a00098a l     F .text	00000010 exseq_clk_Init
1a00099a l     F .text	00000022 clk_Init_react
1a0009bc l     F .text	00000022 exact_clk_Hours
1a0009de l     F .text	00000010 exseq_clk_Hours
1a0009ee l     F .text	000000a2 clk_Hours_react
1a000a90 l     F .text	00000022 exact_clk_Days
1a000ab2 l     F .text	00000010 exseq_clk_Days
1a000ac2 l     F .text	000000a2 clk_Days_react
1a000b64 l     F .text	0000000c exact_conf_Parameter_Set
1a000b70 l     F .text	00000010 exseq_conf_Parameter_Set
1a000b80 l     F .text	00000034 conf_Parameter_Set_react
1a000bb4 l     F .text	0000001c enact_main_region_Feeding
1a000bd0 l     F .text	00000012 enseq_main_region_Feeding_default
1a000be2 l     F .text	0000001a enact_main_region_Paused
1a000bfc l     F .text	00000012 enseq_main_region_Paused_default
1a000c0e l     F .text	00000064 main_region_Idle_react
1a000c72 l     F .text	00000012 enact_main_region_No_Food
1a000c84 l     F .text	00000012 enseq_main_region_No_Food_default
1a000c96 l     F .text	00000082 main_region_Feeding_react
1a000d18 l     F .text	00000044 main_region_No_Food_react
1a000d5c l     F .text	0000005c main_region_Paused_react
1a000db8 l     F .text	0000001c enact_conf_Parameter_Set
1a000dd4 l     F .text	00000012 enseq_conf_Parameter_Set_default
1a000de6 l     F .text	00000032 conf_Idle_react
1a000e18 l     F .text	000000b4 micro_step
1a000ecc l     F .text	000000e6 run_cycle
00000000 l    df *ABS*	00000000 TimerTicks.c
00000000 l    df *ABS*	00000000 main.c
100000f1 l     O .bss	00000001 consolePrint
100000f4 l     O .bss	000000a0 statechart
10000194 l     O .bss	00000400 temp_string
00000000 l    df *ABS*	00000000 system.c
10000594 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board.c
1a0015e0 l     F .text	00000044 Board_LED_Init
1a001624 l     F .text	00000040 Board_TEC_Init
1a001664 l     F .text	00000040 Board_GPIO_Init
1a0016a4 l     F .text	00000030 Board_ADC_Init
1a0016d4 l     F .text	00000038 Board_SPI_Init
1a00170c l     F .text	00000024 Board_I2C_Init
1a003e1c l     O .text	00000008 GpioButtons
1a003e24 l     O .text	0000000c GpioLeds
1a003e30 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a003e48 l     O .text	00000004 InitClkStates
1a003e4c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001880 l     F .text	0000002c Chip_UART_GetIndex
1a003ec0 l     O .text	00000008 UART_BClock
1a003ec8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a001a1c l     F .text	00000014 Chip_ADC_GetClockIndex
1a001a30 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001af8 l     F .text	000000a0 pll_calc_divs
1a001b98 l     F .text	0000010c pll_get_frac
1a001ca4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a001f18 l     F .text	00000022 Chip_Clock_GetDivRate
10000598 l     O .bss	00000008 audio_usb_pll_freq
1a003edc l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a003f48 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0021e0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0021f4 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
100005d0 l     O .bss	00000004 callBackFuncParams
100005d8 l     O .bss	00000008 tickCounter
100005e0 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_timer.c
1a002758 l     F .text	00000002 errorOcurred
1a00275a l     F .text	00000002 doNothing
10000048 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002864 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100005e4 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003074 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a00340c l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
1000008c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a004160 l       .init_array	00000000 __init_array_end
1a00415c l       .bss_RAM5	00000000 __preinit_array_end
1a00415c l       .init_array	00000000 __init_array_start
1a00415c l       .bss_RAM5	00000000 __preinit_array_start
1a001d3c g     F .text	0000001c Chip_Clock_GetDividerSource
100000f0 g     O .bss	00000001 SysTick_Time_Flag
1a00152c g     F .text	00000012 _isatty_r
1a0027dc g     F .text	00000044 TIMER2_IRQHandler
1a002590 g     F .text	00000014 uartRxRead
1a00153e g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a001012 g     F .text	0000002a proyecto_enter
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0039c4 g     F .text	00000030 printf
1a0017c6 g     F .text	00000008 __stdio_init
100006f8 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a003a4e g     F .text	00000024 __sseek
1a003124 g     F .text	00000070 __sinit
1a003aa8 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a0030c8 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a001ad6 g     F .text	0000000c Chip_ADC_SetResolution
1a003d9c g     F .text	0000000c __malloc_unlock
1a00272c g     F .text	0000002c SysTick_Handler
1a001900 g     F .text	00000040 Chip_UART_SetBaud
100006f9 g     O .bss	00000001 __lock___arc4random_mutex
1a001488  w    F .text	00000002 initialise_monitor_handles
1a002bd4 g     F .text	00000008 printString
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a001768 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a001292 g     F .text	00000004 proyecto_opConfigureSec
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a004168 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a001522 g     F .text	0000000a _fstat_r
53ff6402 g       *ABS*	00000000 __valid_user_code_checksum
1a0010a4 g     F .text	00000014 proyecto_raise_evUnpause
1a004168 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0011a6 g     F .text	00000044 UpdateTimers
1a002820 g     F .text	00000044 TIMER3_IRQHandler
1a001fba g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a001154 g     F .text	0000002e IsPendEvent
1a00107c g     F .text	00000014 proyecto_raise_evFeedRst
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001182 g     F .text	00000024 MarkAsAttEvent
1a0030bc g     F .text	0000000c _cleanup_r
1a002bec g     F .text	00000000 .hidden __aeabi_uldivmod
10000704 g       .noinit	00000000 _noinit
1a00264e g     F .text	00000016 uartWriteString
100006f0 g     O .bss	00000004 SystemCoreClock
1a0011f8 g     F .text	00000060 onRx
1a0018ac g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a002038 g     F .text	0000004c Chip_Clock_GetRate
1a0011ec g     F .text	0000000c myTickHook
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002bc4 g     F .text	00000010 printInitUart
1a001808 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002c1c g     F .text	000002d0 .hidden __udivmoddi4
1a0015c0 g     F .text	00000020 _sbrk_r
1a003e18 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001548 g     F .text	0000004e _read_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a004160 g       .ARM.exidx	00000000 __exidx_start
100006fa g     O .bss	00000001 __lock___env_recursive_mutex
1a00103c g     F .text	0000002c proyecto_raise_time_event
1a0002fc g     O .text	00000004 CRP_WORD
100006fb g     O .bss	00000001 __lock___sinit_recursive_mutex
1a004124 g     O .text	00000004 _global_impure_ptr
1a001274 g     F .text	0000001c proyecto_stopMotor
1a00325c g     F .text	00000048 __libc_init_array
1a000fb2 g     F .text	00000060 proyecto_init
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a001784 g     F .text	00000030 Board_Init
1a001516  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000704 g       .bss	00000000 _ebss
1a00275c g     F .text	00000040 TIMER0_IRQHandler
1a00148c g     F .text	00000088 Reset_Handler
1a0026b0 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0022d8 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a001cf0 g     F .text	0000004c Chip_Clock_EnableCrystal
100006fc g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a001258 g     F .text	0000001c proyecto_startMotor
1a00279c g     F .text	00000040 TIMER1_IRQHandler
1a0040c4 g     O .text	00000020 __sf_fake_stderr
1a0022b4 g     F .text	00000024 Chip_I2C_Init
1a0010ee g     F .text	00000032 SetNewTimerTick
1a0032a8 g     F .text	00000002 __retarget_lock_release_recursive
1a002664 g     F .text	0000000a UART2_IRQHandler
1a002bdc g     F .text	00000010 printEnter
1a001eac g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a003fd8 g     O .text	000000e6 gpioPinsInit
1a00242c g     F .text	00000090 uartInterrupt
1a002634 g     F .text	0000001a uartWriteByte
1a00220c g     F .text	00000012 Chip_SSP_SetClockRate
1a00343a g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0030f4 g     F .text	0000000c __sfp_lock_acquire
1a003cf0 g     F .text	00000000 memchr
1a0032bc g     F .text	0000009c _free_r
1a001f94 g     F .text	00000026 Chip_Clock_GetBaseClock
100000f0 g       .bss	00000000 _bss
1a001aa4 g     F .text	00000032 Chip_ADC_SetSampleRate
1a003a7a g     F .text	0000002e strstr
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00221e g     F .text	0000003e Chip_SSP_SetBitRate
1a002084 g     F .text	00000002 Chip_GPIO_Init
1a003e44 g     O .text	00000004 OscRateIn
1a0025b8 g     F .text	0000007c uartInit
10000704 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001518 g     F .text	0000000a _close_r
1a002898 g     F .text	000001ac gpioInit
1a003b4c g     F .text	000000dc __swsetup_r
1a002eec  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003194 g     F .text	0000008c __sfp
1a003118 g     F .text	0000000c __sinit_lock_release
1a0039f4 g     F .text	00000022 __sread
1a002b34 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a003d90 g     F .text	0000000c __malloc_lock
1a001754 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a002ffc g     F .text	00000078 _fflush_r
1a0040e4 g     O .text	00000020 __sf_fake_stdin
1a001d58 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0032a6 g     F .text	00000002 __retarget_lock_acquire_recursive
1a0032aa g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a001314 g     F .text	00000174 main
1a0032a4 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0012d4 g     F .text	00000014 proyecto_unset_timer
1a001120 g     F .text	00000034 UnsetTimerTick
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a003a72 g     F .text	00000008 __sclose
1a001290 g     F .text	00000002 proyecto_opNotify
1a003358 g     F .text	000000b4 _malloc_r
1a002578 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001fc8 g     F .text	0000003c Chip_Clock_EnableOpts
1a0017be g     F .text	00000008 __stdio_getchar
1a0012b8 g     F .text	0000001c proyecto_set_timer
1a0010b8 g     F .text	00000014 proyecto_raise_evIdle
1a001d74 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001e2c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002310 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002a44 g     F .text	00000088 gpioWrite
1a001514  w    F .text	00000002 _fini
1a0039c4 g     F .text	00000030 iprintf
1a001a64 g     F .text	00000040 Chip_ADC_Init
100006f4 g     O .bss	00000004 g_pUsbApi
1a0017d0 g     F .text	00000038 Board_SetupMuxing
1a0012e8 g     F .text	0000002a Buttons_GetStatus_
1a001940 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001596 g     F .text	00000028 _write_r
10000040 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a0036b0 g     F .text	000000ea _printf_common
10000088 g     O .data	00000004 _impure_ptr
1a002ef0 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
100005f0 g     O .bss	00000100 ticks
1a0012ac g     F .text	0000000c proyecto_opUnpause
1b000000 g       .text	00000000 __core_m0app_START__
1a0025a4 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a0010cc g     F .text	00000022 InitTimerTicks
10000000 g       .data	00000000 _data
1a002678 g     F .text	00000020 tickCallbackSet
1a001068 g     F .text	00000014 proyecto_raise_evFeed
10000704 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00225c g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a003c28 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a001730 g     F .text	00000024 Board_Debug_Init
1a001090 g     F .text	00000014 proyecto_raise_evPause
1a0017b4 g     F .text	0000000a __stdio_putchar
100000ec g       .data	00000000 _edata
1a002294 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
100006fd g     O .bss	00000001 __lock___at_quick_exit_mutex
1a002088 g     F .text	00000158 Chip_SetupCoreClock
1a003a16 g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a003460 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a003220 g     F .text	0000003c _fwalk_reent
1a001ae4 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003100 g     F .text	0000000c __sfp_lock_release
1a004104 g     O .text	00000020 __sf_fake_stdout
1a002eec  w    F .text	00000002 .hidden __aeabi_idiv0
1a0024bc g     F .text	000000bc uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
100006fe g     O .bss	00000001 __lock___dd_hash_mutex
1a003c70 g     F .text	00000080 __smakebuf_r
100006ff g     O .bss	00000001 __lock___tz_mutex
1a00379c g     F .text	00000228 _printf_i
1a002004 g     F .text	00000034 Chip_Clock_Enable
1a00266e g     F .text	0000000a UART3_IRQHandler
100005ec g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a002acc g     F .text	00000068 gpioRead
1a002b50 g     F .text	00000074 boardInit
100005e8 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a003460 g     F .text	00000250 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002698 g     F .text	00000018 tickPowerSet
1a001296 g     F .text	00000016 proyecto_opPause
1a001f3c g     F .text	00000058 Chip_Clock_SetBaseClock
1a002348 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10000700 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a00310c g     F .text	0000000c __sinit_lock_acquire
1a001874 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 8d 14 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 02 64 ff 53     }............d.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	2d 27 00 1a                                         -'..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	35 2b 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     5+..............
1a000070:	5d 27 00 1a 9d 27 00 1a dd 27 00 1a 21 28 00 1a     ]'...'...'..!(..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 65 26 00 1a 6f 26 00 1a     ........e&..o&..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a004168 	.word	0x1a004168
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000ec 	.word	0x000000ec
1a000120:	1a004168 	.word	0x1a004168
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004168 	.word	0x1a004168
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004168 	.word	0x1a004168
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004168 	.word	0x1a004168
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000f0 	.word	0x100000f0
1a000154:	00000614 	.word	0x00000614
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f002 f8d0 	bl	1a002364 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <clear_in_events>:
	return result;
}

static void clear_in_events(Proyecto* handle)
{
	handle->iface.evFeed_raised = bool_false;
1a000300:	2300      	movs	r3, #0
1a000302:	7103      	strb	r3, [r0, #4]
	handle->iface.evFeedRst_raised = bool_false;
1a000304:	7143      	strb	r3, [r0, #5]
	handle->iface.evNoFood_raised = bool_false;
1a000306:	7183      	strb	r3, [r0, #6]
	handle->iface.evConfigure_raised = bool_false;
1a000308:	71c3      	strb	r3, [r0, #7]
	handle->iface.evPause_raised = bool_false;
1a00030a:	7203      	strb	r3, [r0, #8]
	handle->iface.evUnpause_raised = bool_false;
1a00030c:	7243      	strb	r3, [r0, #9]
	handle->iface.evIdle_raised = bool_false;
1a00030e:	7283      	strb	r3, [r0, #10]
	handle->timeEvents.proyecto_main_region_Feeding_tev0_raised = bool_false;
1a000310:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	handle->timeEvents.proyecto_main_region_Paused_tev0_raised = bool_false;
1a000314:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	handle->timeEvents.proyecto_clk_Seconds_tev0_raised = bool_false;
1a000318:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	handle->timeEvents.proyecto_clk_Seconds_tev1_raised = bool_false;
1a00031c:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
	handle->timeEvents.proyecto_clk_Seconds_tev2_raised = bool_false;
1a000320:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	handle->timeEvents.proyecto_clk_Minutes_tev0_raised = bool_false;
1a000324:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	handle->timeEvents.proyecto_clk_Minutes_tev1_raised = bool_false;
1a000328:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
	handle->timeEvents.proyecto_clk_Minutes_tev2_raised = bool_false;
1a00032c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
	handle->timeEvents.proyecto_clk_Init_tev0_raised = bool_false;
1a000330:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	handle->timeEvents.proyecto_clk_Hours_tev0_raised = bool_false;
1a000334:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
	handle->timeEvents.proyecto_clk_Hours_tev1_raised = bool_false;
1a000338:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	handle->timeEvents.proyecto_clk_Hours_tev2_raised = bool_false;
1a00033c:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
	handle->timeEvents.proyecto_clk_Days_tev0_raised = bool_false;
1a000340:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	handle->timeEvents.proyecto_clk_Days_tev1_raised = bool_false;
1a000344:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
	handle->timeEvents.proyecto_clk_Days_tev2_raised = bool_false;
1a000348:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	handle->timeEvents.proyecto_conf_Parameter_Set_tev0_raised = bool_false;
1a00034c:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
1a000350:	4770      	bx	lr

1a000352 <clear_internal_events>:

static void clear_internal_events(Proyecto* handle)
{
	handle->internal.siFeed_raised = bool_false;
1a000352:	2300      	movs	r3, #0
1a000354:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
1a000358:	4770      	bx	lr

1a00035a <enseq_conf_Idle_default>:

/* 'default' enter sequence for state Idle */
static void enseq_conf_Idle_default(Proyecto* handle)
{
	/* 'default' enter sequence for state Idle */
	handle->stateConfVector[2] = Proyecto_conf_Idle;
1a00035a:	230a      	movs	r3, #10
1a00035c:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a00035e:	2302      	movs	r3, #2
1a000360:	64c3      	str	r3, [r0, #76]	; 0x4c
}
1a000362:	4770      	bx	lr

1a000364 <exseq_main_region_Idle>:

/* Default exit sequence for state Idle */
static void exseq_main_region_Idle(Proyecto* handle)
{
	/* Default exit sequence for state Idle */
	handle->stateConfVector[0] = Proyecto_last_state;
1a000364:	2300      	movs	r3, #0
1a000366:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000368:	64c3      	str	r3, [r0, #76]	; 0x4c
}
1a00036a:	4770      	bx	lr

1a00036c <exseq_main_region_No_Food>:

/* Default exit sequence for state No_Food */
static void exseq_main_region_No_Food(Proyecto* handle)
{
	/* Default exit sequence for state No_Food */
	handle->stateConfVector[0] = Proyecto_last_state;
1a00036c:	2300      	movs	r3, #0
1a00036e:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000370:	64c3      	str	r3, [r0, #76]	; 0x4c
}
1a000372:	4770      	bx	lr

1a000374 <exseq_conf_Idle>:

/* Default exit sequence for state Idle */
static void exseq_conf_Idle(Proyecto* handle)
{
	/* Default exit sequence for state Idle */
	handle->stateConfVector[2] = Proyecto_last_state;
1a000374:	2300      	movs	r3, #0
1a000376:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a000378:	2302      	movs	r3, #2
1a00037a:	64c3      	str	r3, [r0, #76]	; 0x4c
}
1a00037c:	4770      	bx	lr

1a00037e <react_conf__entry_Default>:
	enseq_clk_Init_default(handle);
}

/* Default react sequence for initial entry  */
static void react_conf__entry_Default(Proyecto* handle)
{
1a00037e:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_conf_Idle_default(handle);
1a000380:	f7ff ffeb 	bl	1a00035a <enseq_conf_Idle_default>
}
1a000384:	bd08      	pop	{r3, pc}

1a000386 <enseq_conf_default>:
{
1a000386:	b508      	push	{r3, lr}
	react_conf__entry_Default(handle);
1a000388:	f7ff fff9 	bl	1a00037e <react_conf__entry_Default>
}
1a00038c:	bd08      	pop	{r3, pc}

1a00038e <react>:
static sc_integer react(Proyecto* handle, const sc_integer transitioned_before)
{
	/* State machine reactions. */
	SC_UNUSED(handle);
	return transitioned_before;
}
1a00038e:	4608      	mov	r0, r1
1a000390:	4770      	bx	lr

1a000392 <proyecto_eventqueue_init>:



static void proyecto_eventqueue_init(proyecto_eventqueue * eq, proyecto_event *buffer, sc_integer capacity)
{
	eq->events = buffer;
1a000392:	6001      	str	r1, [r0, #0]
	eq->capacity = capacity;
1a000394:	6042      	str	r2, [r0, #4]
	eq->push_index = 0;
1a000396:	2300      	movs	r3, #0
1a000398:	60c3      	str	r3, [r0, #12]
	eq->pop_index = 0;
1a00039a:	6083      	str	r3, [r0, #8]
	eq->size = 0;
1a00039c:	6103      	str	r3, [r0, #16]
}
1a00039e:	4770      	bx	lr

1a0003a0 <proyecto_eventqueue_size>:

static sc_integer proyecto_eventqueue_size(proyecto_eventqueue * eq)
{
	return eq->size;
}
1a0003a0:	6900      	ldr	r0, [r0, #16]
1a0003a2:	4770      	bx	lr

1a0003a4 <proyecto_eventqueue_push>:
		eq->size--;
	}
	return event;
}
static sc_boolean proyecto_eventqueue_push(proyecto_eventqueue * eq, proyecto_event ev)
{
1a0003a4:	b538      	push	{r3, r4, r5, lr}
1a0003a6:	4604      	mov	r4, r0
1a0003a8:	460d      	mov	r5, r1
	if(proyecto_eventqueue_size(eq) == eq->capacity) {
1a0003aa:	f7ff fff9 	bl	1a0003a0 <proyecto_eventqueue_size>
1a0003ae:	6863      	ldr	r3, [r4, #4]
1a0003b0:	4298      	cmp	r0, r3
1a0003b2:	d011      	beq.n	1a0003d8 <proyecto_eventqueue_push+0x34>
		return bool_false;
	}
	else {
		eq->events[eq->push_index] = ev;
1a0003b4:	6822      	ldr	r2, [r4, #0]
1a0003b6:	68e3      	ldr	r3, [r4, #12]
1a0003b8:	54d5      	strb	r5, [r2, r3]
		
		if(eq->push_index < eq->capacity - 1) {
1a0003ba:	68e2      	ldr	r2, [r4, #12]
1a0003bc:	6863      	ldr	r3, [r4, #4]
1a0003be:	3b01      	subs	r3, #1
1a0003c0:	429a      	cmp	r2, r3
1a0003c2:	da06      	bge.n	1a0003d2 <proyecto_eventqueue_push+0x2e>
			eq->push_index++;
1a0003c4:	3201      	adds	r2, #1
1a0003c6:	60e2      	str	r2, [r4, #12]
		}
		else {
			eq->push_index = 0;
		}
		eq->size++;
1a0003c8:	6923      	ldr	r3, [r4, #16]
1a0003ca:	3301      	adds	r3, #1
1a0003cc:	6123      	str	r3, [r4, #16]
		
		return bool_true;
1a0003ce:	2001      	movs	r0, #1
	}
}
1a0003d0:	bd38      	pop	{r3, r4, r5, pc}
			eq->push_index = 0;
1a0003d2:	2300      	movs	r3, #0
1a0003d4:	60e3      	str	r3, [r4, #12]
1a0003d6:	e7f7      	b.n	1a0003c8 <proyecto_eventqueue_push+0x24>
		return bool_false;
1a0003d8:	2000      	movs	r0, #0
1a0003da:	e7f9      	b.n	1a0003d0 <proyecto_eventqueue_push+0x2c>

1a0003dc <proyecto_event_init>:
static void proyecto_event_init(proyecto_event * ev, ProyectoEventID name)
{
	ev->name = name;
1a0003dc:	7001      	strb	r1, [r0, #0]
}
1a0003de:	4770      	bx	lr

1a0003e0 <proyecto_eventqueue_pop>:
{
1a0003e0:	b510      	push	{r4, lr}
1a0003e2:	b082      	sub	sp, #8
1a0003e4:	4604      	mov	r4, r0
	if(proyecto_eventqueue_size(eq) <= 0) {
1a0003e6:	f7ff ffdb 	bl	1a0003a0 <proyecto_eventqueue_size>
1a0003ea:	2800      	cmp	r0, #0
1a0003ec:	dd11      	ble.n	1a000412 <proyecto_eventqueue_pop+0x32>
		event = eq->events[eq->pop_index];
1a0003ee:	6822      	ldr	r2, [r4, #0]
1a0003f0:	68a3      	ldr	r3, [r4, #8]
1a0003f2:	5cd2      	ldrb	r2, [r2, r3]
1a0003f4:	f88d 2004 	strb.w	r2, [sp, #4]
		if(eq->pop_index < eq->capacity - 1) {
1a0003f8:	6862      	ldr	r2, [r4, #4]
1a0003fa:	3a01      	subs	r2, #1
1a0003fc:	4293      	cmp	r3, r2
1a0003fe:	da0d      	bge.n	1a00041c <proyecto_eventqueue_pop+0x3c>
			eq->pop_index++;
1a000400:	3301      	adds	r3, #1
1a000402:	60a3      	str	r3, [r4, #8]
		eq->size--;
1a000404:	6923      	ldr	r3, [r4, #16]
1a000406:	3b01      	subs	r3, #1
1a000408:	6123      	str	r3, [r4, #16]
}
1a00040a:	f89d 0004 	ldrb.w	r0, [sp, #4]
1a00040e:	b002      	add	sp, #8
1a000410:	bd10      	pop	{r4, pc}
		proyecto_event_init(&event, Proyecto_invalid_event);
1a000412:	2100      	movs	r1, #0
1a000414:	a801      	add	r0, sp, #4
1a000416:	f7ff ffe1 	bl	1a0003dc <proyecto_event_init>
1a00041a:	e7f6      	b.n	1a00040a <proyecto_eventqueue_pop+0x2a>
			eq->pop_index = 0;
1a00041c:	2300      	movs	r3, #0
1a00041e:	60a3      	str	r3, [r4, #8]
1a000420:	e7f0      	b.n	1a000404 <proyecto_eventqueue_pop+0x24>

1a000422 <proyecto_add_event_to_queue>:

static void proyecto_add_event_to_queue(proyecto_eventqueue * eq, ProyectoEventID name)
{
1a000422:	b510      	push	{r4, lr}
1a000424:	b082      	sub	sp, #8
1a000426:	4604      	mov	r4, r0
	proyecto_event event;
	proyecto_event_init(&event, name);
1a000428:	a801      	add	r0, sp, #4
1a00042a:	f7ff ffd7 	bl	1a0003dc <proyecto_event_init>
	proyecto_eventqueue_push(eq, event);
1a00042e:	f89d 1004 	ldrb.w	r1, [sp, #4]
1a000432:	4620      	mov	r0, r4
1a000434:	f7ff ffb6 	bl	1a0003a4 <proyecto_eventqueue_push>
}
1a000438:	b002      	add	sp, #8
1a00043a:	bd10      	pop	{r4, pc}

1a00043c <proyecto_dispatch_event>:

static void proyecto_dispatch_event(Proyecto* handle, const proyecto_event * event) {
	switch(event->name) {
1a00043c:	780b      	ldrb	r3, [r1, #0]
1a00043e:	3b01      	subs	r3, #1
1a000440:	2b17      	cmp	r3, #23
1a000442:	d865      	bhi.n	1a000510 <proyecto_dispatch_event+0xd4>
1a000444:	e8df f003 	tbb	[pc, r3]
1a000448:	15120f0c 	.word	0x15120f0c
1a00044c:	211e1b18 	.word	0x211e1b18
1a000450:	312d2925 	.word	0x312d2925
1a000454:	413d3935 	.word	0x413d3935
1a000458:	514d4945 	.word	0x514d4945
1a00045c:	615d5955 	.word	0x615d5955
		case Proyecto_evFeed:
		{
			handle->iface.evFeed_raised = bool_true;
1a000460:	2301      	movs	r3, #1
1a000462:	7103      	strb	r3, [r0, #4]
			break;
1a000464:	4770      	bx	lr
		}
		case Proyecto_evFeedRst:
		{
			handle->iface.evFeedRst_raised = bool_true;
1a000466:	2301      	movs	r3, #1
1a000468:	7143      	strb	r3, [r0, #5]
			break;
1a00046a:	4770      	bx	lr
		}
		case Proyecto_evNoFood:
		{
			handle->iface.evNoFood_raised = bool_true;
1a00046c:	2301      	movs	r3, #1
1a00046e:	7183      	strb	r3, [r0, #6]
			break;
1a000470:	4770      	bx	lr
		}
		case Proyecto_evConfigure:
		{
			handle->iface.evConfigure_raised = bool_true;
1a000472:	2301      	movs	r3, #1
1a000474:	71c3      	strb	r3, [r0, #7]
			break;
1a000476:	4770      	bx	lr
		}
		case Proyecto_evPause:
		{
			handle->iface.evPause_raised = bool_true;
1a000478:	2301      	movs	r3, #1
1a00047a:	7203      	strb	r3, [r0, #8]
			break;
1a00047c:	4770      	bx	lr
		}
		case Proyecto_evUnpause:
		{
			handle->iface.evUnpause_raised = bool_true;
1a00047e:	2301      	movs	r3, #1
1a000480:	7243      	strb	r3, [r0, #9]
			break;
1a000482:	4770      	bx	lr
		}
		case Proyecto_evIdle:
		{
			handle->iface.evIdle_raised = bool_true;
1a000484:	2301      	movs	r3, #1
1a000486:	7283      	strb	r3, [r0, #10]
			break;
1a000488:	4770      	bx	lr
		}
		case Proyecto_internal_siFeed:
		{
			handle->internal.siFeed_raised = bool_true;
1a00048a:	2301      	movs	r3, #1
1a00048c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
			break;
1a000490:	4770      	bx	lr
		}
		case Proyecto_proyecto_main_region_Feeding_time_event_0:
		{
			handle->timeEvents.proyecto_main_region_Feeding_tev0_raised = bool_true;
1a000492:	2301      	movs	r3, #1
1a000494:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			break;
1a000498:	4770      	bx	lr
		}
		case Proyecto_proyecto_main_region_Paused_time_event_0:
		{
			handle->timeEvents.proyecto_main_region_Paused_tev0_raised = bool_true;
1a00049a:	2301      	movs	r3, #1
1a00049c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
			break;
1a0004a0:	4770      	bx	lr
		}
		case Proyecto_proyecto_clk_Seconds_time_event_0:
		{
			handle->timeEvents.proyecto_clk_Seconds_tev0_raised = bool_true;
1a0004a2:	2301      	movs	r3, #1
1a0004a4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
			break;
1a0004a8:	4770      	bx	lr
		}
		case Proyecto_proyecto_clk_Seconds_time_event_1:
		{
			handle->timeEvents.proyecto_clk_Seconds_tev1_raised = bool_true;
1a0004aa:	2301      	movs	r3, #1
1a0004ac:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
			break;
1a0004b0:	4770      	bx	lr
		}
		case Proyecto_proyecto_clk_Seconds_time_event_2:
		{
			handle->timeEvents.proyecto_clk_Seconds_tev2_raised = bool_true;
1a0004b2:	2301      	movs	r3, #1
1a0004b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
			break;
1a0004b8:	4770      	bx	lr
		}
		case Proyecto_proyecto_clk_Minutes_time_event_0:
		{
			handle->timeEvents.proyecto_clk_Minutes_tev0_raised = bool_true;
1a0004ba:	2301      	movs	r3, #1
1a0004bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			break;
1a0004c0:	4770      	bx	lr
		}
		case Proyecto_proyecto_clk_Minutes_time_event_1:
		{
			handle->timeEvents.proyecto_clk_Minutes_tev1_raised = bool_true;
1a0004c2:	2301      	movs	r3, #1
1a0004c4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			break;
1a0004c8:	4770      	bx	lr
		}
		case Proyecto_proyecto_clk_Minutes_time_event_2:
		{
			handle->timeEvents.proyecto_clk_Minutes_tev2_raised = bool_true;
1a0004ca:	2301      	movs	r3, #1
1a0004cc:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
			break;
1a0004d0:	4770      	bx	lr
		}
		case Proyecto_proyecto_clk_Init_time_event_0:
		{
			handle->timeEvents.proyecto_clk_Init_tev0_raised = bool_true;
1a0004d2:	2301      	movs	r3, #1
1a0004d4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
			break;
1a0004d8:	4770      	bx	lr
		}
		case Proyecto_proyecto_clk_Hours_time_event_0:
		{
			handle->timeEvents.proyecto_clk_Hours_tev0_raised = bool_true;
1a0004da:	2301      	movs	r3, #1
1a0004dc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
			break;
1a0004e0:	4770      	bx	lr
		}
		case Proyecto_proyecto_clk_Hours_time_event_1:
		{
			handle->timeEvents.proyecto_clk_Hours_tev1_raised = bool_true;
1a0004e2:	2301      	movs	r3, #1
1a0004e4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
			break;
1a0004e8:	4770      	bx	lr
		}
		case Proyecto_proyecto_clk_Hours_time_event_2:
		{
			handle->timeEvents.proyecto_clk_Hours_tev2_raised = bool_true;
1a0004ea:	2301      	movs	r3, #1
1a0004ec:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
			break;
1a0004f0:	4770      	bx	lr
		}
		case Proyecto_proyecto_clk_Days_time_event_0:
		{
			handle->timeEvents.proyecto_clk_Days_tev0_raised = bool_true;
1a0004f2:	2301      	movs	r3, #1
1a0004f4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
			break;
1a0004f8:	4770      	bx	lr
		}
		case Proyecto_proyecto_clk_Days_time_event_1:
		{
			handle->timeEvents.proyecto_clk_Days_tev1_raised = bool_true;
1a0004fa:	2301      	movs	r3, #1
1a0004fc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
			break;
1a000500:	4770      	bx	lr
		}
		case Proyecto_proyecto_clk_Days_time_event_2:
		{
			handle->timeEvents.proyecto_clk_Days_tev2_raised = bool_true;
1a000502:	2301      	movs	r3, #1
1a000504:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			break;
1a000508:	4770      	bx	lr
		}
		case Proyecto_proyecto_conf_Parameter_Set_time_event_0:
		{
			handle->timeEvents.proyecto_conf_Parameter_Set_tev0_raised = bool_true;
1a00050a:	2301      	movs	r3, #1
1a00050c:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
			break;
		}
		default:
			break;
	}
}
1a000510:	4770      	bx	lr

1a000512 <proyecto_get_next_event>:

static proyecto_event proyecto_get_next_event(Proyecto* handle)
{
1a000512:	b530      	push	{r4, r5, lr}
1a000514:	b083      	sub	sp, #12
1a000516:	4604      	mov	r4, r0
	proyecto_event next_event;
	proyecto_event_init(&next_event, Proyecto_invalid_event);
1a000518:	2100      	movs	r1, #0
1a00051a:	a801      	add	r0, sp, #4
1a00051c:	f7ff ff5e 	bl	1a0003dc <proyecto_event_init>
	if(proyecto_eventqueue_size(&(handle->internal_event_queue)) > 0) {
1a000520:	f104 0550 	add.w	r5, r4, #80	; 0x50
1a000524:	4628      	mov	r0, r5
1a000526:	f7ff ff3b 	bl	1a0003a0 <proyecto_eventqueue_size>
1a00052a:	2800      	cmp	r0, #0
1a00052c:	dc0b      	bgt.n	1a000546 <proyecto_get_next_event+0x34>
		next_event = proyecto_eventqueue_pop(&(handle->internal_event_queue));
	}
	else if(proyecto_eventqueue_size(&(handle->in_event_queue)) > 0) {
1a00052e:	3478      	adds	r4, #120	; 0x78
1a000530:	4620      	mov	r0, r4
1a000532:	f7ff ff35 	bl	1a0003a0 <proyecto_eventqueue_size>
1a000536:	2800      	cmp	r0, #0
1a000538:	dd0a      	ble.n	1a000550 <proyecto_get_next_event+0x3e>
		next_event = proyecto_eventqueue_pop(&(handle->in_event_queue));
1a00053a:	4620      	mov	r0, r4
1a00053c:	f7ff ff50 	bl	1a0003e0 <proyecto_eventqueue_pop>
1a000540:	f88d 0004 	strb.w	r0, [sp, #4]
1a000544:	e004      	b.n	1a000550 <proyecto_get_next_event+0x3e>
		next_event = proyecto_eventqueue_pop(&(handle->internal_event_queue));
1a000546:	4628      	mov	r0, r5
1a000548:	f7ff ff4a 	bl	1a0003e0 <proyecto_eventqueue_pop>
1a00054c:	f88d 0004 	strb.w	r0, [sp, #4]
	}
	return next_event;
}
1a000550:	f89d 0004 	ldrb.w	r0, [sp, #4]
1a000554:	b003      	add	sp, #12
1a000556:	bd30      	pop	{r4, r5, pc}

1a000558 <proyecto_dispatch_next_event>:

static void proyecto_dispatch_next_event(Proyecto* handle)
{
1a000558:	b510      	push	{r4, lr}
1a00055a:	b082      	sub	sp, #8
1a00055c:	4604      	mov	r4, r0
	proyecto_event nextEvent;
	nextEvent = proyecto_get_next_event(handle);
1a00055e:	f7ff ffd8 	bl	1a000512 <proyecto_get_next_event>
1a000562:	f88d 0004 	strb.w	r0, [sp, #4]
	proyecto_dispatch_event(handle, &nextEvent);
1a000566:	a901      	add	r1, sp, #4
1a000568:	4620      	mov	r0, r4
1a00056a:	f7ff ff67 	bl	1a00043c <proyecto_dispatch_event>
}
1a00056e:	b002      	add	sp, #8
1a000570:	bd10      	pop	{r4, pc}

1a000572 <proyecto_get_timed_event_name>:

static ProyectoEventID proyecto_get_timed_event_name(Proyecto* handle, sc_eventid evid)
{
	if(evid == &handle->timeEvents.proyecto_main_region_Feeding_tev0_raised) {
1a000572:	f100 0338 	add.w	r3, r0, #56	; 0x38
1a000576:	428b      	cmp	r3, r1
1a000578:	d03c      	beq.n	1a0005f4 <proyecto_get_timed_event_name+0x82>
		return Proyecto_proyecto_main_region_Feeding_time_event_0;
	}
	if(evid == &handle->timeEvents.proyecto_main_region_Paused_tev0_raised) {
1a00057a:	f100 0339 	add.w	r3, r0, #57	; 0x39
1a00057e:	428b      	cmp	r3, r1
1a000580:	d03a      	beq.n	1a0005f8 <proyecto_get_timed_event_name+0x86>
		return Proyecto_proyecto_main_region_Paused_time_event_0;
	}
	if(evid == &handle->timeEvents.proyecto_clk_Seconds_tev0_raised) {
1a000582:	f100 033a 	add.w	r3, r0, #58	; 0x3a
1a000586:	428b      	cmp	r3, r1
1a000588:	d038      	beq.n	1a0005fc <proyecto_get_timed_event_name+0x8a>
		return Proyecto_proyecto_clk_Seconds_time_event_0;
	}
	if(evid == &handle->timeEvents.proyecto_clk_Seconds_tev1_raised) {
1a00058a:	f100 033b 	add.w	r3, r0, #59	; 0x3b
1a00058e:	428b      	cmp	r3, r1
1a000590:	d036      	beq.n	1a000600 <proyecto_get_timed_event_name+0x8e>
		return Proyecto_proyecto_clk_Seconds_time_event_1;
	}
	if(evid == &handle->timeEvents.proyecto_clk_Seconds_tev2_raised) {
1a000592:	f100 033c 	add.w	r3, r0, #60	; 0x3c
1a000596:	428b      	cmp	r3, r1
1a000598:	d034      	beq.n	1a000604 <proyecto_get_timed_event_name+0x92>
		return Proyecto_proyecto_clk_Seconds_time_event_2;
	}
	if(evid == &handle->timeEvents.proyecto_clk_Minutes_tev0_raised) {
1a00059a:	f100 033d 	add.w	r3, r0, #61	; 0x3d
1a00059e:	428b      	cmp	r3, r1
1a0005a0:	d032      	beq.n	1a000608 <proyecto_get_timed_event_name+0x96>
		return Proyecto_proyecto_clk_Minutes_time_event_0;
	}
	if(evid == &handle->timeEvents.proyecto_clk_Minutes_tev1_raised) {
1a0005a2:	f100 033e 	add.w	r3, r0, #62	; 0x3e
1a0005a6:	428b      	cmp	r3, r1
1a0005a8:	d030      	beq.n	1a00060c <proyecto_get_timed_event_name+0x9a>
		return Proyecto_proyecto_clk_Minutes_time_event_1;
	}
	if(evid == &handle->timeEvents.proyecto_clk_Minutes_tev2_raised) {
1a0005aa:	f100 033f 	add.w	r3, r0, #63	; 0x3f
1a0005ae:	428b      	cmp	r3, r1
1a0005b0:	d02e      	beq.n	1a000610 <proyecto_get_timed_event_name+0x9e>
		return Proyecto_proyecto_clk_Minutes_time_event_2;
	}
	if(evid == &handle->timeEvents.proyecto_clk_Init_tev0_raised) {
1a0005b2:	f100 0340 	add.w	r3, r0, #64	; 0x40
1a0005b6:	428b      	cmp	r3, r1
1a0005b8:	d02c      	beq.n	1a000614 <proyecto_get_timed_event_name+0xa2>
		return Proyecto_proyecto_clk_Init_time_event_0;
	}
	if(evid == &handle->timeEvents.proyecto_clk_Hours_tev0_raised) {
1a0005ba:	f100 0341 	add.w	r3, r0, #65	; 0x41
1a0005be:	428b      	cmp	r3, r1
1a0005c0:	d02a      	beq.n	1a000618 <proyecto_get_timed_event_name+0xa6>
		return Proyecto_proyecto_clk_Hours_time_event_0;
	}
	if(evid == &handle->timeEvents.proyecto_clk_Hours_tev1_raised) {
1a0005c2:	f100 0342 	add.w	r3, r0, #66	; 0x42
1a0005c6:	428b      	cmp	r3, r1
1a0005c8:	d028      	beq.n	1a00061c <proyecto_get_timed_event_name+0xaa>
		return Proyecto_proyecto_clk_Hours_time_event_1;
	}
	if(evid == &handle->timeEvents.proyecto_clk_Hours_tev2_raised) {
1a0005ca:	f100 0343 	add.w	r3, r0, #67	; 0x43
1a0005ce:	428b      	cmp	r3, r1
1a0005d0:	d026      	beq.n	1a000620 <proyecto_get_timed_event_name+0xae>
		return Proyecto_proyecto_clk_Hours_time_event_2;
	}
	if(evid == &handle->timeEvents.proyecto_clk_Days_tev0_raised) {
1a0005d2:	f100 0344 	add.w	r3, r0, #68	; 0x44
1a0005d6:	428b      	cmp	r3, r1
1a0005d8:	d024      	beq.n	1a000624 <proyecto_get_timed_event_name+0xb2>
		return Proyecto_proyecto_clk_Days_time_event_0;
	}
	if(evid == &handle->timeEvents.proyecto_clk_Days_tev1_raised) {
1a0005da:	f100 0345 	add.w	r3, r0, #69	; 0x45
1a0005de:	428b      	cmp	r3, r1
1a0005e0:	d022      	beq.n	1a000628 <proyecto_get_timed_event_name+0xb6>
		return Proyecto_proyecto_clk_Days_time_event_1;
	}
	if(evid == &handle->timeEvents.proyecto_clk_Days_tev2_raised) {
1a0005e2:	f100 0346 	add.w	r3, r0, #70	; 0x46
1a0005e6:	428b      	cmp	r3, r1
1a0005e8:	d020      	beq.n	1a00062c <proyecto_get_timed_event_name+0xba>
		return Proyecto_proyecto_clk_Days_time_event_2;
	}
	if(evid == &handle->timeEvents.proyecto_conf_Parameter_Set_tev0_raised) {
1a0005ea:	3047      	adds	r0, #71	; 0x47
1a0005ec:	4288      	cmp	r0, r1
1a0005ee:	d01f      	beq.n	1a000630 <proyecto_get_timed_event_name+0xbe>
		return Proyecto_proyecto_conf_Parameter_Set_time_event_0;
	}
	return Proyecto_invalid_event;
1a0005f0:	2000      	movs	r0, #0
1a0005f2:	4770      	bx	lr
		return Proyecto_proyecto_main_region_Feeding_time_event_0;
1a0005f4:	2009      	movs	r0, #9
1a0005f6:	4770      	bx	lr
		return Proyecto_proyecto_main_region_Paused_time_event_0;
1a0005f8:	200a      	movs	r0, #10
1a0005fa:	4770      	bx	lr
		return Proyecto_proyecto_clk_Seconds_time_event_0;
1a0005fc:	200b      	movs	r0, #11
1a0005fe:	4770      	bx	lr
		return Proyecto_proyecto_clk_Seconds_time_event_1;
1a000600:	200c      	movs	r0, #12
1a000602:	4770      	bx	lr
		return Proyecto_proyecto_clk_Seconds_time_event_2;
1a000604:	200d      	movs	r0, #13
1a000606:	4770      	bx	lr
		return Proyecto_proyecto_clk_Minutes_time_event_0;
1a000608:	200e      	movs	r0, #14
1a00060a:	4770      	bx	lr
		return Proyecto_proyecto_clk_Minutes_time_event_1;
1a00060c:	200f      	movs	r0, #15
1a00060e:	4770      	bx	lr
		return Proyecto_proyecto_clk_Minutes_time_event_2;
1a000610:	2010      	movs	r0, #16
1a000612:	4770      	bx	lr
		return Proyecto_proyecto_clk_Init_time_event_0;
1a000614:	2011      	movs	r0, #17
1a000616:	4770      	bx	lr
		return Proyecto_proyecto_clk_Hours_time_event_0;
1a000618:	2012      	movs	r0, #18
1a00061a:	4770      	bx	lr
		return Proyecto_proyecto_clk_Hours_time_event_1;
1a00061c:	2013      	movs	r0, #19
1a00061e:	4770      	bx	lr
		return Proyecto_proyecto_clk_Hours_time_event_2;
1a000620:	2014      	movs	r0, #20
1a000622:	4770      	bx	lr
		return Proyecto_proyecto_clk_Days_time_event_0;
1a000624:	2015      	movs	r0, #21
1a000626:	4770      	bx	lr
		return Proyecto_proyecto_clk_Days_time_event_1;
1a000628:	2016      	movs	r0, #22
1a00062a:	4770      	bx	lr
		return Proyecto_proyecto_clk_Days_time_event_2;
1a00062c:	2017      	movs	r0, #23
1a00062e:	4770      	bx	lr
		return Proyecto_proyecto_conf_Parameter_Set_time_event_0;
1a000630:	2018      	movs	r0, #24
}
1a000632:	4770      	bx	lr

1a000634 <enact_main_region_Idle>:
{
1a000634:	b508      	push	{r3, lr}
	proyecto_stopMotor(handle);
1a000636:	f000 fe1d 	bl	1a001274 <proyecto_stopMotor>
}
1a00063a:	bd08      	pop	{r3, pc}

1a00063c <enseq_main_region_Idle_default>:
{
1a00063c:	b510      	push	{r4, lr}
1a00063e:	4604      	mov	r4, r0
	enact_main_region_Idle(handle);
1a000640:	f7ff fff8 	bl	1a000634 <enact_main_region_Idle>
	handle->stateConfVector[0] = Proyecto_main_region_Idle;
1a000644:	2301      	movs	r3, #1
1a000646:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a000648:	2300      	movs	r3, #0
1a00064a:	64e3      	str	r3, [r4, #76]	; 0x4c
}
1a00064c:	bd10      	pop	{r4, pc}

1a00064e <react_main_region__entry_Default>:
{
1a00064e:	b508      	push	{r3, lr}
	enseq_main_region_Idle_default(handle);
1a000650:	f7ff fff4 	bl	1a00063c <enseq_main_region_Idle_default>
}
1a000654:	bd08      	pop	{r3, pc}

1a000656 <enseq_main_region_default>:
{
1a000656:	b508      	push	{r3, lr}
	react_main_region__entry_Default(handle);
1a000658:	f7ff fff9 	bl	1a00064e <react_main_region__entry_Default>
}
1a00065c:	bd08      	pop	{r3, pc}

1a00065e <enact_clk_Init>:
{
1a00065e:	b510      	push	{r4, lr}
1a000660:	4604      	mov	r4, r0
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Init_tev0_raised) , 1, bool_false);
1a000662:	2300      	movs	r3, #0
1a000664:	2201      	movs	r2, #1
1a000666:	f100 0140 	add.w	r1, r0, #64	; 0x40
1a00066a:	f000 fe25 	bl	1a0012b8 <proyecto_set_timer>
	handle->internal.viSec = -1;
1a00066e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000672:	6263      	str	r3, [r4, #36]	; 0x24
	handle->internal.viMin = 0;
1a000674:	2300      	movs	r3, #0
1a000676:	62a3      	str	r3, [r4, #40]	; 0x28
	handle->internal.viHs = 0;
1a000678:	62e3      	str	r3, [r4, #44]	; 0x2c
	handle->internal.viDD = 0;
1a00067a:	6323      	str	r3, [r4, #48]	; 0x30
}
1a00067c:	bd10      	pop	{r4, pc}

1a00067e <enseq_clk_Init_default>:
{
1a00067e:	b510      	push	{r4, lr}
1a000680:	4604      	mov	r4, r0
	enact_clk_Init(handle);
1a000682:	f7ff ffec 	bl	1a00065e <enact_clk_Init>
	handle->stateConfVector[1] = Proyecto_clk_Init;
1a000686:	2307      	movs	r3, #7
1a000688:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a00068a:	2301      	movs	r3, #1
1a00068c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
1a00068e:	bd10      	pop	{r4, pc}

1a000690 <react_clk__entry_Default>:
{
1a000690:	b508      	push	{r3, lr}
	enseq_clk_Init_default(handle);
1a000692:	f7ff fff4 	bl	1a00067e <enseq_clk_Init_default>
}
1a000696:	bd08      	pop	{r3, pc}

1a000698 <enseq_clk_default>:
{
1a000698:	b508      	push	{r3, lr}
	react_clk__entry_Default(handle);
1a00069a:	f7ff fff9 	bl	1a000690 <react_clk__entry_Default>
}
1a00069e:	bd08      	pop	{r3, pc}

1a0006a0 <enact_clk_Minutes>:
{
1a0006a0:	b510      	push	{r4, lr}
1a0006a2:	4604      	mov	r4, r0
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Minutes_tev0_raised) , 3, bool_false);
1a0006a4:	2300      	movs	r3, #0
1a0006a6:	2203      	movs	r2, #3
1a0006a8:	f100 013d 	add.w	r1, r0, #61	; 0x3d
1a0006ac:	f000 fe04 	bl	1a0012b8 <proyecto_set_timer>
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Minutes_tev1_raised) , 1, bool_false);
1a0006b0:	2300      	movs	r3, #0
1a0006b2:	2201      	movs	r2, #1
1a0006b4:	f104 013e 	add.w	r1, r4, #62	; 0x3e
1a0006b8:	4620      	mov	r0, r4
1a0006ba:	f000 fdfd 	bl	1a0012b8 <proyecto_set_timer>
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Minutes_tev2_raised) , 1, bool_false);
1a0006be:	2300      	movs	r3, #0
1a0006c0:	2201      	movs	r2, #1
1a0006c2:	f104 013f 	add.w	r1, r4, #63	; 0x3f
1a0006c6:	4620      	mov	r0, r4
1a0006c8:	f000 fdf6 	bl	1a0012b8 <proyecto_set_timer>
	handle->internal.viMin++;
1a0006cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a0006ce:	3301      	adds	r3, #1
1a0006d0:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a0006d2:	bd10      	pop	{r4, pc}

1a0006d4 <enseq_clk_Minutes_default>:
{
1a0006d4:	b510      	push	{r4, lr}
1a0006d6:	4604      	mov	r4, r0
	enact_clk_Minutes(handle);
1a0006d8:	f7ff ffe2 	bl	1a0006a0 <enact_clk_Minutes>
	handle->stateConfVector[1] = Proyecto_clk_Minutes;
1a0006dc:	2306      	movs	r3, #6
1a0006de:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a0006e0:	2301      	movs	r3, #1
1a0006e2:	64e3      	str	r3, [r4, #76]	; 0x4c
}
1a0006e4:	bd10      	pop	{r4, pc}

1a0006e6 <enact_clk_Seconds>:
{
1a0006e6:	b510      	push	{r4, lr}
1a0006e8:	4604      	mov	r4, r0
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Seconds_tev0_raised) , 997, bool_false);
1a0006ea:	2300      	movs	r3, #0
1a0006ec:	f240 32e5 	movw	r2, #997	; 0x3e5
1a0006f0:	f100 013a 	add.w	r1, r0, #58	; 0x3a
1a0006f4:	f000 fde0 	bl	1a0012b8 <proyecto_set_timer>
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Seconds_tev1_raised) , (1 * 1000), bool_false);
1a0006f8:	2300      	movs	r3, #0
1a0006fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0006fe:	f104 013b 	add.w	r1, r4, #59	; 0x3b
1a000702:	4620      	mov	r0, r4
1a000704:	f000 fdd8 	bl	1a0012b8 <proyecto_set_timer>
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Seconds_tev2_raised) , 1, bool_false);
1a000708:	2300      	movs	r3, #0
1a00070a:	2201      	movs	r2, #1
1a00070c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
1a000710:	4620      	mov	r0, r4
1a000712:	f000 fdd1 	bl	1a0012b8 <proyecto_set_timer>
	handle->internal.viSec++;
1a000716:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000718:	3301      	adds	r3, #1
1a00071a:	6263      	str	r3, [r4, #36]	; 0x24
}
1a00071c:	bd10      	pop	{r4, pc}

1a00071e <enseq_clk_Seconds_default>:
{
1a00071e:	b510      	push	{r4, lr}
1a000720:	4604      	mov	r4, r0
	enact_clk_Seconds(handle);
1a000722:	f7ff ffe0 	bl	1a0006e6 <enact_clk_Seconds>
	handle->stateConfVector[1] = Proyecto_clk_Seconds;
1a000726:	2305      	movs	r3, #5
1a000728:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a00072a:	2301      	movs	r3, #1
1a00072c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
1a00072e:	bd10      	pop	{r4, pc}

1a000730 <enact_clk_Hours>:
{
1a000730:	b510      	push	{r4, lr}
1a000732:	4604      	mov	r4, r0
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Hours_tev0_raised) , 1, bool_false);
1a000734:	2300      	movs	r3, #0
1a000736:	2201      	movs	r2, #1
1a000738:	f100 0141 	add.w	r1, r0, #65	; 0x41
1a00073c:	f000 fdbc 	bl	1a0012b8 <proyecto_set_timer>
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Hours_tev1_raised) , 2, bool_false);
1a000740:	2300      	movs	r3, #0
1a000742:	2202      	movs	r2, #2
1a000744:	f104 0142 	add.w	r1, r4, #66	; 0x42
1a000748:	4620      	mov	r0, r4
1a00074a:	f000 fdb5 	bl	1a0012b8 <proyecto_set_timer>
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Hours_tev2_raised) , 1, bool_false);
1a00074e:	2300      	movs	r3, #0
1a000750:	2201      	movs	r2, #1
1a000752:	f104 0143 	add.w	r1, r4, #67	; 0x43
1a000756:	4620      	mov	r0, r4
1a000758:	f000 fdae 	bl	1a0012b8 <proyecto_set_timer>
	handle->internal.viHs++;
1a00075c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00075e:	3301      	adds	r3, #1
1a000760:	62e3      	str	r3, [r4, #44]	; 0x2c
}
1a000762:	bd10      	pop	{r4, pc}

1a000764 <enseq_clk_Hours_default>:
{
1a000764:	b510      	push	{r4, lr}
1a000766:	4604      	mov	r4, r0
	enact_clk_Hours(handle);
1a000768:	f7ff ffe2 	bl	1a000730 <enact_clk_Hours>
	handle->stateConfVector[1] = Proyecto_clk_Hours;
1a00076c:	2308      	movs	r3, #8
1a00076e:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a000770:	2301      	movs	r3, #1
1a000772:	64e3      	str	r3, [r4, #76]	; 0x4c
}
1a000774:	bd10      	pop	{r4, pc}

1a000776 <enact_clk_Days>:
{
1a000776:	b510      	push	{r4, lr}
1a000778:	4604      	mov	r4, r0
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Days_tev0_raised) , 1, bool_false);
1a00077a:	2300      	movs	r3, #0
1a00077c:	2201      	movs	r2, #1
1a00077e:	f100 0144 	add.w	r1, r0, #68	; 0x44
1a000782:	f000 fd99 	bl	1a0012b8 <proyecto_set_timer>
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Days_tev1_raised) , 1, bool_false);
1a000786:	2300      	movs	r3, #0
1a000788:	2201      	movs	r2, #1
1a00078a:	f104 0145 	add.w	r1, r4, #69	; 0x45
1a00078e:	4620      	mov	r0, r4
1a000790:	f000 fd92 	bl	1a0012b8 <proyecto_set_timer>
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Days_tev2_raised) , 1, bool_false);
1a000794:	2300      	movs	r3, #0
1a000796:	2201      	movs	r2, #1
1a000798:	f104 0146 	add.w	r1, r4, #70	; 0x46
1a00079c:	4620      	mov	r0, r4
1a00079e:	f000 fd8b 	bl	1a0012b8 <proyecto_set_timer>
	handle->internal.viDD++;
1a0007a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0007a4:	3301      	adds	r3, #1
1a0007a6:	6323      	str	r3, [r4, #48]	; 0x30
}
1a0007a8:	bd10      	pop	{r4, pc}

1a0007aa <enseq_clk_Days_default>:
{
1a0007aa:	b510      	push	{r4, lr}
1a0007ac:	4604      	mov	r4, r0
	enact_clk_Days(handle);
1a0007ae:	f7ff ffe2 	bl	1a000776 <enact_clk_Days>
	handle->stateConfVector[1] = Proyecto_clk_Days;
1a0007b2:	2309      	movs	r3, #9
1a0007b4:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a0007b6:	2301      	movs	r3, #1
1a0007b8:	64e3      	str	r3, [r4, #76]	; 0x4c
}
1a0007ba:	bd10      	pop	{r4, pc}

1a0007bc <exact_main_region_Feeding>:
{
1a0007bc:	b508      	push	{r3, lr}
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_main_region_Feeding_tev0_raised) );		
1a0007be:	f100 0138 	add.w	r1, r0, #56	; 0x38
1a0007c2:	f000 fd87 	bl	1a0012d4 <proyecto_unset_timer>
}
1a0007c6:	bd08      	pop	{r3, pc}

1a0007c8 <exseq_main_region_Feeding>:
{
1a0007c8:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = Proyecto_last_state;
1a0007ca:	2200      	movs	r2, #0
1a0007cc:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0007ce:	64c2      	str	r2, [r0, #76]	; 0x4c
	exact_main_region_Feeding(handle);
1a0007d0:	f7ff fff4 	bl	1a0007bc <exact_main_region_Feeding>
}
1a0007d4:	bd08      	pop	{r3, pc}

1a0007d6 <exact_main_region_Paused>:
{
1a0007d6:	b508      	push	{r3, lr}
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_main_region_Paused_tev0_raised) );		
1a0007d8:	f100 0139 	add.w	r1, r0, #57	; 0x39
1a0007dc:	f000 fd7a 	bl	1a0012d4 <proyecto_unset_timer>
}
1a0007e0:	bd08      	pop	{r3, pc}

1a0007e2 <exseq_main_region_Paused>:
{
1a0007e2:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = Proyecto_last_state;
1a0007e4:	2200      	movs	r2, #0
1a0007e6:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0007e8:	64c2      	str	r2, [r0, #76]	; 0x4c
	exact_main_region_Paused(handle);
1a0007ea:	f7ff fff4 	bl	1a0007d6 <exact_main_region_Paused>
}
1a0007ee:	bd08      	pop	{r3, pc}

1a0007f0 <exact_clk_Seconds>:
{
1a0007f0:	b510      	push	{r4, lr}
1a0007f2:	4604      	mov	r4, r0
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Seconds_tev0_raised) );		
1a0007f4:	f100 013a 	add.w	r1, r0, #58	; 0x3a
1a0007f8:	f000 fd6c 	bl	1a0012d4 <proyecto_unset_timer>
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Seconds_tev1_raised) );		
1a0007fc:	f104 013b 	add.w	r1, r4, #59	; 0x3b
1a000800:	4620      	mov	r0, r4
1a000802:	f000 fd67 	bl	1a0012d4 <proyecto_unset_timer>
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Seconds_tev2_raised) );		
1a000806:	f104 013c 	add.w	r1, r4, #60	; 0x3c
1a00080a:	4620      	mov	r0, r4
1a00080c:	f000 fd62 	bl	1a0012d4 <proyecto_unset_timer>
}
1a000810:	bd10      	pop	{r4, pc}

1a000812 <exseq_clk_Seconds>:
{
1a000812:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = Proyecto_last_state;
1a000814:	2200      	movs	r2, #0
1a000816:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000818:	2201      	movs	r2, #1
1a00081a:	64c2      	str	r2, [r0, #76]	; 0x4c
	exact_clk_Seconds(handle);
1a00081c:	f7ff ffe8 	bl	1a0007f0 <exact_clk_Seconds>
}
1a000820:	bd08      	pop	{r3, pc}

1a000822 <clk_Seconds_react>:
{
1a000822:	b510      	push	{r4, lr}
1a000824:	4604      	mov	r4, r0
	if ((transitioned_after) < (1))
1a000826:	1e08      	subs	r0, r1, #0
1a000828:	dd00      	ble.n	1a00082c <clk_Seconds_react+0xa>
}
1a00082a:	bd10      	pop	{r4, pc}
		if (((handle->timeEvents.proyecto_clk_Seconds_tev0_raised) == bool_true) && (((handle->internal.viSec) == (PROYECTO_PROYECTOIFACE_MAX_SEC)) == bool_true))
1a00082c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
1a000830:	b113      	cbz	r3, 1a000838 <clk_Seconds_react+0x16>
1a000832:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000834:	2b3b      	cmp	r3, #59	; 0x3b
1a000836:	d024      	beq.n	1a000882 <clk_Seconds_react+0x60>
			if (((handle->timeEvents.proyecto_clk_Seconds_tev1_raised) == bool_true) && (((handle->internal.viSec) < (PROYECTO_PROYECTOIFACE_MAX_SEC)) == bool_true))
1a000838:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
1a00083c:	b113      	cbz	r3, 1a000844 <clk_Seconds_react+0x22>
1a00083e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000840:	2b3a      	cmp	r3, #58	; 0x3a
1a000842:	dd26      	ble.n	1a000892 <clk_Seconds_react+0x70>
				if (handle->iface.evFeedRst_raised == bool_true)
1a000844:	7963      	ldrb	r3, [r4, #5]
1a000846:	bb63      	cbnz	r3, 1a0008a2 <clk_Seconds_react+0x80>
					if (((handle->timeEvents.proyecto_clk_Seconds_tev2_raised) == bool_true) && (((((handle->iface.viIntervalHs) == (handle->internal.viHs)) && ((handle->iface.viIntervalMin) == (handle->internal.viMin))) && ((handle->iface.viIntervalSec) == (handle->internal.viSec))) == bool_true))
1a000848:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
1a00084c:	2b00      	cmp	r3, #0
1a00084e:	d0ec      	beq.n	1a00082a <clk_Seconds_react+0x8>
1a000850:	68e2      	ldr	r2, [r4, #12]
1a000852:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000854:	429a      	cmp	r2, r3
1a000856:	d1e8      	bne.n	1a00082a <clk_Seconds_react+0x8>
1a000858:	6922      	ldr	r2, [r4, #16]
1a00085a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a00085c:	429a      	cmp	r2, r3
1a00085e:	d1e4      	bne.n	1a00082a <clk_Seconds_react+0x8>
1a000860:	6962      	ldr	r2, [r4, #20]
1a000862:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000864:	429a      	cmp	r2, r3
1a000866:	d1e0      	bne.n	1a00082a <clk_Seconds_react+0x8>
						exseq_clk_Seconds(handle);
1a000868:	4620      	mov	r0, r4
1a00086a:	f7ff ffd2 	bl	1a000812 <exseq_clk_Seconds>
						proyecto_add_event_to_queue(&(handle->internal_event_queue), Proyecto_internal_siFeed)
1a00086e:	2108      	movs	r1, #8
1a000870:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a000874:	f7ff fdd5 	bl	1a000422 <proyecto_add_event_to_queue>
						enseq_clk_Init_default(handle);
1a000878:	4620      	mov	r0, r4
1a00087a:	f7ff ff00 	bl	1a00067e <enseq_clk_Init_default>
						transitioned_after = 1;
1a00087e:	2001      	movs	r0, #1
1a000880:	e7d3      	b.n	1a00082a <clk_Seconds_react+0x8>
			exseq_clk_Seconds(handle);
1a000882:	4620      	mov	r0, r4
1a000884:	f7ff ffc5 	bl	1a000812 <exseq_clk_Seconds>
			enseq_clk_Minutes_default(handle);
1a000888:	4620      	mov	r0, r4
1a00088a:	f7ff ff23 	bl	1a0006d4 <enseq_clk_Minutes_default>
			transitioned_after = 1;
1a00088e:	2001      	movs	r0, #1
1a000890:	e7cb      	b.n	1a00082a <clk_Seconds_react+0x8>
				exseq_clk_Seconds(handle);
1a000892:	4620      	mov	r0, r4
1a000894:	f7ff ffbd 	bl	1a000812 <exseq_clk_Seconds>
				enseq_clk_Seconds_default(handle);
1a000898:	4620      	mov	r0, r4
1a00089a:	f7ff ff40 	bl	1a00071e <enseq_clk_Seconds_default>
				transitioned_after = 1;
1a00089e:	2001      	movs	r0, #1
1a0008a0:	e7c3      	b.n	1a00082a <clk_Seconds_react+0x8>
					exseq_clk_Seconds(handle);
1a0008a2:	4620      	mov	r0, r4
1a0008a4:	f7ff ffb5 	bl	1a000812 <exseq_clk_Seconds>
					enseq_clk_Init_default(handle);
1a0008a8:	4620      	mov	r0, r4
1a0008aa:	f7ff fee8 	bl	1a00067e <enseq_clk_Init_default>
					transitioned_after = 1;
1a0008ae:	2001      	movs	r0, #1
1a0008b0:	e7bb      	b.n	1a00082a <clk_Seconds_react+0x8>

1a0008b2 <exact_clk_Minutes>:
{
1a0008b2:	b510      	push	{r4, lr}
1a0008b4:	4604      	mov	r4, r0
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Minutes_tev0_raised) );		
1a0008b6:	f100 013d 	add.w	r1, r0, #61	; 0x3d
1a0008ba:	f000 fd0b 	bl	1a0012d4 <proyecto_unset_timer>
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Minutes_tev1_raised) );		
1a0008be:	f104 013e 	add.w	r1, r4, #62	; 0x3e
1a0008c2:	4620      	mov	r0, r4
1a0008c4:	f000 fd06 	bl	1a0012d4 <proyecto_unset_timer>
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Minutes_tev2_raised) );		
1a0008c8:	f104 013f 	add.w	r1, r4, #63	; 0x3f
1a0008cc:	4620      	mov	r0, r4
1a0008ce:	f000 fd01 	bl	1a0012d4 <proyecto_unset_timer>
}
1a0008d2:	bd10      	pop	{r4, pc}

1a0008d4 <exseq_clk_Minutes>:
{
1a0008d4:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = Proyecto_last_state;
1a0008d6:	2200      	movs	r2, #0
1a0008d8:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a0008da:	2201      	movs	r2, #1
1a0008dc:	64c2      	str	r2, [r0, #76]	; 0x4c
	exact_clk_Minutes(handle);
1a0008de:	f7ff ffe8 	bl	1a0008b2 <exact_clk_Minutes>
}
1a0008e2:	bd08      	pop	{r3, pc}

1a0008e4 <clk_Minutes_react>:
{
1a0008e4:	b510      	push	{r4, lr}
1a0008e6:	4604      	mov	r4, r0
	if ((transitioned_after) < (1))
1a0008e8:	1e08      	subs	r0, r1, #0
1a0008ea:	dd00      	ble.n	1a0008ee <clk_Minutes_react+0xa>
}
1a0008ec:	bd10      	pop	{r4, pc}
		if (((handle->timeEvents.proyecto_clk_Minutes_tev0_raised) == bool_true) && (((handle->internal.viMin) < (PROYECTO_PROYECTOIFACE_MAX_MIN)) == bool_true))
1a0008ee:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
1a0008f2:	b113      	cbz	r3, 1a0008fa <clk_Minutes_react+0x16>
1a0008f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a0008f6:	2b3b      	cmp	r3, #59	; 0x3b
1a0008f8:	dd24      	ble.n	1a000944 <clk_Minutes_react+0x60>
			if (((handle->timeEvents.proyecto_clk_Minutes_tev1_raised) == bool_true) && (((handle->internal.viMin) == (PROYECTO_PROYECTOIFACE_MAX_MIN)) == bool_true))
1a0008fa:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
1a0008fe:	b113      	cbz	r3, 1a000906 <clk_Minutes_react+0x22>
1a000900:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a000902:	2b3c      	cmp	r3, #60	; 0x3c
1a000904:	d029      	beq.n	1a00095a <clk_Minutes_react+0x76>
				if (handle->iface.evFeedRst_raised == bool_true)
1a000906:	7963      	ldrb	r3, [r4, #5]
1a000908:	bb8b      	cbnz	r3, 1a00096e <clk_Minutes_react+0x8a>
					if (((handle->timeEvents.proyecto_clk_Minutes_tev2_raised) == bool_true) && (((((handle->iface.viIntervalHs) == (handle->internal.viHs)) && ((handle->iface.viIntervalMin) == (handle->internal.viMin))) && ((handle->iface.viIntervalSec) == (handle->internal.viSec))) == bool_true))
1a00090a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
1a00090e:	2b00      	cmp	r3, #0
1a000910:	d0ec      	beq.n	1a0008ec <clk_Minutes_react+0x8>
1a000912:	68e2      	ldr	r2, [r4, #12]
1a000914:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000916:	429a      	cmp	r2, r3
1a000918:	d1e8      	bne.n	1a0008ec <clk_Minutes_react+0x8>
1a00091a:	6922      	ldr	r2, [r4, #16]
1a00091c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a00091e:	429a      	cmp	r2, r3
1a000920:	d1e4      	bne.n	1a0008ec <clk_Minutes_react+0x8>
1a000922:	6962      	ldr	r2, [r4, #20]
1a000924:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000926:	429a      	cmp	r2, r3
1a000928:	d1e0      	bne.n	1a0008ec <clk_Minutes_react+0x8>
						exseq_clk_Minutes(handle);
1a00092a:	4620      	mov	r0, r4
1a00092c:	f7ff ffd2 	bl	1a0008d4 <exseq_clk_Minutes>
						proyecto_add_event_to_queue(&(handle->internal_event_queue), Proyecto_internal_siFeed)
1a000930:	2108      	movs	r1, #8
1a000932:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a000936:	f7ff fd74 	bl	1a000422 <proyecto_add_event_to_queue>
						enseq_clk_Init_default(handle);
1a00093a:	4620      	mov	r0, r4
1a00093c:	f7ff fe9f 	bl	1a00067e <enseq_clk_Init_default>
						transitioned_after = 1;
1a000940:	2001      	movs	r0, #1
1a000942:	e7d3      	b.n	1a0008ec <clk_Minutes_react+0x8>
			exseq_clk_Minutes(handle);
1a000944:	4620      	mov	r0, r4
1a000946:	f7ff ffc5 	bl	1a0008d4 <exseq_clk_Minutes>
			handle->internal.viSec = -1;
1a00094a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00094e:	6263      	str	r3, [r4, #36]	; 0x24
			enseq_clk_Seconds_default(handle);
1a000950:	4620      	mov	r0, r4
1a000952:	f7ff fee4 	bl	1a00071e <enseq_clk_Seconds_default>
			transitioned_after = 1;
1a000956:	2001      	movs	r0, #1
1a000958:	e7c8      	b.n	1a0008ec <clk_Minutes_react+0x8>
				exseq_clk_Minutes(handle);
1a00095a:	4620      	mov	r0, r4
1a00095c:	f7ff ffba 	bl	1a0008d4 <exseq_clk_Minutes>
				handle->internal.viSec = 0;
1a000960:	2300      	movs	r3, #0
1a000962:	6263      	str	r3, [r4, #36]	; 0x24
				enseq_clk_Hours_default(handle);
1a000964:	4620      	mov	r0, r4
1a000966:	f7ff fefd 	bl	1a000764 <enseq_clk_Hours_default>
				transitioned_after = 1;
1a00096a:	2001      	movs	r0, #1
1a00096c:	e7be      	b.n	1a0008ec <clk_Minutes_react+0x8>
					exseq_clk_Minutes(handle);
1a00096e:	4620      	mov	r0, r4
1a000970:	f7ff ffb0 	bl	1a0008d4 <exseq_clk_Minutes>
					enseq_clk_Init_default(handle);
1a000974:	4620      	mov	r0, r4
1a000976:	f7ff fe82 	bl	1a00067e <enseq_clk_Init_default>
					transitioned_after = 1;
1a00097a:	2001      	movs	r0, #1
1a00097c:	e7b6      	b.n	1a0008ec <clk_Minutes_react+0x8>

1a00097e <exact_clk_Init>:
{
1a00097e:	b508      	push	{r3, lr}
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Init_tev0_raised) );		
1a000980:	f100 0140 	add.w	r1, r0, #64	; 0x40
1a000984:	f000 fca6 	bl	1a0012d4 <proyecto_unset_timer>
}
1a000988:	bd08      	pop	{r3, pc}

1a00098a <exseq_clk_Init>:
{
1a00098a:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = Proyecto_last_state;
1a00098c:	2200      	movs	r2, #0
1a00098e:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000990:	2201      	movs	r2, #1
1a000992:	64c2      	str	r2, [r0, #76]	; 0x4c
	exact_clk_Init(handle);
1a000994:	f7ff fff3 	bl	1a00097e <exact_clk_Init>
}
1a000998:	bd08      	pop	{r3, pc}

1a00099a <clk_Init_react>:
{
1a00099a:	b510      	push	{r4, lr}
1a00099c:	4604      	mov	r4, r0
	if ((transitioned_after) < (1))
1a00099e:	1e08      	subs	r0, r1, #0
1a0009a0:	dd00      	ble.n	1a0009a4 <clk_Init_react+0xa>
}
1a0009a2:	bd10      	pop	{r4, pc}
		if (handle->timeEvents.proyecto_clk_Init_tev0_raised == bool_true)
1a0009a4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
1a0009a8:	2b00      	cmp	r3, #0
1a0009aa:	d0fa      	beq.n	1a0009a2 <clk_Init_react+0x8>
			exseq_clk_Init(handle);
1a0009ac:	4620      	mov	r0, r4
1a0009ae:	f7ff ffec 	bl	1a00098a <exseq_clk_Init>
			enseq_clk_Seconds_default(handle);
1a0009b2:	4620      	mov	r0, r4
1a0009b4:	f7ff feb3 	bl	1a00071e <enseq_clk_Seconds_default>
			transitioned_after = 1;
1a0009b8:	2001      	movs	r0, #1
1a0009ba:	e7f2      	b.n	1a0009a2 <clk_Init_react+0x8>

1a0009bc <exact_clk_Hours>:
{
1a0009bc:	b510      	push	{r4, lr}
1a0009be:	4604      	mov	r4, r0
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Hours_tev0_raised) );		
1a0009c0:	f100 0141 	add.w	r1, r0, #65	; 0x41
1a0009c4:	f000 fc86 	bl	1a0012d4 <proyecto_unset_timer>
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Hours_tev1_raised) );		
1a0009c8:	f104 0142 	add.w	r1, r4, #66	; 0x42
1a0009cc:	4620      	mov	r0, r4
1a0009ce:	f000 fc81 	bl	1a0012d4 <proyecto_unset_timer>
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Hours_tev2_raised) );		
1a0009d2:	f104 0143 	add.w	r1, r4, #67	; 0x43
1a0009d6:	4620      	mov	r0, r4
1a0009d8:	f000 fc7c 	bl	1a0012d4 <proyecto_unset_timer>
}
1a0009dc:	bd10      	pop	{r4, pc}

1a0009de <exseq_clk_Hours>:
{
1a0009de:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = Proyecto_last_state;
1a0009e0:	2200      	movs	r2, #0
1a0009e2:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a0009e4:	2201      	movs	r2, #1
1a0009e6:	64c2      	str	r2, [r0, #76]	; 0x4c
	exact_clk_Hours(handle);
1a0009e8:	f7ff ffe8 	bl	1a0009bc <exact_clk_Hours>
}
1a0009ec:	bd08      	pop	{r3, pc}

1a0009ee <clk_Hours_react>:
{
1a0009ee:	b510      	push	{r4, lr}
1a0009f0:	4604      	mov	r4, r0
	if ((transitioned_after) < (1))
1a0009f2:	1e08      	subs	r0, r1, #0
1a0009f4:	dd00      	ble.n	1a0009f8 <clk_Hours_react+0xa>
}
1a0009f6:	bd10      	pop	{r4, pc}
		if (((handle->timeEvents.proyecto_clk_Hours_tev0_raised) == bool_true) && (((handle->internal.viHs) == (PROYECTO_PROYECTOIFACE_MAX_HS)) == bool_true))
1a0009f8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
1a0009fc:	b113      	cbz	r3, 1a000a04 <clk_Hours_react+0x16>
1a0009fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000a00:	2b18      	cmp	r3, #24
1a000a02:	d025      	beq.n	1a000a50 <clk_Hours_react+0x62>
			if (((handle->timeEvents.proyecto_clk_Hours_tev1_raised) == bool_true) && (((handle->internal.viHs) < (PROYECTO_PROYECTOIFACE_MAX_HS)) == bool_true))
1a000a04:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
1a000a08:	b113      	cbz	r3, 1a000a10 <clk_Hours_react+0x22>
1a000a0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000a0c:	2b17      	cmp	r3, #23
1a000a0e:	dd2a      	ble.n	1a000a66 <clk_Hours_react+0x78>
				if (handle->iface.evFeedRst_raised == bool_true)
1a000a10:	7963      	ldrb	r3, [r4, #5]
1a000a12:	2b00      	cmp	r3, #0
1a000a14:	d134      	bne.n	1a000a80 <clk_Hours_react+0x92>
					if (((handle->timeEvents.proyecto_clk_Hours_tev2_raised) == bool_true) && (((((handle->iface.viIntervalHs) == (handle->internal.viHs)) && ((handle->iface.viIntervalMin) == (handle->internal.viMin))) && ((handle->iface.viIntervalSec) == (handle->internal.viSec))) == bool_true))
1a000a16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a000a1a:	2b00      	cmp	r3, #0
1a000a1c:	d0eb      	beq.n	1a0009f6 <clk_Hours_react+0x8>
1a000a1e:	68e2      	ldr	r2, [r4, #12]
1a000a20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000a22:	429a      	cmp	r2, r3
1a000a24:	d1e7      	bne.n	1a0009f6 <clk_Hours_react+0x8>
1a000a26:	6922      	ldr	r2, [r4, #16]
1a000a28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a000a2a:	429a      	cmp	r2, r3
1a000a2c:	d1e3      	bne.n	1a0009f6 <clk_Hours_react+0x8>
1a000a2e:	6962      	ldr	r2, [r4, #20]
1a000a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000a32:	429a      	cmp	r2, r3
1a000a34:	d1df      	bne.n	1a0009f6 <clk_Hours_react+0x8>
						exseq_clk_Hours(handle);
1a000a36:	4620      	mov	r0, r4
1a000a38:	f7ff ffd1 	bl	1a0009de <exseq_clk_Hours>
						proyecto_add_event_to_queue(&(handle->internal_event_queue), Proyecto_internal_siFeed)
1a000a3c:	2108      	movs	r1, #8
1a000a3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a000a42:	f7ff fcee 	bl	1a000422 <proyecto_add_event_to_queue>
						enseq_clk_Init_default(handle);
1a000a46:	4620      	mov	r0, r4
1a000a48:	f7ff fe19 	bl	1a00067e <enseq_clk_Init_default>
						transitioned_after = 1;
1a000a4c:	2001      	movs	r0, #1
1a000a4e:	e7d2      	b.n	1a0009f6 <clk_Hours_react+0x8>
			exseq_clk_Hours(handle);
1a000a50:	4620      	mov	r0, r4
1a000a52:	f7ff ffc4 	bl	1a0009de <exseq_clk_Hours>
			handle->internal.viMin = 0;
1a000a56:	2300      	movs	r3, #0
1a000a58:	62a3      	str	r3, [r4, #40]	; 0x28
			handle->internal.viSec = 0;
1a000a5a:	6263      	str	r3, [r4, #36]	; 0x24
			enseq_clk_Days_default(handle);
1a000a5c:	4620      	mov	r0, r4
1a000a5e:	f7ff fea4 	bl	1a0007aa <enseq_clk_Days_default>
			transitioned_after = 1;
1a000a62:	2001      	movs	r0, #1
1a000a64:	e7c7      	b.n	1a0009f6 <clk_Hours_react+0x8>
				exseq_clk_Hours(handle);
1a000a66:	4620      	mov	r0, r4
1a000a68:	f7ff ffb9 	bl	1a0009de <exseq_clk_Hours>
				handle->internal.viMin = 0;
1a000a6c:	2300      	movs	r3, #0
1a000a6e:	62a3      	str	r3, [r4, #40]	; 0x28
				handle->internal.viSec = -1;
1a000a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000a74:	6263      	str	r3, [r4, #36]	; 0x24
				enseq_clk_Seconds_default(handle);
1a000a76:	4620      	mov	r0, r4
1a000a78:	f7ff fe51 	bl	1a00071e <enseq_clk_Seconds_default>
				transitioned_after = 1;
1a000a7c:	2001      	movs	r0, #1
1a000a7e:	e7ba      	b.n	1a0009f6 <clk_Hours_react+0x8>
					exseq_clk_Hours(handle);
1a000a80:	4620      	mov	r0, r4
1a000a82:	f7ff ffac 	bl	1a0009de <exseq_clk_Hours>
					enseq_clk_Init_default(handle);
1a000a86:	4620      	mov	r0, r4
1a000a88:	f7ff fdf9 	bl	1a00067e <enseq_clk_Init_default>
					transitioned_after = 1;
1a000a8c:	2001      	movs	r0, #1
1a000a8e:	e7b2      	b.n	1a0009f6 <clk_Hours_react+0x8>

1a000a90 <exact_clk_Days>:
{
1a000a90:	b510      	push	{r4, lr}
1a000a92:	4604      	mov	r4, r0
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Days_tev0_raised) );		
1a000a94:	f100 0144 	add.w	r1, r0, #68	; 0x44
1a000a98:	f000 fc1c 	bl	1a0012d4 <proyecto_unset_timer>
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Days_tev1_raised) );		
1a000a9c:	f104 0145 	add.w	r1, r4, #69	; 0x45
1a000aa0:	4620      	mov	r0, r4
1a000aa2:	f000 fc17 	bl	1a0012d4 <proyecto_unset_timer>
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_clk_Days_tev2_raised) );		
1a000aa6:	f104 0146 	add.w	r1, r4, #70	; 0x46
1a000aaa:	4620      	mov	r0, r4
1a000aac:	f000 fc12 	bl	1a0012d4 <proyecto_unset_timer>
}
1a000ab0:	bd10      	pop	{r4, pc}

1a000ab2 <exseq_clk_Days>:
{
1a000ab2:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = Proyecto_last_state;
1a000ab4:	2200      	movs	r2, #0
1a000ab6:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000ab8:	2201      	movs	r2, #1
1a000aba:	64c2      	str	r2, [r0, #76]	; 0x4c
	exact_clk_Days(handle);
1a000abc:	f7ff ffe8 	bl	1a000a90 <exact_clk_Days>
}
1a000ac0:	bd08      	pop	{r3, pc}

1a000ac2 <clk_Days_react>:
{
1a000ac2:	b510      	push	{r4, lr}
1a000ac4:	4604      	mov	r4, r0
	if ((transitioned_after) < (1))
1a000ac6:	1e08      	subs	r0, r1, #0
1a000ac8:	dd00      	ble.n	1a000acc <clk_Days_react+0xa>
}
1a000aca:	bd10      	pop	{r4, pc}
		if (((handle->timeEvents.proyecto_clk_Days_tev0_raised) == bool_true) && (((handle->internal.viDD) < (PROYECTO_PROYECTOIFACE_MAX_DD)) == bool_true))
1a000acc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000ad0:	b11b      	cbz	r3, 1a000ada <clk_Days_react+0x18>
1a000ad2:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000ad4:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
1a000ad8:	dd26      	ble.n	1a000b28 <clk_Days_react+0x66>
			if (((handle->timeEvents.proyecto_clk_Days_tev1_raised) == bool_true) && (((handle->internal.viDD) == (PROYECTO_PROYECTOIFACE_MAX_DD)) == bool_true))
1a000ada:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000ade:	b123      	cbz	r3, 1a000aea <clk_Days_react+0x28>
1a000ae0:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a000ae2:	f240 136d 	movw	r3, #365	; 0x16d
1a000ae6:	429a      	cmp	r2, r3
1a000ae8:	d02c      	beq.n	1a000b44 <clk_Days_react+0x82>
				if (handle->iface.evFeedRst_raised == bool_true)
1a000aea:	7963      	ldrb	r3, [r4, #5]
1a000aec:	bb93      	cbnz	r3, 1a000b54 <clk_Days_react+0x92>
					if (((handle->timeEvents.proyecto_clk_Days_tev2_raised) == bool_true) && (((((handle->iface.viIntervalHs) == (handle->internal.viHs)) && ((handle->iface.viIntervalMin) == (handle->internal.viMin))) && ((handle->iface.viIntervalSec) == (handle->internal.viSec))) == bool_true))
1a000aee:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
1a000af2:	2b00      	cmp	r3, #0
1a000af4:	d0e9      	beq.n	1a000aca <clk_Days_react+0x8>
1a000af6:	68e2      	ldr	r2, [r4, #12]
1a000af8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000afa:	429a      	cmp	r2, r3
1a000afc:	d1e5      	bne.n	1a000aca <clk_Days_react+0x8>
1a000afe:	6922      	ldr	r2, [r4, #16]
1a000b00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a000b02:	429a      	cmp	r2, r3
1a000b04:	d1e1      	bne.n	1a000aca <clk_Days_react+0x8>
1a000b06:	6962      	ldr	r2, [r4, #20]
1a000b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000b0a:	429a      	cmp	r2, r3
1a000b0c:	d1dd      	bne.n	1a000aca <clk_Days_react+0x8>
						exseq_clk_Days(handle);
1a000b0e:	4620      	mov	r0, r4
1a000b10:	f7ff ffcf 	bl	1a000ab2 <exseq_clk_Days>
						proyecto_add_event_to_queue(&(handle->internal_event_queue), Proyecto_internal_siFeed)
1a000b14:	2108      	movs	r1, #8
1a000b16:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a000b1a:	f7ff fc82 	bl	1a000422 <proyecto_add_event_to_queue>
						enseq_clk_Init_default(handle);
1a000b1e:	4620      	mov	r0, r4
1a000b20:	f7ff fdad 	bl	1a00067e <enseq_clk_Init_default>
						transitioned_after = 1;
1a000b24:	2001      	movs	r0, #1
1a000b26:	e7d0      	b.n	1a000aca <clk_Days_react+0x8>
			exseq_clk_Days(handle);
1a000b28:	4620      	mov	r0, r4
1a000b2a:	f7ff ffc2 	bl	1a000ab2 <exseq_clk_Days>
			handle->internal.viHs = 0;
1a000b2e:	2300      	movs	r3, #0
1a000b30:	62e3      	str	r3, [r4, #44]	; 0x2c
			handle->internal.viMin = 0;
1a000b32:	62a3      	str	r3, [r4, #40]	; 0x28
			handle->internal.viSec = -1;
1a000b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000b38:	6263      	str	r3, [r4, #36]	; 0x24
			enseq_clk_Seconds_default(handle);
1a000b3a:	4620      	mov	r0, r4
1a000b3c:	f7ff fdef 	bl	1a00071e <enseq_clk_Seconds_default>
			transitioned_after = 1;
1a000b40:	2001      	movs	r0, #1
1a000b42:	e7c2      	b.n	1a000aca <clk_Days_react+0x8>
				exseq_clk_Days(handle);
1a000b44:	4620      	mov	r0, r4
1a000b46:	f7ff ffb4 	bl	1a000ab2 <exseq_clk_Days>
				enseq_clk_Init_default(handle);
1a000b4a:	4620      	mov	r0, r4
1a000b4c:	f7ff fd97 	bl	1a00067e <enseq_clk_Init_default>
				transitioned_after = 1;
1a000b50:	2001      	movs	r0, #1
1a000b52:	e7ba      	b.n	1a000aca <clk_Days_react+0x8>
					exseq_clk_Days(handle);
1a000b54:	4620      	mov	r0, r4
1a000b56:	f7ff ffac 	bl	1a000ab2 <exseq_clk_Days>
					enseq_clk_Init_default(handle);
1a000b5a:	4620      	mov	r0, r4
1a000b5c:	f7ff fd8f 	bl	1a00067e <enseq_clk_Init_default>
					transitioned_after = 1;
1a000b60:	2001      	movs	r0, #1
1a000b62:	e7b2      	b.n	1a000aca <clk_Days_react+0x8>

1a000b64 <exact_conf_Parameter_Set>:
{
1a000b64:	b508      	push	{r3, lr}
	proyecto_unset_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_conf_Parameter_Set_tev0_raised) );		
1a000b66:	f100 0147 	add.w	r1, r0, #71	; 0x47
1a000b6a:	f000 fbb3 	bl	1a0012d4 <proyecto_unset_timer>
}
1a000b6e:	bd08      	pop	{r3, pc}

1a000b70 <exseq_conf_Parameter_Set>:
{
1a000b70:	b508      	push	{r3, lr}
	handle->stateConfVector[2] = Proyecto_last_state;
1a000b72:	2200      	movs	r2, #0
1a000b74:	7082      	strb	r2, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a000b76:	2202      	movs	r2, #2
1a000b78:	64c2      	str	r2, [r0, #76]	; 0x4c
	exact_conf_Parameter_Set(handle);
1a000b7a:	f7ff fff3 	bl	1a000b64 <exact_conf_Parameter_Set>
}
1a000b7e:	bd08      	pop	{r3, pc}

1a000b80 <conf_Parameter_Set_react>:
{
1a000b80:	b538      	push	{r3, r4, r5, lr}
1a000b82:	4605      	mov	r5, r0
1a000b84:	460c      	mov	r4, r1
	if ((transitioned_after) < (2))
1a000b86:	2901      	cmp	r1, #1
1a000b88:	dd03      	ble.n	1a000b92 <conf_Parameter_Set_react+0x12>
 			sc_integer transitioned_after = transitioned_before;
1a000b8a:	4608      	mov	r0, r1
	if ((transitioned_after) == (transitioned_before))
1a000b8c:	42a0      	cmp	r0, r4
1a000b8e:	d00c      	beq.n	1a000baa <conf_Parameter_Set_react+0x2a>
}
1a000b90:	bd38      	pop	{r3, r4, r5, pc}
		if (handle->timeEvents.proyecto_conf_Parameter_Set_tev0_raised == bool_true)
1a000b92:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
1a000b96:	b90b      	cbnz	r3, 1a000b9c <conf_Parameter_Set_react+0x1c>
 			sc_integer transitioned_after = transitioned_before;
1a000b98:	4608      	mov	r0, r1
1a000b9a:	e7f7      	b.n	1a000b8c <conf_Parameter_Set_react+0xc>
			exseq_conf_Parameter_Set(handle);
1a000b9c:	f7ff ffe8 	bl	1a000b70 <exseq_conf_Parameter_Set>
			enseq_conf_Idle_default(handle);
1a000ba0:	4628      	mov	r0, r5
1a000ba2:	f7ff fbda 	bl	1a00035a <enseq_conf_Idle_default>
			transitioned_after = 2;
1a000ba6:	2002      	movs	r0, #2
1a000ba8:	e7f0      	b.n	1a000b8c <conf_Parameter_Set_react+0xc>
		transitioned_after = react(handle, transitioned_before);
1a000baa:	4621      	mov	r1, r4
1a000bac:	4628      	mov	r0, r5
1a000bae:	f7ff fbee 	bl	1a00038e <react>
	} return transitioned_after;
1a000bb2:	e7ed      	b.n	1a000b90 <conf_Parameter_Set_react+0x10>

1a000bb4 <enact_main_region_Feeding>:
{
1a000bb4:	b510      	push	{r4, lr}
1a000bb6:	4604      	mov	r4, r0
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_main_region_Feeding_tev0_raised) , ((1000 * handle->iface.viAmount) / PROYECTO_PROYECTOIFACE_FLOW), bool_false);
1a000bb8:	6982      	ldr	r2, [r0, #24]
1a000bba:	2300      	movs	r3, #0
1a000bbc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a000bc0:	f100 0138 	add.w	r1, r0, #56	; 0x38
1a000bc4:	f000 fb78 	bl	1a0012b8 <proyecto_set_timer>
	proyecto_startMotor(handle);
1a000bc8:	4620      	mov	r0, r4
1a000bca:	f000 fb45 	bl	1a001258 <proyecto_startMotor>
}
1a000bce:	bd10      	pop	{r4, pc}

1a000bd0 <enseq_main_region_Feeding_default>:
{
1a000bd0:	b510      	push	{r4, lr}
1a000bd2:	4604      	mov	r4, r0
	enact_main_region_Feeding(handle);
1a000bd4:	f7ff ffee 	bl	1a000bb4 <enact_main_region_Feeding>
	handle->stateConfVector[0] = Proyecto_main_region_Feeding;
1a000bd8:	2302      	movs	r3, #2
1a000bda:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a000bdc:	2300      	movs	r3, #0
1a000bde:	64e3      	str	r3, [r4, #76]	; 0x4c
}
1a000be0:	bd10      	pop	{r4, pc}

1a000be2 <enact_main_region_Paused>:
{
1a000be2:	b510      	push	{r4, lr}
1a000be4:	4604      	mov	r4, r0
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_main_region_Paused_tev0_raised) , 500, bool_false);
1a000be6:	2300      	movs	r3, #0
1a000be8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a000bec:	f100 0139 	add.w	r1, r0, #57	; 0x39
1a000bf0:	f000 fb62 	bl	1a0012b8 <proyecto_set_timer>
	proyecto_opPause(handle);
1a000bf4:	4620      	mov	r0, r4
1a000bf6:	f000 fb4e 	bl	1a001296 <proyecto_opPause>
}
1a000bfa:	bd10      	pop	{r4, pc}

1a000bfc <enseq_main_region_Paused_default>:
{
1a000bfc:	b510      	push	{r4, lr}
1a000bfe:	4604      	mov	r4, r0
	enact_main_region_Paused(handle);
1a000c00:	f7ff ffef 	bl	1a000be2 <enact_main_region_Paused>
	handle->stateConfVector[0] = Proyecto_main_region_Paused;
1a000c04:	2304      	movs	r3, #4
1a000c06:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a000c08:	2300      	movs	r3, #0
1a000c0a:	64e3      	str	r3, [r4, #76]	; 0x4c
}
1a000c0c:	bd10      	pop	{r4, pc}

1a000c0e <main_region_Idle_react>:
{
1a000c0e:	b510      	push	{r4, lr}
1a000c10:	4604      	mov	r4, r0
	if ((transitioned_after) < (0))
1a000c12:	1e08      	subs	r0, r1, #0
1a000c14:	db00      	blt.n	1a000c18 <main_region_Idle_react+0xa>
}
1a000c16:	bd10      	pop	{r4, pc}
		if (handle->iface.evFeed_raised == bool_true)
1a000c18:	7923      	ldrb	r3, [r4, #4]
1a000c1a:	b993      	cbnz	r3, 1a000c42 <main_region_Idle_react+0x34>
			if (handle->iface.evFeedRst_raised == bool_true)
1a000c1c:	7963      	ldrb	r3, [r4, #5]
1a000c1e:	b9c3      	cbnz	r3, 1a000c52 <main_region_Idle_react+0x44>
				if (handle->internal.siFeed_raised == bool_true)
1a000c20:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
1a000c24:	b9eb      	cbnz	r3, 1a000c62 <main_region_Idle_react+0x54>
					if (handle->iface.evPause_raised == bool_true)
1a000c26:	7a23      	ldrb	r3, [r4, #8]
1a000c28:	2b00      	cmp	r3, #0
1a000c2a:	d0f4      	beq.n	1a000c16 <main_region_Idle_react+0x8>
						exseq_main_region_Idle(handle);
1a000c2c:	4620      	mov	r0, r4
1a000c2e:	f7ff fb99 	bl	1a000364 <exseq_main_region_Idle>
						handle->iface.viPaused = bool_true;
1a000c32:	2301      	movs	r3, #1
1a000c34:	f884 3020 	strb.w	r3, [r4, #32]
						enseq_main_region_Paused_default(handle);
1a000c38:	4620      	mov	r0, r4
1a000c3a:	f7ff ffdf 	bl	1a000bfc <enseq_main_region_Paused_default>
						transitioned_after = 0;
1a000c3e:	2000      	movs	r0, #0
1a000c40:	e7e9      	b.n	1a000c16 <main_region_Idle_react+0x8>
			exseq_main_region_Idle(handle);
1a000c42:	4620      	mov	r0, r4
1a000c44:	f7ff fb8e 	bl	1a000364 <exseq_main_region_Idle>
			enseq_main_region_Feeding_default(handle);
1a000c48:	4620      	mov	r0, r4
1a000c4a:	f7ff ffc1 	bl	1a000bd0 <enseq_main_region_Feeding_default>
			transitioned_after = 0;
1a000c4e:	2000      	movs	r0, #0
1a000c50:	e7e1      	b.n	1a000c16 <main_region_Idle_react+0x8>
				exseq_main_region_Idle(handle);
1a000c52:	4620      	mov	r0, r4
1a000c54:	f7ff fb86 	bl	1a000364 <exseq_main_region_Idle>
				enseq_main_region_Feeding_default(handle);
1a000c58:	4620      	mov	r0, r4
1a000c5a:	f7ff ffb9 	bl	1a000bd0 <enseq_main_region_Feeding_default>
				transitioned_after = 0;
1a000c5e:	2000      	movs	r0, #0
1a000c60:	e7d9      	b.n	1a000c16 <main_region_Idle_react+0x8>
					exseq_main_region_Idle(handle);
1a000c62:	4620      	mov	r0, r4
1a000c64:	f7ff fb7e 	bl	1a000364 <exseq_main_region_Idle>
					enseq_main_region_Feeding_default(handle);
1a000c68:	4620      	mov	r0, r4
1a000c6a:	f7ff ffb1 	bl	1a000bd0 <enseq_main_region_Feeding_default>
					transitioned_after = 0;
1a000c6e:	2000      	movs	r0, #0
1a000c70:	e7d1      	b.n	1a000c16 <main_region_Idle_react+0x8>

1a000c72 <enact_main_region_No_Food>:
{
1a000c72:	b510      	push	{r4, lr}
1a000c74:	4604      	mov	r4, r0
	proyecto_stopMotor(handle);
1a000c76:	f000 fafd 	bl	1a001274 <proyecto_stopMotor>
	proyecto_opNotify(handle, PROYECTO_PROYECTOIFACE_NO_FOOD);
1a000c7a:	2101      	movs	r1, #1
1a000c7c:	4620      	mov	r0, r4
1a000c7e:	f000 fb07 	bl	1a001290 <proyecto_opNotify>
}
1a000c82:	bd10      	pop	{r4, pc}

1a000c84 <enseq_main_region_No_Food_default>:
{
1a000c84:	b510      	push	{r4, lr}
1a000c86:	4604      	mov	r4, r0
	enact_main_region_No_Food(handle);
1a000c88:	f7ff fff3 	bl	1a000c72 <enact_main_region_No_Food>
	handle->stateConfVector[0] = Proyecto_main_region_No_Food;
1a000c8c:	2303      	movs	r3, #3
1a000c8e:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a000c90:	2300      	movs	r3, #0
1a000c92:	64e3      	str	r3, [r4, #76]	; 0x4c
}
1a000c94:	bd10      	pop	{r4, pc}

1a000c96 <main_region_Feeding_react>:
{
1a000c96:	b510      	push	{r4, lr}
1a000c98:	4604      	mov	r4, r0
	if ((transitioned_after) < (0))
1a000c9a:	1e08      	subs	r0, r1, #0
1a000c9c:	db00      	blt.n	1a000ca0 <main_region_Feeding_react+0xa>
}
1a000c9e:	bd10      	pop	{r4, pc}
		if (((handle->timeEvents.proyecto_main_region_Feeding_tev0_raised) == bool_true) && (((handle->iface.viPaused) == (bool_false)) == bool_true))
1a000ca0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
1a000ca4:	b113      	cbz	r3, 1a000cac <main_region_Feeding_react+0x16>
1a000ca6:	f894 3020 	ldrb.w	r3, [r4, #32]
1a000caa:	b193      	cbz	r3, 1a000cd2 <main_region_Feeding_react+0x3c>
			if (handle->iface.evNoFood_raised == bool_true)
1a000cac:	79a3      	ldrb	r3, [r4, #6]
1a000cae:	b9c3      	cbnz	r3, 1a000ce2 <main_region_Feeding_react+0x4c>
				if (handle->iface.evFeed_raised == bool_true)
1a000cb0:	7923      	ldrb	r3, [r4, #4]
1a000cb2:	b9f3      	cbnz	r3, 1a000cf2 <main_region_Feeding_react+0x5c>
					if (((handle->iface.evIdle_raised) == bool_true) && (((handle->iface.viPaused) == (bool_true)) == bool_true))
1a000cb4:	7aa3      	ldrb	r3, [r4, #10]
1a000cb6:	b113      	cbz	r3, 1a000cbe <main_region_Feeding_react+0x28>
1a000cb8:	f894 2020 	ldrb.w	r2, [r4, #32]
1a000cbc:	bb0a      	cbnz	r2, 1a000d02 <main_region_Feeding_react+0x6c>
						if (handle->iface.evIdle_raised == bool_true)
1a000cbe:	2b00      	cmp	r3, #0
1a000cc0:	d0ed      	beq.n	1a000c9e <main_region_Feeding_react+0x8>
							exseq_main_region_Feeding(handle);
1a000cc2:	4620      	mov	r0, r4
1a000cc4:	f7ff fd80 	bl	1a0007c8 <exseq_main_region_Feeding>
							enseq_main_region_Idle_default(handle);
1a000cc8:	4620      	mov	r0, r4
1a000cca:	f7ff fcb7 	bl	1a00063c <enseq_main_region_Idle_default>
							transitioned_after = 0;
1a000cce:	2000      	movs	r0, #0
1a000cd0:	e7e5      	b.n	1a000c9e <main_region_Feeding_react+0x8>
			exseq_main_region_Feeding(handle);
1a000cd2:	4620      	mov	r0, r4
1a000cd4:	f7ff fd78 	bl	1a0007c8 <exseq_main_region_Feeding>
			enseq_main_region_Idle_default(handle);
1a000cd8:	4620      	mov	r0, r4
1a000cda:	f7ff fcaf 	bl	1a00063c <enseq_main_region_Idle_default>
			transitioned_after = 0;
1a000cde:	2000      	movs	r0, #0
1a000ce0:	e7dd      	b.n	1a000c9e <main_region_Feeding_react+0x8>
				exseq_main_region_Feeding(handle);
1a000ce2:	4620      	mov	r0, r4
1a000ce4:	f7ff fd70 	bl	1a0007c8 <exseq_main_region_Feeding>
				enseq_main_region_No_Food_default(handle);
1a000ce8:	4620      	mov	r0, r4
1a000cea:	f7ff ffcb 	bl	1a000c84 <enseq_main_region_No_Food_default>
				transitioned_after = 0;
1a000cee:	2000      	movs	r0, #0
1a000cf0:	e7d5      	b.n	1a000c9e <main_region_Feeding_react+0x8>
					exseq_main_region_Feeding(handle);
1a000cf2:	4620      	mov	r0, r4
1a000cf4:	f7ff fd68 	bl	1a0007c8 <exseq_main_region_Feeding>
					enseq_main_region_Feeding_default(handle);
1a000cf8:	4620      	mov	r0, r4
1a000cfa:	f7ff ff69 	bl	1a000bd0 <enseq_main_region_Feeding_default>
					transitioned_after = 0;
1a000cfe:	2000      	movs	r0, #0
1a000d00:	e7cd      	b.n	1a000c9e <main_region_Feeding_react+0x8>
						exseq_main_region_Feeding(handle);
1a000d02:	4620      	mov	r0, r4
1a000d04:	f7ff fd60 	bl	1a0007c8 <exseq_main_region_Feeding>
						proyecto_stopMotor(handle);
1a000d08:	4620      	mov	r0, r4
1a000d0a:	f000 fab3 	bl	1a001274 <proyecto_stopMotor>
						enseq_main_region_Paused_default(handle);
1a000d0e:	4620      	mov	r0, r4
1a000d10:	f7ff ff74 	bl	1a000bfc <enseq_main_region_Paused_default>
						transitioned_after = 0;
1a000d14:	2000      	movs	r0, #0
1a000d16:	e7c2      	b.n	1a000c9e <main_region_Feeding_react+0x8>

1a000d18 <main_region_No_Food_react>:
{
1a000d18:	b510      	push	{r4, lr}
1a000d1a:	4604      	mov	r4, r0
	if ((transitioned_after) < (0))
1a000d1c:	1e08      	subs	r0, r1, #0
1a000d1e:	db00      	blt.n	1a000d22 <main_region_No_Food_react+0xa>
}
1a000d20:	bd10      	pop	{r4, pc}
		if (handle->iface.evFeed_raised == bool_true)
1a000d22:	7923      	ldrb	r3, [r4, #4]
1a000d24:	b973      	cbnz	r3, 1a000d44 <main_region_No_Food_react+0x2c>
			if (handle->iface.evFeedRst_raised == bool_true)
1a000d26:	7963      	ldrb	r3, [r4, #5]
1a000d28:	2b00      	cmp	r3, #0
1a000d2a:	d0f9      	beq.n	1a000d20 <main_region_No_Food_react+0x8>
				exseq_main_region_No_Food(handle);
1a000d2c:	4620      	mov	r0, r4
1a000d2e:	f7ff fb1d 	bl	1a00036c <exseq_main_region_No_Food>
				proyecto_opNotify(handle, PROYECTO_PROYECTOIFACE_OK_FOOD);
1a000d32:	2100      	movs	r1, #0
1a000d34:	4620      	mov	r0, r4
1a000d36:	f000 faab 	bl	1a001290 <proyecto_opNotify>
				enseq_main_region_Idle_default(handle);
1a000d3a:	4620      	mov	r0, r4
1a000d3c:	f7ff fc7e 	bl	1a00063c <enseq_main_region_Idle_default>
				transitioned_after = 0;
1a000d40:	2000      	movs	r0, #0
1a000d42:	e7ed      	b.n	1a000d20 <main_region_No_Food_react+0x8>
			exseq_main_region_No_Food(handle);
1a000d44:	4620      	mov	r0, r4
1a000d46:	f7ff fb11 	bl	1a00036c <exseq_main_region_No_Food>
			proyecto_opNotify(handle, PROYECTO_PROYECTOIFACE_OK_FOOD);
1a000d4a:	2100      	movs	r1, #0
1a000d4c:	4620      	mov	r0, r4
1a000d4e:	f000 fa9f 	bl	1a001290 <proyecto_opNotify>
			enseq_main_region_Idle_default(handle);
1a000d52:	4620      	mov	r0, r4
1a000d54:	f7ff fc72 	bl	1a00063c <enseq_main_region_Idle_default>
			transitioned_after = 0;
1a000d58:	2000      	movs	r0, #0
1a000d5a:	e7e1      	b.n	1a000d20 <main_region_No_Food_react+0x8>

1a000d5c <main_region_Paused_react>:
{
1a000d5c:	b538      	push	{r3, r4, r5, lr}
1a000d5e:	4604      	mov	r4, r0
	if ((transitioned_after) < (0))
1a000d60:	1e08      	subs	r0, r1, #0
1a000d62:	db00      	blt.n	1a000d66 <main_region_Paused_react+0xa>
}
1a000d64:	bd38      	pop	{r3, r4, r5, pc}
		if (handle->iface.evUnpause_raised == bool_true)
1a000d66:	7a63      	ldrb	r3, [r4, #9]
1a000d68:	b983      	cbnz	r3, 1a000d8c <main_region_Paused_react+0x30>
			if (handle->timeEvents.proyecto_main_region_Paused_tev0_raised == bool_true)
1a000d6a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
1a000d6e:	b9db      	cbnz	r3, 1a000da8 <main_region_Paused_react+0x4c>
				if (handle->iface.evFeed_raised == bool_true)
1a000d70:	7923      	ldrb	r3, [r4, #4]
1a000d72:	2b00      	cmp	r3, #0
1a000d74:	d0f6      	beq.n	1a000d64 <main_region_Paused_react+0x8>
					exseq_main_region_Paused(handle);
1a000d76:	4620      	mov	r0, r4
1a000d78:	f7ff fd33 	bl	1a0007e2 <exseq_main_region_Paused>
					proyecto_opUnpause(handle);
1a000d7c:	4620      	mov	r0, r4
1a000d7e:	f000 fa95 	bl	1a0012ac <proyecto_opUnpause>
					enseq_main_region_Feeding_default(handle);
1a000d82:	4620      	mov	r0, r4
1a000d84:	f7ff ff24 	bl	1a000bd0 <enseq_main_region_Feeding_default>
					transitioned_after = 0;
1a000d88:	2000      	movs	r0, #0
1a000d8a:	e7eb      	b.n	1a000d64 <main_region_Paused_react+0x8>
			exseq_main_region_Paused(handle);
1a000d8c:	4620      	mov	r0, r4
1a000d8e:	f7ff fd28 	bl	1a0007e2 <exseq_main_region_Paused>
			proyecto_opUnpause(handle);
1a000d92:	4620      	mov	r0, r4
1a000d94:	f000 fa8a 	bl	1a0012ac <proyecto_opUnpause>
			handle->iface.viPaused = bool_false;
1a000d98:	2500      	movs	r5, #0
1a000d9a:	f884 5020 	strb.w	r5, [r4, #32]
			enseq_main_region_Idle_default(handle);
1a000d9e:	4620      	mov	r0, r4
1a000da0:	f7ff fc4c 	bl	1a00063c <enseq_main_region_Idle_default>
			transitioned_after = 0;
1a000da4:	4628      	mov	r0, r5
1a000da6:	e7dd      	b.n	1a000d64 <main_region_Paused_react+0x8>
				exseq_main_region_Paused(handle);
1a000da8:	4620      	mov	r0, r4
1a000daa:	f7ff fd1a 	bl	1a0007e2 <exseq_main_region_Paused>
				enseq_main_region_Paused_default(handle);
1a000dae:	4620      	mov	r0, r4
1a000db0:	f7ff ff24 	bl	1a000bfc <enseq_main_region_Paused_default>
				transitioned_after = 0;
1a000db4:	2000      	movs	r0, #0
1a000db6:	e7d5      	b.n	1a000d64 <main_region_Paused_react+0x8>

1a000db8 <enact_conf_Parameter_Set>:
{
1a000db8:	b510      	push	{r4, lr}
1a000dba:	4604      	mov	r4, r0
	proyecto_set_timer(handle, (sc_eventid) &(handle->timeEvents.proyecto_conf_Parameter_Set_tev0_raised) , 1, bool_false);
1a000dbc:	2300      	movs	r3, #0
1a000dbe:	2201      	movs	r2, #1
1a000dc0:	f100 0147 	add.w	r1, r0, #71	; 0x47
1a000dc4:	f000 fa78 	bl	1a0012b8 <proyecto_set_timer>
	handle->iface.viIntervalSec = proyecto_opConfigureSec(handle, handle->iface.viIntervalSec);
1a000dc8:	6961      	ldr	r1, [r4, #20]
1a000dca:	4620      	mov	r0, r4
1a000dcc:	f000 fa61 	bl	1a001292 <proyecto_opConfigureSec>
1a000dd0:	6160      	str	r0, [r4, #20]
}
1a000dd2:	bd10      	pop	{r4, pc}

1a000dd4 <enseq_conf_Parameter_Set_default>:
{
1a000dd4:	b510      	push	{r4, lr}
1a000dd6:	4604      	mov	r4, r0
	enact_conf_Parameter_Set(handle);
1a000dd8:	f7ff ffee 	bl	1a000db8 <enact_conf_Parameter_Set>
	handle->stateConfVector[2] = Proyecto_conf_Parameter_Set;
1a000ddc:	230b      	movs	r3, #11
1a000dde:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a000de0:	2302      	movs	r3, #2
1a000de2:	64e3      	str	r3, [r4, #76]	; 0x4c
}
1a000de4:	bd10      	pop	{r4, pc}

1a000de6 <conf_Idle_react>:
{
1a000de6:	b538      	push	{r3, r4, r5, lr}
1a000de8:	4605      	mov	r5, r0
1a000dea:	460c      	mov	r4, r1
	if ((transitioned_after) < (2))
1a000dec:	2901      	cmp	r1, #1
1a000dee:	dd03      	ble.n	1a000df8 <conf_Idle_react+0x12>
 			sc_integer transitioned_after = transitioned_before;
1a000df0:	4608      	mov	r0, r1
	if ((transitioned_after) == (transitioned_before))
1a000df2:	42a0      	cmp	r0, r4
1a000df4:	d00b      	beq.n	1a000e0e <conf_Idle_react+0x28>
}
1a000df6:	bd38      	pop	{r3, r4, r5, pc}
		if (handle->iface.evConfigure_raised == bool_true)
1a000df8:	79c3      	ldrb	r3, [r0, #7]
1a000dfa:	b90b      	cbnz	r3, 1a000e00 <conf_Idle_react+0x1a>
 			sc_integer transitioned_after = transitioned_before;
1a000dfc:	4608      	mov	r0, r1
1a000dfe:	e7f8      	b.n	1a000df2 <conf_Idle_react+0xc>
			exseq_conf_Idle(handle);
1a000e00:	f7ff fab8 	bl	1a000374 <exseq_conf_Idle>
			enseq_conf_Parameter_Set_default(handle);
1a000e04:	4628      	mov	r0, r5
1a000e06:	f7ff ffe5 	bl	1a000dd4 <enseq_conf_Parameter_Set_default>
			transitioned_after = 2;
1a000e0a:	2002      	movs	r0, #2
1a000e0c:	e7f1      	b.n	1a000df2 <conf_Idle_react+0xc>
		transitioned_after = react(handle, transitioned_before);
1a000e0e:	4621      	mov	r1, r4
1a000e10:	4628      	mov	r0, r5
1a000e12:	f7ff fabc 	bl	1a00038e <react>
	} return transitioned_after;
1a000e16:	e7ee      	b.n	1a000df6 <conf_Idle_react+0x10>

1a000e18 <micro_step>:
{
1a000e18:	b510      	push	{r4, lr}
1a000e1a:	4604      	mov	r4, r0
	handle->stateConfVectorPosition = 0;
1a000e1c:	2300      	movs	r3, #0
1a000e1e:	64c3      	str	r3, [r0, #76]	; 0x4c
	switch(handle->stateConfVector[ 0 ])
1a000e20:	7803      	ldrb	r3, [r0, #0]
1a000e22:	3b01      	subs	r3, #1
1a000e24:	2b03      	cmp	r3, #3
1a000e26:	d81d      	bhi.n	1a000e64 <micro_step+0x4c>
1a000e28:	e8df f003 	tbb	[pc, r3]
1a000e2c:	17120d02 	.word	0x17120d02
			transitioned = main_region_Idle_react(handle, transitioned);
1a000e30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000e34:	f7ff feeb 	bl	1a000c0e <main_region_Idle_react>
	if ((handle->stateConfVectorPosition) < (1))
1a000e38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
1a000e3a:	2b00      	cmp	r3, #0
1a000e3c:	dd15      	ble.n	1a000e6a <micro_step+0x52>
	} if ((handle->stateConfVectorPosition) < (2))
1a000e3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
1a000e40:	2b01      	cmp	r3, #1
1a000e42:	dd34      	ble.n	1a000eae <micro_step+0x96>
}
1a000e44:	bd10      	pop	{r4, pc}
			transitioned = main_region_Feeding_react(handle, transitioned);
1a000e46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000e4a:	f7ff ff24 	bl	1a000c96 <main_region_Feeding_react>
			break;
1a000e4e:	e7f3      	b.n	1a000e38 <micro_step+0x20>
			transitioned = main_region_No_Food_react(handle, transitioned);
1a000e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000e54:	f7ff ff60 	bl	1a000d18 <main_region_No_Food_react>
			break;
1a000e58:	e7ee      	b.n	1a000e38 <micro_step+0x20>
			transitioned = main_region_Paused_react(handle, transitioned);
1a000e5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000e5e:	f7ff ff7d 	bl	1a000d5c <main_region_Paused_react>
			break;
1a000e62:	e7e9      	b.n	1a000e38 <micro_step+0x20>
 			sc_integer transitioned = -1;
1a000e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e68:	e7e6      	b.n	1a000e38 <micro_step+0x20>
		switch(handle->stateConfVector[ 1 ])
1a000e6a:	7863      	ldrb	r3, [r4, #1]
1a000e6c:	3b05      	subs	r3, #5
1a000e6e:	2b04      	cmp	r3, #4
1a000e70:	d8e5      	bhi.n	1a000e3e <micro_step+0x26>
1a000e72:	e8df f003 	tbb	[pc, r3]
1a000e76:	0803      	.short	0x0803
1a000e78:	120d      	.short	0x120d
1a000e7a:	17          	.byte	0x17
1a000e7b:	00          	.byte	0x00
				transitioned = clk_Seconds_react(handle, transitioned);
1a000e7c:	4601      	mov	r1, r0
1a000e7e:	4620      	mov	r0, r4
1a000e80:	f7ff fccf 	bl	1a000822 <clk_Seconds_react>
				break;
1a000e84:	e7db      	b.n	1a000e3e <micro_step+0x26>
				transitioned = clk_Minutes_react(handle, transitioned);
1a000e86:	4601      	mov	r1, r0
1a000e88:	4620      	mov	r0, r4
1a000e8a:	f7ff fd2b 	bl	1a0008e4 <clk_Minutes_react>
				break;
1a000e8e:	e7d6      	b.n	1a000e3e <micro_step+0x26>
				transitioned = clk_Init_react(handle, transitioned);
1a000e90:	4601      	mov	r1, r0
1a000e92:	4620      	mov	r0, r4
1a000e94:	f7ff fd81 	bl	1a00099a <clk_Init_react>
				break;
1a000e98:	e7d1      	b.n	1a000e3e <micro_step+0x26>
				transitioned = clk_Hours_react(handle, transitioned);
1a000e9a:	4601      	mov	r1, r0
1a000e9c:	4620      	mov	r0, r4
1a000e9e:	f7ff fda6 	bl	1a0009ee <clk_Hours_react>
				break;
1a000ea2:	e7cc      	b.n	1a000e3e <micro_step+0x26>
				transitioned = clk_Days_react(handle, transitioned);
1a000ea4:	4601      	mov	r1, r0
1a000ea6:	4620      	mov	r0, r4
1a000ea8:	f7ff fe0b 	bl	1a000ac2 <clk_Days_react>
				break;
1a000eac:	e7c7      	b.n	1a000e3e <micro_step+0x26>
		switch(handle->stateConfVector[ 2 ])
1a000eae:	78a3      	ldrb	r3, [r4, #2]
1a000eb0:	2b0a      	cmp	r3, #10
1a000eb2:	d006      	beq.n	1a000ec2 <micro_step+0xaa>
1a000eb4:	2b0b      	cmp	r3, #11
1a000eb6:	d1c5      	bne.n	1a000e44 <micro_step+0x2c>
				transitioned = conf_Parameter_Set_react(handle, transitioned);
1a000eb8:	4601      	mov	r1, r0
1a000eba:	4620      	mov	r0, r4
1a000ebc:	f7ff fe60 	bl	1a000b80 <conf_Parameter_Set_react>
}
1a000ec0:	e7c0      	b.n	1a000e44 <micro_step+0x2c>
				transitioned = conf_Idle_react(handle, transitioned);
1a000ec2:	4601      	mov	r1, r0
1a000ec4:	4620      	mov	r0, r4
1a000ec6:	f7ff ff8e 	bl	1a000de6 <conf_Idle_react>
				break;
1a000eca:	e7bb      	b.n	1a000e44 <micro_step+0x2c>

1a000ecc <run_cycle>:
	if (handle->isExecuting == bool_true)
1a000ecc:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
1a000ed0:	b103      	cbz	r3, 1a000ed4 <run_cycle+0x8>
1a000ed2:	4770      	bx	lr
{
1a000ed4:	b510      	push	{r4, lr}
1a000ed6:	4604      	mov	r4, r0
	handle->isExecuting = bool_true;
1a000ed8:	2301      	movs	r3, #1
1a000eda:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
	proyecto_dispatch_next_event(handle);
1a000ede:	f7ff fb3b 	bl	1a000558 <proyecto_dispatch_next_event>
		micro_step(handle);
1a000ee2:	4620      	mov	r0, r4
1a000ee4:	f7ff ff98 	bl	1a000e18 <micro_step>
		clear_in_events(handle);
1a000ee8:	4620      	mov	r0, r4
1a000eea:	f7ff fa09 	bl	1a000300 <clear_in_events>
		clear_internal_events(handle);
1a000eee:	4620      	mov	r0, r4
1a000ef0:	f7ff fa2f 	bl	1a000352 <clear_internal_events>
		proyecto_dispatch_next_event(handle);
1a000ef4:	4620      	mov	r0, r4
1a000ef6:	f7ff fb2f 	bl	1a000558 <proyecto_dispatch_next_event>
	} while ((((((((((((((((((((((((handle->iface.evFeed_raised == bool_true) || (handle->iface.evFeedRst_raised == bool_true)) || (handle->iface.evNoFood_raised == bool_true)) || (handle->iface.evConfigure_raised == bool_true)) || (handle->iface.evPause_raised == bool_true)) || (handle->iface.evUnpause_raised == bool_true)) || (handle->iface.evIdle_raised == bool_true)) || (handle->internal.siFeed_raised == bool_true)) || (handle->timeEvents.proyecto_main_region_Feeding_tev0_raised == bool_true)) || (handle->timeEvents.proyecto_main_region_Paused_tev0_raised == bool_true)) || (handle->timeEvents.proyecto_clk_Seconds_tev0_raised == bool_true)) || (handle->timeEvents.proyecto_clk_Seconds_tev1_raised == bool_true)) || (handle->timeEvents.proyecto_clk_Seconds_tev2_raised == bool_true)) || (handle->timeEvents.proyecto_clk_Minutes_tev0_raised == bool_true)) || (handle->timeEvents.proyecto_clk_Minutes_tev1_raised == bool_true)) || (handle->timeEvents.proyecto_clk_Minutes_tev2_raised == bool_true)) || (handle->timeEvents.proyecto_clk_Init_tev0_raised == bool_true)) || (handle->timeEvents.proyecto_clk_Hours_tev0_raised == bool_true)) || (handle->timeEvents.proyecto_clk_Hours_tev1_raised == bool_true)) || (handle->timeEvents.proyecto_clk_Hours_tev2_raised == bool_true)) || (handle->timeEvents.proyecto_clk_Days_tev0_raised == bool_true)) || (handle->timeEvents.proyecto_clk_Days_tev1_raised == bool_true)) || (handle->timeEvents.proyecto_clk_Days_tev2_raised == bool_true)) || (handle->timeEvents.proyecto_conf_Parameter_Set_tev0_raised == bool_true));
1a000efa:	7923      	ldrb	r3, [r4, #4]
1a000efc:	2b00      	cmp	r3, #0
1a000efe:	d1f0      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f00:	7963      	ldrb	r3, [r4, #5]
1a000f02:	2b00      	cmp	r3, #0
1a000f04:	d1ed      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f06:	79a3      	ldrb	r3, [r4, #6]
1a000f08:	2b00      	cmp	r3, #0
1a000f0a:	d1ea      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f0c:	79e3      	ldrb	r3, [r4, #7]
1a000f0e:	2b00      	cmp	r3, #0
1a000f10:	d1e7      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f12:	7a23      	ldrb	r3, [r4, #8]
1a000f14:	2b00      	cmp	r3, #0
1a000f16:	d1e4      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f18:	7a63      	ldrb	r3, [r4, #9]
1a000f1a:	2b00      	cmp	r3, #0
1a000f1c:	d1e1      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f1e:	7aa3      	ldrb	r3, [r4, #10]
1a000f20:	2b00      	cmp	r3, #0
1a000f22:	d1de      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f24:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
1a000f28:	2b00      	cmp	r3, #0
1a000f2a:	d1da      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f2c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
1a000f30:	2b00      	cmp	r3, #0
1a000f32:	d1d6      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f34:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
1a000f38:	2b00      	cmp	r3, #0
1a000f3a:	d1d2      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f3c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
1a000f40:	2b00      	cmp	r3, #0
1a000f42:	d1ce      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f44:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
1a000f48:	2b00      	cmp	r3, #0
1a000f4a:	d1ca      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f4c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
1a000f50:	2b00      	cmp	r3, #0
1a000f52:	d1c6      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f54:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
1a000f58:	2b00      	cmp	r3, #0
1a000f5a:	d1c2      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f5c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
1a000f60:	2b00      	cmp	r3, #0
1a000f62:	d1be      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f64:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
1a000f68:	2b00      	cmp	r3, #0
1a000f6a:	d1ba      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f6c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
1a000f70:	2b00      	cmp	r3, #0
1a000f72:	d1b6      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f74:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
1a000f78:	2b00      	cmp	r3, #0
1a000f7a:	d1b2      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f7c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
1a000f80:	2b00      	cmp	r3, #0
1a000f82:	d1ae      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f84:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a000f88:	2b00      	cmp	r3, #0
1a000f8a:	d1aa      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f8c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000f90:	2b00      	cmp	r3, #0
1a000f92:	d1a6      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f94:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000f98:	2b00      	cmp	r3, #0
1a000f9a:	d1a2      	bne.n	1a000ee2 <run_cycle+0x16>
1a000f9c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
1a000fa0:	2b00      	cmp	r3, #0
1a000fa2:	d19e      	bne.n	1a000ee2 <run_cycle+0x16>
1a000fa4:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
1a000fa8:	2b00      	cmp	r3, #0
1a000faa:	d19a      	bne.n	1a000ee2 <run_cycle+0x16>
	handle->isExecuting = bool_false;
1a000fac:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
1a000fb0:	bd10      	pop	{r4, pc}

1a000fb2 <proyecto_init>:
{
1a000fb2:	b510      	push	{r4, lr}
1a000fb4:	4604      	mov	r4, r0
	for (i = 0; i < PROYECTO_MAX_ORTHOGONAL_STATES; ++i)
1a000fb6:	2300      	movs	r3, #0
1a000fb8:	2b02      	cmp	r3, #2
1a000fba:	dc03      	bgt.n	1a000fc4 <proyecto_init+0x12>
		handle->stateConfVector[i] = Proyecto_last_state;
1a000fbc:	2200      	movs	r2, #0
1a000fbe:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < PROYECTO_MAX_ORTHOGONAL_STATES; ++i)
1a000fc0:	3301      	adds	r3, #1
1a000fc2:	e7f9      	b.n	1a000fb8 <proyecto_init+0x6>
	clear_in_events(handle);
1a000fc4:	4620      	mov	r0, r4
1a000fc6:	f7ff f99b 	bl	1a000300 <clear_in_events>
	clear_internal_events(handle);
1a000fca:	4620      	mov	r0, r4
1a000fcc:	f7ff f9c1 	bl	1a000352 <clear_internal_events>
	handle->iface.viIntervalHs = 0;
1a000fd0:	2300      	movs	r3, #0
1a000fd2:	60e3      	str	r3, [r4, #12]
	handle->iface.viIntervalMin = 0;
1a000fd4:	6123      	str	r3, [r4, #16]
	handle->iface.viIntervalSec = 6;
1a000fd6:	2206      	movs	r2, #6
1a000fd8:	6162      	str	r2, [r4, #20]
	handle->iface.viAmount = 200;
1a000fda:	22c8      	movs	r2, #200	; 0xc8
1a000fdc:	61a2      	str	r2, [r4, #24]
	handle->iface.viT_ON = (((handle->iface.viAmount * 1000)) / PROYECTO_PROYECTOIFACE_FLOW);
1a000fde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000fe2:	61e2      	str	r2, [r4, #28]
	handle->iface.viPaused = bool_false;
1a000fe4:	f884 3020 	strb.w	r3, [r4, #32]
	handle->internal.viSec = 0;
1a000fe8:	6263      	str	r3, [r4, #36]	; 0x24
	handle->internal.viMin = 0;
1a000fea:	62a3      	str	r3, [r4, #40]	; 0x28
	handle->internal.viHs = 0;
1a000fec:	62e3      	str	r3, [r4, #44]	; 0x2c
	handle->internal.viDD = 0;
1a000fee:	6323      	str	r3, [r4, #48]	; 0x30
	handle->isExecuting = bool_false;
1a000ff0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	proyecto_eventqueue_init(&handle->internal_event_queue, handle->internal_buffer, PROYECTO_INTERNAL_EVENTQUEUE_BUFFERSIZE);
1a000ff4:	2214      	movs	r2, #20
1a000ff6:	f104 0164 	add.w	r1, r4, #100	; 0x64
1a000ffa:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a000ffe:	f7ff f9c8 	bl	1a000392 <proyecto_eventqueue_init>
	proyecto_eventqueue_init(&handle->in_event_queue, handle->in_buffer, PROYECTO_IN_EVENTQUEUE_BUFFERSIZE);
1a001002:	2214      	movs	r2, #20
1a001004:	f104 018c 	add.w	r1, r4, #140	; 0x8c
1a001008:	f104 0078 	add.w	r0, r4, #120	; 0x78
1a00100c:	f7ff f9c1 	bl	1a000392 <proyecto_eventqueue_init>
}
1a001010:	bd10      	pop	{r4, pc}

1a001012 <proyecto_enter>:
	if (handle->isExecuting == bool_true)
1a001012:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
1a001016:	b103      	cbz	r3, 1a00101a <proyecto_enter+0x8>
1a001018:	4770      	bx	lr
{
1a00101a:	b510      	push	{r4, lr}
1a00101c:	4604      	mov	r4, r0
	handle->isExecuting = bool_true;
1a00101e:	2301      	movs	r3, #1
1a001020:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
	enseq_main_region_default(handle);
1a001024:	f7ff fb17 	bl	1a000656 <enseq_main_region_default>
	enseq_clk_default(handle);
1a001028:	4620      	mov	r0, r4
1a00102a:	f7ff fb35 	bl	1a000698 <enseq_clk_default>
	enseq_conf_default(handle);
1a00102e:	4620      	mov	r0, r4
1a001030:	f7ff f9a9 	bl	1a000386 <enseq_conf_default>
	handle->isExecuting = bool_false;
1a001034:	2300      	movs	r3, #0
1a001036:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
1a00103a:	bd10      	pop	{r4, pc}

1a00103c <proyecto_raise_time_event>:
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
1a00103c:	f100 0338 	add.w	r3, r0, #56	; 0x38
1a001040:	428b      	cmp	r3, r1
1a001042:	dc03      	bgt.n	1a00104c <proyecto_raise_time_event+0x10>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + (unsigned)sizeof(ProyectoTimeEvents))
1a001044:	f100 0348 	add.w	r3, r0, #72	; 0x48
1a001048:	428b      	cmp	r3, r1
1a00104a:	d800      	bhi.n	1a00104e <proyecto_raise_time_event+0x12>
1a00104c:	4770      	bx	lr
{
1a00104e:	b510      	push	{r4, lr}
1a001050:	4604      	mov	r4, r0
		proyecto_add_event_to_queue(&(handle->in_event_queue), proyecto_get_timed_event_name(handle, evid));
1a001052:	f7ff fa8e 	bl	1a000572 <proyecto_get_timed_event_name>
1a001056:	4601      	mov	r1, r0
1a001058:	f104 0078 	add.w	r0, r4, #120	; 0x78
1a00105c:	f7ff f9e1 	bl	1a000422 <proyecto_add_event_to_queue>
		run_cycle(handle);
1a001060:	4620      	mov	r0, r4
1a001062:	f7ff ff33 	bl	1a000ecc <run_cycle>
}
1a001066:	bd10      	pop	{r4, pc}

1a001068 <proyecto_raise_evFeed>:
{
1a001068:	b510      	push	{r4, lr}
1a00106a:	4604      	mov	r4, r0
	proyecto_add_event_to_queue(&(handle->in_event_queue), Proyecto_evFeed);
1a00106c:	2101      	movs	r1, #1
1a00106e:	3078      	adds	r0, #120	; 0x78
1a001070:	f7ff f9d7 	bl	1a000422 <proyecto_add_event_to_queue>
	run_cycle(handle);
1a001074:	4620      	mov	r0, r4
1a001076:	f7ff ff29 	bl	1a000ecc <run_cycle>
}
1a00107a:	bd10      	pop	{r4, pc}

1a00107c <proyecto_raise_evFeedRst>:
{
1a00107c:	b510      	push	{r4, lr}
1a00107e:	4604      	mov	r4, r0
	proyecto_add_event_to_queue(&(handle->in_event_queue), Proyecto_evFeedRst);
1a001080:	2102      	movs	r1, #2
1a001082:	3078      	adds	r0, #120	; 0x78
1a001084:	f7ff f9cd 	bl	1a000422 <proyecto_add_event_to_queue>
	run_cycle(handle);
1a001088:	4620      	mov	r0, r4
1a00108a:	f7ff ff1f 	bl	1a000ecc <run_cycle>
}
1a00108e:	bd10      	pop	{r4, pc}

1a001090 <proyecto_raise_evPause>:
{
1a001090:	b510      	push	{r4, lr}
1a001092:	4604      	mov	r4, r0
	proyecto_add_event_to_queue(&(handle->in_event_queue), Proyecto_evPause);
1a001094:	2105      	movs	r1, #5
1a001096:	3078      	adds	r0, #120	; 0x78
1a001098:	f7ff f9c3 	bl	1a000422 <proyecto_add_event_to_queue>
	run_cycle(handle);
1a00109c:	4620      	mov	r0, r4
1a00109e:	f7ff ff15 	bl	1a000ecc <run_cycle>
}
1a0010a2:	bd10      	pop	{r4, pc}

1a0010a4 <proyecto_raise_evUnpause>:
{
1a0010a4:	b510      	push	{r4, lr}
1a0010a6:	4604      	mov	r4, r0
	proyecto_add_event_to_queue(&(handle->in_event_queue), Proyecto_evUnpause);
1a0010a8:	2106      	movs	r1, #6
1a0010aa:	3078      	adds	r0, #120	; 0x78
1a0010ac:	f7ff f9b9 	bl	1a000422 <proyecto_add_event_to_queue>
	run_cycle(handle);
1a0010b0:	4620      	mov	r0, r4
1a0010b2:	f7ff ff0b 	bl	1a000ecc <run_cycle>
}
1a0010b6:	bd10      	pop	{r4, pc}

1a0010b8 <proyecto_raise_evIdle>:
{
1a0010b8:	b510      	push	{r4, lr}
1a0010ba:	4604      	mov	r4, r0
	proyecto_add_event_to_queue(&(handle->in_event_queue), Proyecto_evIdle);
1a0010bc:	2107      	movs	r1, #7
1a0010be:	3078      	adds	r0, #120	; 0x78
1a0010c0:	f7ff f9af 	bl	1a000422 <proyecto_add_event_to_queue>
	run_cycle(handle);
1a0010c4:	4620      	mov	r0, r4
1a0010c6:	f7ff ff01 	bl	1a000ecc <run_cycle>
}
1a0010ca:	bd10      	pop	{r4, pc}

1a0010cc <InitTimerTicks>:

#include "../gen/proyecto.h"


void InitTimerTicks(TimerTicks *list, uint32_t len)
{
1a0010cc:	b430      	push	{r4, r5}
	uint32_t i;

	for(i = 0; i < len; i++) {
1a0010ce:	2400      	movs	r4, #0
1a0010d0:	428c      	cmp	r4, r1
1a0010d2:	d20a      	bcs.n	1a0010ea <InitTimerTicks+0x1e>
		list[i].evid = (sc_eventid)0;
1a0010d4:	0125      	lsls	r5, r4, #4
1a0010d6:	1942      	adds	r2, r0, r5
1a0010d8:	2300      	movs	r3, #0
1a0010da:	5143      	str	r3, [r0, r5]
		list[i].time_ms = 0;
1a0010dc:	6053      	str	r3, [r2, #4]
		list[i].count = 0;
1a0010de:	6093      	str	r3, [r2, #8]
		list[i].periodic = false;
1a0010e0:	7313      	strb	r3, [r2, #12]
		list[i].active = false;
1a0010e2:	7353      	strb	r3, [r2, #13]
		list[i].evPending = false;
1a0010e4:	7393      	strb	r3, [r2, #14]
	for(i = 0; i < len; i++) {
1a0010e6:	3401      	adds	r4, #1
1a0010e8:	e7f2      	b.n	1a0010d0 <InitTimerTicks+0x4>
	}
}
1a0010ea:	bc30      	pop	{r4, r5}
1a0010ec:	4770      	bx	lr

1a0010ee <SetNewTimerTick>:


sc_eventid SetNewTimerTick(TimerTicks *list, uint32_t len, sc_eventid evid, sc_uinteger time_ms, sc_boolean periodic)
{
1a0010ee:	b470      	push	{r4, r5, r6}
	uint32_t i;

	sc_eventid ret = (sc_eventid)0;
	for(i = 0; i < len; i++) {
1a0010f0:	2400      	movs	r4, #0
1a0010f2:	428c      	cmp	r4, r1
1a0010f4:	d211      	bcs.n	1a00111a <SetNewTimerTick+0x2c>
		if(!list[i].evid) {
1a0010f6:	0125      	lsls	r5, r4, #4
1a0010f8:	1946      	adds	r6, r0, r5
1a0010fa:	5945      	ldr	r5, [r0, r5]
1a0010fc:	b10d      	cbz	r5, 1a001102 <SetNewTimerTick+0x14>
	for(i = 0; i < len; i++) {
1a0010fe:	3401      	adds	r4, #1
1a001100:	e7f7      	b.n	1a0010f2 <SetNewTimerTick+0x4>
			list[i].time_ms = time_ms;
1a001102:	6073      	str	r3, [r6, #4]
			list[i].count = time_ms;
1a001104:	60b3      	str	r3, [r6, #8]
			list[i].evid = evid;
1a001106:	6032      	str	r2, [r6, #0]
			list[i].periodic = periodic;
1a001108:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00110c:	7333      	strb	r3, [r6, #12]
			list[i].active = true;
1a00110e:	2301      	movs	r3, #1
1a001110:	7373      	strb	r3, [r6, #13]
			list[i].evPending = false;
1a001112:	2300      	movs	r3, #0
1a001114:	73b3      	strb	r3, [r6, #14]
			ret = evid;
1a001116:	4610      	mov	r0, r2
			break;
1a001118:	e000      	b.n	1a00111c <SetNewTimerTick+0x2e>
	sc_eventid ret = (sc_eventid)0;
1a00111a:	2000      	movs	r0, #0
		}
	}
	return ret;
}
1a00111c:	bc70      	pop	{r4, r5, r6}
1a00111e:	4770      	bx	lr

1a001120 <UnsetTimerTick>:
void* UnsetTimerTick(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;
	sc_eventid ret = (sc_eventid)0;

	for(i = 0; i < len; i++) {
1a001120:	2300      	movs	r3, #0
1a001122:	428b      	cmp	r3, r1
1a001124:	d214      	bcs.n	1a001150 <UnsetTimerTick+0x30>
{
1a001126:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a001128:	011c      	lsls	r4, r3, #4
1a00112a:	1905      	adds	r5, r0, r4
1a00112c:	5904      	ldr	r4, [r0, r4]
1a00112e:	4294      	cmp	r4, r2
1a001130:	d004      	beq.n	1a00113c <UnsetTimerTick+0x1c>
	for(i = 0; i < len; i++) {
1a001132:	3301      	adds	r3, #1
1a001134:	428b      	cmp	r3, r1
1a001136:	d3f7      	bcc.n	1a001128 <UnsetTimerTick+0x8>
	sc_eventid ret = (sc_eventid)0;
1a001138:	2000      	movs	r0, #0
			list[i].evPending = false;
			ret = id;
			break;
		}
	}
	return ret;
1a00113a:	e007      	b.n	1a00114c <UnsetTimerTick+0x2c>
			list[i].evid = (sc_eventid)0;
1a00113c:	2300      	movs	r3, #0
1a00113e:	602b      	str	r3, [r5, #0]
			list[i].time_ms = 0;
1a001140:	606b      	str	r3, [r5, #4]
			list[i].count = 0;
1a001142:	60ab      	str	r3, [r5, #8]
			list[i].periodic = false;
1a001144:	732b      	strb	r3, [r5, #12]
			list[i].active = false;
1a001146:	736b      	strb	r3, [r5, #13]
			list[i].evPending = false;
1a001148:	73ab      	strb	r3, [r5, #14]
			ret = id;
1a00114a:	4610      	mov	r0, r2
}
1a00114c:	bc30      	pop	{r4, r5}
1a00114e:	4770      	bx	lr
	sc_eventid ret = (sc_eventid)0;
1a001150:	2000      	movs	r0, #0
}
1a001152:	4770      	bx	lr

1a001154 <IsPendEvent>:

sc_boolean IsPendEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	int i;
	sc_boolean ret = false;
	for(i=0; i < len; i++) {
1a001154:	2300      	movs	r3, #0
1a001156:	428b      	cmp	r3, r1
1a001158:	d211      	bcs.n	1a00117e <IsPendEvent+0x2a>
{
1a00115a:	b430      	push	{r4, r5}
1a00115c:	e002      	b.n	1a001164 <IsPendEvent+0x10>
	for(i=0; i < len; i++) {
1a00115e:	3301      	adds	r3, #1
1a001160:	428b      	cmp	r3, r1
1a001162:	d209      	bcs.n	1a001178 <IsPendEvent+0x24>
		if((list[i].evid == id) && (list[i].evPending == true)) {
1a001164:	011c      	lsls	r4, r3, #4
1a001166:	1905      	adds	r5, r0, r4
1a001168:	5904      	ldr	r4, [r0, r4]
1a00116a:	4294      	cmp	r4, r2
1a00116c:	d1f7      	bne.n	1a00115e <IsPendEvent+0xa>
1a00116e:	7bac      	ldrb	r4, [r5, #14]
1a001170:	2c00      	cmp	r4, #0
1a001172:	d0f4      	beq.n	1a00115e <IsPendEvent+0xa>
			ret = true;
1a001174:	2001      	movs	r0, #1
1a001176:	e000      	b.n	1a00117a <IsPendEvent+0x26>
	sc_boolean ret = false;
1a001178:	2000      	movs	r0, #0
			break;
		}
	}
	return ret;
}
1a00117a:	bc30      	pop	{r4, r5}
1a00117c:	4770      	bx	lr
	sc_boolean ret = false;
1a00117e:	2000      	movs	r0, #0
}
1a001180:	4770      	bx	lr

1a001182 <MarkAsAttEvent>:

void MarkAsAttEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a001182:	2300      	movs	r3, #0
1a001184:	428b      	cmp	r3, r1
1a001186:	d20d      	bcs.n	1a0011a4 <MarkAsAttEvent+0x22>
{
1a001188:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a00118a:	011c      	lsls	r4, r3, #4
1a00118c:	1905      	adds	r5, r0, r4
1a00118e:	5904      	ldr	r4, [r0, r4]
1a001190:	4294      	cmp	r4, r2
1a001192:	d003      	beq.n	1a00119c <MarkAsAttEvent+0x1a>
	for(i = 0; i < len; i++) {
1a001194:	3301      	adds	r3, #1
1a001196:	428b      	cmp	r3, r1
1a001198:	d3f7      	bcc.n	1a00118a <MarkAsAttEvent+0x8>
1a00119a:	e001      	b.n	1a0011a0 <MarkAsAttEvent+0x1e>
			list[i].evPending = false;
1a00119c:	2300      	movs	r3, #0
1a00119e:	73ab      	strb	r3, [r5, #14]
			break;
		}
	}
}
1a0011a0:	bc30      	pop	{r4, r5}
1a0011a2:	4770      	bx	lr
1a0011a4:	4770      	bx	lr

1a0011a6 <UpdateTimers>:

void UpdateTimers(TimerTicks *list, uint32_t len)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a0011a6:	2300      	movs	r3, #0
1a0011a8:	428b      	cmp	r3, r1
1a0011aa:	d21d      	bcs.n	1a0011e8 <UpdateTimers+0x42>
{
1a0011ac:	b410      	push	{r4}
1a0011ae:	e006      	b.n	1a0011be <UpdateTimers+0x18>
				list[i].count--;
			if(!list[i].count) {
				if(list[i].periodic)
					list[i].count = list[i].time_ms;
				else
					list[i].active = false;
1a0011b0:	2400      	movs	r4, #0
1a0011b2:	7354      	strb	r4, [r2, #13]
				list[i].evPending = true;
1a0011b4:	2401      	movs	r4, #1
1a0011b6:	7394      	strb	r4, [r2, #14]
	for(i = 0; i < len; i++) {
1a0011b8:	3301      	adds	r3, #1
1a0011ba:	428b      	cmp	r3, r1
1a0011bc:	d211      	bcs.n	1a0011e2 <UpdateTimers+0x3c>
		if(list[i].active == true) {
1a0011be:	eb00 1203 	add.w	r2, r0, r3, lsl #4
1a0011c2:	7b54      	ldrb	r4, [r2, #13]
1a0011c4:	2c00      	cmp	r4, #0
1a0011c6:	d0f7      	beq.n	1a0011b8 <UpdateTimers+0x12>
			if(list[i].count)
1a0011c8:	6894      	ldr	r4, [r2, #8]
1a0011ca:	b10c      	cbz	r4, 1a0011d0 <UpdateTimers+0x2a>
				list[i].count--;
1a0011cc:	3c01      	subs	r4, #1
1a0011ce:	6094      	str	r4, [r2, #8]
			if(!list[i].count) {
1a0011d0:	6894      	ldr	r4, [r2, #8]
1a0011d2:	2c00      	cmp	r4, #0
1a0011d4:	d1f0      	bne.n	1a0011b8 <UpdateTimers+0x12>
				if(list[i].periodic)
1a0011d6:	7b14      	ldrb	r4, [r2, #12]
1a0011d8:	2c00      	cmp	r4, #0
1a0011da:	d0e9      	beq.n	1a0011b0 <UpdateTimers+0xa>
					list[i].count = list[i].time_ms;
1a0011dc:	6854      	ldr	r4, [r2, #4]
1a0011de:	6094      	str	r4, [r2, #8]
1a0011e0:	e7e8      	b.n	1a0011b4 <UpdateTimers+0xe>
			}
		}
	}
}
1a0011e2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0011e6:	4770      	bx	lr
1a0011e8:	4770      	bx	lr
1a0011ea:	Address 0x000000001a0011ea is out of bounds.


1a0011ec <myTickHook>:
/* Hook on Handle interrupt from SysTick timer
*/
void myTickHook( void *ptr ) {

	/* The sysTick Interrupt Handler only sets a Flag */
	SysTick_Time_Flag = true;
1a0011ec:	4b01      	ldr	r3, [pc, #4]	; (1a0011f4 <myTickHook+0x8>)
1a0011ee:	2201      	movs	r2, #1
1a0011f0:	701a      	strb	r2, [r3, #0]
}
1a0011f2:	4770      	bx	lr
1a0011f4:	100000f0 	.word	0x100000f0

1a0011f8 <onRx>:
	return ret;
}

/* handler de la interrupcion por Rx */
void onRx(void *noUsado)
{
1a0011f8:	b510      	push	{r4, lr}
	int i = 0;
	memset(temp_string, 0, RX_BUFFER_SIZE*sizeof(char));
1a0011fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a0011fe:	2100      	movs	r1, #0
1a001200:	4811      	ldr	r0, [pc, #68]	; (1a001248 <onRx+0x50>)
1a001202:	f002 f852 	bl	1a0032aa <memset>
	int i = 0;
1a001206:	2400      	movs	r4, #0

	do{
		temp_string[i] = uartRxRead(UART_GPIO);
1a001208:	2000      	movs	r0, #0
1a00120a:	f001 f9c1 	bl	1a002590 <uartRxRead>
1a00120e:	4b0e      	ldr	r3, [pc, #56]	; (1a001248 <onRx+0x50>)
1a001210:	5518      	strb	r0, [r3, r4]
		i++;
1a001212:	3401      	adds	r4, #1
	} while(temp_string[i-1] != '\0' && i < RX_BUFFER_SIZE-1);
1a001214:	b118      	cbz	r0, 1a00121e <onRx+0x26>
1a001216:	f240 33fe 	movw	r3, #1022	; 0x3fe
1a00121a:	429c      	cmp	r4, r3
1a00121c:	ddf4      	ble.n	1a001208 <onRx+0x10>

	printf("Recibimos \'%s\' por UART\r\n", temp_string);
1a00121e:	4c0a      	ldr	r4, [pc, #40]	; (1a001248 <onRx+0x50>)
1a001220:	4621      	mov	r1, r4
1a001222:	480a      	ldr	r0, [pc, #40]	; (1a00124c <onRx+0x54>)
1a001224:	f002 fbce 	bl	1a0039c4 <iprintf>
//		if(statechart.stateConfVector[SCVI_PROYECTO_MAIN_REGION_FEEDING]
//													  == Proyecto_main_region_Feeding)
//			break;
//	}

	if(strstr(temp_string, MQTT_EVENT_FEED)!=NULL)
1a001228:	4909      	ldr	r1, [pc, #36]	; (1a001250 <onRx+0x58>)
1a00122a:	4620      	mov	r0, r4
1a00122c:	f002 fc25 	bl	1a003a7a <strstr>
1a001230:	b110      	cbz	r0, 1a001238 <onRx+0x40>
		proyecto_raise_evFeed(&statechart);
1a001232:	4808      	ldr	r0, [pc, #32]	; (1a001254 <onRx+0x5c>)
1a001234:	f7ff ff18 	bl	1a001068 <proyecto_raise_evFeed>

	memset(temp_string, 0, RX_BUFFER_SIZE*sizeof(char));
1a001238:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a00123c:	2100      	movs	r1, #0
1a00123e:	4802      	ldr	r0, [pc, #8]	; (1a001248 <onRx+0x50>)
1a001240:	f002 f833 	bl	1a0032aa <memset>

}
1a001244:	bd10      	pop	{r4, pc}
1a001246:	bf00      	nop
1a001248:	10000194 	.word	0x10000194
1a00124c:	1a003df4 	.word	0x1a003df4
1a001250:	1a003e10 	.word	0x1a003e10
1a001254:	100000f4 	.word	0x100000f4

1a001258 <proyecto_startMotor>:
void proyecto_startMotor( Proyecto* handle){
1a001258:	b508      	push	{r3, lr}
	gpioWrite(LEDR, TRUE);
1a00125a:	2101      	movs	r1, #1
1a00125c:	2028      	movs	r0, #40	; 0x28
1a00125e:	f001 fbf1 	bl	1a002a44 <gpioWrite>
	gpioWrite(GPIO3, FALSE);
1a001262:	2100      	movs	r1, #0
1a001264:	200e      	movs	r0, #14
1a001266:	f001 fbed 	bl	1a002a44 <gpioWrite>
	gpioWrite(GPIO4, TRUE);
1a00126a:	2101      	movs	r1, #1
1a00126c:	201e      	movs	r0, #30
1a00126e:	f001 fbe9 	bl	1a002a44 <gpioWrite>
}
1a001272:	bd08      	pop	{r3, pc}

1a001274 <proyecto_stopMotor>:
void proyecto_stopMotor( Proyecto* handle){
1a001274:	b508      	push	{r3, lr}
	gpioWrite(LEDR, FALSE);
1a001276:	2100      	movs	r1, #0
1a001278:	2028      	movs	r0, #40	; 0x28
1a00127a:	f001 fbe3 	bl	1a002a44 <gpioWrite>
	gpioWrite(GPIO3, FALSE);
1a00127e:	2100      	movs	r1, #0
1a001280:	200e      	movs	r0, #14
1a001282:	f001 fbdf 	bl	1a002a44 <gpioWrite>
	gpioWrite(GPIO4, FALSE);
1a001286:	2100      	movs	r1, #0
1a001288:	201e      	movs	r0, #30
1a00128a:	f001 fbdb 	bl	1a002a44 <gpioWrite>
}
1a00128e:	bd08      	pop	{r3, pc}

1a001290 <proyecto_opNotify>:
}
1a001290:	4770      	bx	lr

1a001292 <proyecto_opConfigureSec>:
}
1a001292:	4608      	mov	r0, r1
1a001294:	4770      	bx	lr

1a001296 <proyecto_opPause>:
void proyecto_opPause( Proyecto* handle){
1a001296:	b508      	push	{r3, lr}
	gpioWrite(LED3, !gpioRead(LED3));
1a001298:	202d      	movs	r0, #45	; 0x2d
1a00129a:	f001 fc17 	bl	1a002acc <gpioRead>
1a00129e:	fab0 f180 	clz	r1, r0
1a0012a2:	0949      	lsrs	r1, r1, #5
1a0012a4:	202d      	movs	r0, #45	; 0x2d
1a0012a6:	f001 fbcd 	bl	1a002a44 <gpioWrite>
}
1a0012aa:	bd08      	pop	{r3, pc}

1a0012ac <proyecto_opUnpause>:
void proyecto_opUnpause( Proyecto* handle){
1a0012ac:	b508      	push	{r3, lr}
	gpioWrite(LED3, FALSE);
1a0012ae:	2100      	movs	r1, #0
1a0012b0:	202d      	movs	r0, #45	; 0x2d
1a0012b2:	f001 fbc7 	bl	1a002a44 <gpioWrite>
}
1a0012b6:	bd08      	pop	{r3, pc}

1a0012b8 <proyecto_set_timer>:
{
1a0012b8:	b500      	push	{lr}
1a0012ba:	b083      	sub	sp, #12
	SetNewTimerTick(ticks, NOF_TIMERS, evid, time_ms, periodic);
1a0012bc:	9300      	str	r3, [sp, #0]
1a0012be:	4613      	mov	r3, r2
1a0012c0:	460a      	mov	r2, r1
1a0012c2:	2110      	movs	r1, #16
1a0012c4:	4802      	ldr	r0, [pc, #8]	; (1a0012d0 <proyecto_set_timer+0x18>)
1a0012c6:	f7ff ff12 	bl	1a0010ee <SetNewTimerTick>
}
1a0012ca:	b003      	add	sp, #12
1a0012cc:	f85d fb04 	ldr.w	pc, [sp], #4
1a0012d0:	100005f0 	.word	0x100005f0

1a0012d4 <proyecto_unset_timer>:
{
1a0012d4:	b508      	push	{r3, lr}
	UnsetTimerTick( ticks, NOF_TIMERS, evid );
1a0012d6:	460a      	mov	r2, r1
1a0012d8:	2110      	movs	r1, #16
1a0012da:	4802      	ldr	r0, [pc, #8]	; (1a0012e4 <proyecto_unset_timer+0x10>)
1a0012dc:	f7ff ff20 	bl	1a001120 <UnsetTimerTick>
}
1a0012e0:	bd08      	pop	{r3, pc}
1a0012e2:	bf00      	nop
1a0012e4:	100005f0 	.word	0x100005f0

1a0012e8 <Buttons_GetStatus_>:
uint32_t Buttons_GetStatus_(void) { // @suppress("Type cannot be resolved")
1a0012e8:	b538      	push	{r3, r4, r5, lr}
	for (idx = 0; idx < 4; ++idx) {
1a0012ea:	2400      	movs	r4, #0
	uint8_t ret = false; // @suppress("Type cannot be resolved")
1a0012ec:	4625      	mov	r5, r4
	for (idx = 0; idx < 4; ++idx) {
1a0012ee:	e000      	b.n	1a0012f2 <Buttons_GetStatus_+0xa>
1a0012f0:	3401      	adds	r4, #1
1a0012f2:	2c03      	cmp	r4, #3
1a0012f4:	d80b      	bhi.n	1a00130e <Buttons_GetStatus_+0x26>
		if (gpioRead( TEC1 + idx ) == 0) // @suppress("Symbol is not resolved")
1a0012f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0012fa:	b240      	sxtb	r0, r0
1a0012fc:	f001 fbe6 	bl	1a002acc <gpioRead>
1a001300:	2800      	cmp	r0, #0
1a001302:	d1f5      	bne.n	1a0012f0 <Buttons_GetStatus_+0x8>
			ret |= 1 << idx;
1a001304:	2301      	movs	r3, #1
1a001306:	40a3      	lsls	r3, r4
1a001308:	431d      	orrs	r5, r3
1a00130a:	b2ed      	uxtb	r5, r5
1a00130c:	e7f0      	b.n	1a0012f0 <Buttons_GetStatus_+0x8>
}
1a00130e:	4628      	mov	r0, r5
1a001310:	bd38      	pop	{r3, r4, r5, pc}
1a001312:	Address 0x000000001a001312 is out of bounds.


1a001314 <main>:

int main(void)
{
1a001314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t BUTTON_Status = 0; // @suppress("Type cannot be resolved")

	uint32_t BUTTON_Status_old; // @suppress("Type cannot be resolved")

	/* Generic initialization */
	boardConfig();
1a001316:	f001 fc1b 	bl	1a002b50 <boardInit>

	/* Inicializar UART_232 como salida Serial de consola */
	consolePrintConfigUart( UART_GPIO, 115200 );
1a00131a:	4c50      	ldr	r4, [pc, #320]	; (1a00145c <main+0x148>)
1a00131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a001320:	2100      	movs	r1, #0
1a001322:	4620      	mov	r0, r4
1a001324:	f001 fc4e 	bl	1a002bc4 <printInitUart>
	consolePrintlnString( "UART_GPIO configurada a BDRATE: 115200." );
1a001328:	494d      	ldr	r1, [pc, #308]	; (1a001460 <main+0x14c>)
1a00132a:	7820      	ldrb	r0, [r4, #0]
1a00132c:	f001 fc52 	bl	1a002bd4 <printString>
1a001330:	7820      	ldrb	r0, [r4, #0]
1a001332:	f001 fc53 	bl	1a002bdc <printEnter>

	/* Set de un callback al evento de Rx */
	uartCallbackSet(UART_GPIO, UART_RECEIVE, onRx, NULL);
1a001336:	2300      	movs	r3, #0
1a001338:	4a4a      	ldr	r2, [pc, #296]	; (1a001464 <main+0x150>)
1a00133a:	4619      	mov	r1, r3
1a00133c:	4618      	mov	r0, r3
1a00133e:	f001 f8bd 	bl	1a0024bc <uartCallbackSet>
	/* Habilito las interrupciones */
	uartInterrupt(UART_GPIO, true);
1a001342:	2101      	movs	r1, #1
1a001344:	2000      	movs	r0, #0
1a001346:	f001 f871 	bl	1a00242c <uartInterrupt>

	/* Init Ticks counter => TICKRATE_MS */
	tickConfig( TICKRATE_MS );
1a00134a:	2001      	movs	r0, #1
1a00134c:	2100      	movs	r1, #0
1a00134e:	f001 f9af 	bl	1a0026b0 <tickInit>

	/* Add Tick Hook */
	tickCallbackSet( myTickHook, (void*)NULL );
1a001352:	2100      	movs	r1, #0
1a001354:	4844      	ldr	r0, [pc, #272]	; (1a001468 <main+0x154>)
1a001356:	f001 f98f 	bl	1a002678 <tickCallbackSet>

	/* Init Timer Ticks */
	InitTimerTicks( ticks, NOF_TIMERS );
1a00135a:	2110      	movs	r1, #16
1a00135c:	4843      	ldr	r0, [pc, #268]	; (1a00146c <main+0x158>)
1a00135e:	f7ff feb5 	bl	1a0010cc <InitTimerTicks>

	/* Statechart Initialization */
	proyecto_init( &statechart );
1a001362:	4c43      	ldr	r4, [pc, #268]	; (1a001470 <main+0x15c>)
1a001364:	4620      	mov	r0, r4
1a001366:	f7ff fe24 	bl	1a000fb2 <proyecto_init>
	proyecto_enter( &statechart );
1a00136a:	4620      	mov	r0, r4
1a00136c:	f7ff fe51 	bl	1a001012 <proyecto_enter>

	gpioInit(GPIO3, GPIO_OUTPUT);
1a001370:	2101      	movs	r1, #1
1a001372:	200e      	movs	r0, #14
1a001374:	f001 fa90 	bl	1a002898 <gpioInit>
	gpioInit(GPIO4, GPIO_OUTPUT);
1a001378:	2101      	movs	r1, #1
1a00137a:	201e      	movs	r0, #30
1a00137c:	f001 fa8c 	bl	1a002898 <gpioInit>
	uint32_t BUTTON_Status = 0; // @suppress("Type cannot be resolved")
1a001380:	2400      	movs	r4, #0
1a001382:	e030      	b.n	1a0013e6 <main+0xd2>

				/* Then if there are pending events */
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {

					/* Then Raise an Event -> Ticks.evid => OK */
					proyecto_raise_time_event(&statechart, ticks[i].evid);
1a001384:	4d39      	ldr	r5, [pc, #228]	; (1a00146c <main+0x158>)
1a001386:	0127      	lsls	r7, r4, #4
1a001388:	59e9      	ldr	r1, [r5, r7]
1a00138a:	4839      	ldr	r0, [pc, #228]	; (1a001470 <main+0x15c>)
1a00138c:	f7ff fe56 	bl	1a00103c <proyecto_raise_time_event>

					/* Then Mark as Attached -> Ticks.evid => OK */
					MarkAsAttEvent(ticks, NOF_TIMERS, ticks[i].evid);
1a001390:	59ea      	ldr	r2, [r5, r7]
1a001392:	2110      	movs	r1, #16
1a001394:	4628      	mov	r0, r5
1a001396:	f7ff fef4 	bl	1a001182 <MarkAsAttEvent>
			for (i = 0; i < NOF_TIMERS; i++) {
1a00139a:	3401      	adds	r4, #1
1a00139c:	2c0f      	cmp	r4, #15
1a00139e:	d808      	bhi.n	1a0013b2 <main+0x9e>
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {
1a0013a0:	4832      	ldr	r0, [pc, #200]	; (1a00146c <main+0x158>)
1a0013a2:	0123      	lsls	r3, r4, #4
1a0013a4:	58c2      	ldr	r2, [r0, r3]
1a0013a6:	2110      	movs	r1, #16
1a0013a8:	f7ff fed4 	bl	1a001154 <IsPendEvent>
1a0013ac:	2800      	cmp	r0, #0
1a0013ae:	d0f4      	beq.n	1a00139a <main+0x86>
1a0013b0:	e7e8      	b.n	1a001384 <main+0x70>
				}
			}

			/* Then Get status of buttons */
			BUTTON_Status_old = BUTTON_Status;
			BUTTON_Status = Buttons_GetStatus_();
1a0013b2:	f7ff ff99 	bl	1a0012e8 <Buttons_GetStatus_>
1a0013b6:	4604      	mov	r4, r0

			/* TEC1 => Feed
			 * TEC2 => FeedRst
			 * TEC3 => Pause (FOR DEBUGGING ONLY)
			 * TEC4 => Unpause (FOR DEBUGGING ONLY)*/
			if (BUTTON_Status == 1
1a0013b8:	2801      	cmp	r0, #1
1a0013ba:	d004      	beq.n	1a0013c6 <main+0xb2>
					|| (strstr(temp_string, MQTT_EVENT_FEED)!=NULL)) {
1a0013bc:	492d      	ldr	r1, [pc, #180]	; (1a001474 <main+0x160>)
1a0013be:	482e      	ldr	r0, [pc, #184]	; (1a001478 <main+0x164>)
1a0013c0:	f002 fb5b 	bl	1a003a7a <strstr>
1a0013c4:	b110      	cbz	r0, 1a0013cc <main+0xb8>
				proyecto_raise_evFeed(&statechart);
1a0013c6:	482a      	ldr	r0, [pc, #168]	; (1a001470 <main+0x15c>)
1a0013c8:	f7ff fe4e 	bl	1a001068 <proyecto_raise_evFeed>
			}

			if(statechart.stateConfVector[SCVI_PROYECTO_MAIN_REGION_FEEDING]
1a0013cc:	4b28      	ldr	r3, [pc, #160]	; (1a001470 <main+0x15c>)
1a0013ce:	781b      	ldrb	r3, [r3, #0]
1a0013d0:	2b02      	cmp	r3, #2
1a0013d2:	d015      	beq.n	1a001400 <main+0xec>
										  == Proyecto_main_region_Feeding)
				memset(temp_string, 0, RX_BUFFER_SIZE*sizeof(char));

			if ((BUTTON_Status == 0 && BUTTON_Status_old == 1))
1a0013d4:	b90c      	cbnz	r4, 1a0013da <main+0xc6>
1a0013d6:	2e01      	cmp	r6, #1
1a0013d8:	d019      	beq.n	1a00140e <main+0xfa>
				proyecto_raise_evIdle(&statechart);

			if (BUTTON_Status == 2 && BUTTON_Status_old == 0) {
1a0013da:	2c02      	cmp	r4, #2
1a0013dc:	d01b      	beq.n	1a001416 <main+0x102>
				proyecto_raise_evFeedRst(&statechart);
			}

			if (BUTTON_Status == 4 && BUTTON_Status_old == 0) {
1a0013de:	2c04      	cmp	r4, #4
1a0013e0:	d01f      	beq.n	1a001422 <main+0x10e>
				consolePrintlnString("Feeding paused.");
				proyecto_raise_evPause(&statechart);
			}

			if (BUTTON_Status == 8 && BUTTON_Status_old == 0) {
1a0013e2:	2c08      	cmp	r4, #8
1a0013e4:	d02b      	beq.n	1a00143e <main+0x12a>
	uint32_t BUTTON_Status = 0; // @suppress("Type cannot be resolved")
1a0013e6:	4626      	mov	r6, r4
		if (SysTick_Time_Flag == true) {
1a0013e8:	4b24      	ldr	r3, [pc, #144]	; (1a00147c <main+0x168>)
1a0013ea:	781b      	ldrb	r3, [r3, #0]
1a0013ec:	2b00      	cmp	r3, #0
1a0013ee:	d0fb      	beq.n	1a0013e8 <main+0xd4>
			SysTick_Time_Flag = false;
1a0013f0:	2400      	movs	r4, #0
1a0013f2:	4b22      	ldr	r3, [pc, #136]	; (1a00147c <main+0x168>)
1a0013f4:	701c      	strb	r4, [r3, #0]
			UpdateTimers( ticks, NOF_TIMERS );
1a0013f6:	2110      	movs	r1, #16
1a0013f8:	481c      	ldr	r0, [pc, #112]	; (1a00146c <main+0x158>)
1a0013fa:	f7ff fed4 	bl	1a0011a6 <UpdateTimers>
			for (i = 0; i < NOF_TIMERS; i++) {
1a0013fe:	e7cd      	b.n	1a00139c <main+0x88>
				memset(temp_string, 0, RX_BUFFER_SIZE*sizeof(char));
1a001400:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a001404:	2100      	movs	r1, #0
1a001406:	481c      	ldr	r0, [pc, #112]	; (1a001478 <main+0x164>)
1a001408:	f001 ff4f 	bl	1a0032aa <memset>
1a00140c:	e7e2      	b.n	1a0013d4 <main+0xc0>
				proyecto_raise_evIdle(&statechart);
1a00140e:	4818      	ldr	r0, [pc, #96]	; (1a001470 <main+0x15c>)
1a001410:	f7ff fe52 	bl	1a0010b8 <proyecto_raise_evIdle>
1a001414:	e7e1      	b.n	1a0013da <main+0xc6>
			if (BUTTON_Status == 2 && BUTTON_Status_old == 0) {
1a001416:	2e00      	cmp	r6, #0
1a001418:	d1e1      	bne.n	1a0013de <main+0xca>
				proyecto_raise_evFeedRst(&statechart);
1a00141a:	4815      	ldr	r0, [pc, #84]	; (1a001470 <main+0x15c>)
1a00141c:	f7ff fe2e 	bl	1a00107c <proyecto_raise_evFeedRst>
1a001420:	e7dd      	b.n	1a0013de <main+0xca>
			if (BUTTON_Status == 4 && BUTTON_Status_old == 0) {
1a001422:	2e00      	cmp	r6, #0
1a001424:	d1dd      	bne.n	1a0013e2 <main+0xce>
				consolePrintlnString("Feeding paused.");
1a001426:	4d0d      	ldr	r5, [pc, #52]	; (1a00145c <main+0x148>)
1a001428:	4915      	ldr	r1, [pc, #84]	; (1a001480 <main+0x16c>)
1a00142a:	7828      	ldrb	r0, [r5, #0]
1a00142c:	f001 fbd2 	bl	1a002bd4 <printString>
1a001430:	7828      	ldrb	r0, [r5, #0]
1a001432:	f001 fbd3 	bl	1a002bdc <printEnter>
				proyecto_raise_evPause(&statechart);
1a001436:	480e      	ldr	r0, [pc, #56]	; (1a001470 <main+0x15c>)
1a001438:	f7ff fe2a 	bl	1a001090 <proyecto_raise_evPause>
1a00143c:	e7d1      	b.n	1a0013e2 <main+0xce>
			if (BUTTON_Status == 8 && BUTTON_Status_old == 0) {
1a00143e:	2e00      	cmp	r6, #0
1a001440:	d1d1      	bne.n	1a0013e6 <main+0xd2>
				consolePrintlnString("Feeding resumed.");
1a001442:	4d06      	ldr	r5, [pc, #24]	; (1a00145c <main+0x148>)
1a001444:	490f      	ldr	r1, [pc, #60]	; (1a001484 <main+0x170>)
1a001446:	7828      	ldrb	r0, [r5, #0]
1a001448:	f001 fbc4 	bl	1a002bd4 <printString>
1a00144c:	7828      	ldrb	r0, [r5, #0]
1a00144e:	f001 fbc5 	bl	1a002bdc <printEnter>
				proyecto_raise_evUnpause(&statechart);
1a001452:	4807      	ldr	r0, [pc, #28]	; (1a001470 <main+0x15c>)
1a001454:	f7ff fe26 	bl	1a0010a4 <proyecto_raise_evUnpause>
1a001458:	e7c5      	b.n	1a0013e6 <main+0xd2>
1a00145a:	bf00      	nop
1a00145c:	100000f1 	.word	0x100000f1
1a001460:	1a003da8 	.word	0x1a003da8
1a001464:	1a0011f9 	.word	0x1a0011f9
1a001468:	1a0011ed 	.word	0x1a0011ed
1a00146c:	100005f0 	.word	0x100005f0
1a001470:	100000f4 	.word	0x100000f4
1a001474:	1a003e10 	.word	0x1a003e10
1a001478:	10000194 	.word	0x10000194
1a00147c:	100000f0 	.word	0x100000f0
1a001480:	1a003dd0 	.word	0x1a003dd0
1a001484:	1a003de0 	.word	0x1a003de0

1a001488 <initialise_monitor_handles>:
}
1a001488:	4770      	bx	lr
1a00148a:	Address 0x000000001a00148a is out of bounds.


1a00148c <Reset_Handler>:
void Reset_Handler(void) {
1a00148c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00148e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001490:	4b19      	ldr	r3, [pc, #100]	; (1a0014f8 <Reset_Handler+0x6c>)
1a001492:	4a1a      	ldr	r2, [pc, #104]	; (1a0014fc <Reset_Handler+0x70>)
1a001494:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001496:	3304      	adds	r3, #4
1a001498:	4a19      	ldr	r2, [pc, #100]	; (1a001500 <Reset_Handler+0x74>)
1a00149a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00149c:	2300      	movs	r3, #0
1a00149e:	e005      	b.n	1a0014ac <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0014a0:	4a18      	ldr	r2, [pc, #96]	; (1a001504 <Reset_Handler+0x78>)
1a0014a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0014a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0014aa:	3301      	adds	r3, #1
1a0014ac:	2b07      	cmp	r3, #7
1a0014ae:	d9f7      	bls.n	1a0014a0 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0014b0:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0014b2:	4b15      	ldr	r3, [pc, #84]	; (1a001508 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0014b4:	e007      	b.n	1a0014c6 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0014b6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0014ba:	689a      	ldr	r2, [r3, #8]
1a0014bc:	6859      	ldr	r1, [r3, #4]
1a0014be:	6818      	ldr	r0, [r3, #0]
1a0014c0:	f7fe fe63 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0014c4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0014c6:	4a11      	ldr	r2, [pc, #68]	; (1a00150c <Reset_Handler+0x80>)
1a0014c8:	4293      	cmp	r3, r2
1a0014ca:	d3f4      	bcc.n	1a0014b6 <Reset_Handler+0x2a>
1a0014cc:	e006      	b.n	1a0014dc <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0014ce:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0014d0:	6859      	ldr	r1, [r3, #4]
1a0014d2:	f854 0b08 	ldr.w	r0, [r4], #8
1a0014d6:	f7fe fe67 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0014da:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0014dc:	4a0c      	ldr	r2, [pc, #48]	; (1a001510 <Reset_Handler+0x84>)
1a0014de:	4293      	cmp	r3, r2
1a0014e0:	d3f5      	bcc.n	1a0014ce <Reset_Handler+0x42>
    SystemInit();
1a0014e2:	f000 ff15 	bl	1a002310 <SystemInit>
    __libc_init_array();
1a0014e6:	f001 feb9 	bl	1a00325c <__libc_init_array>
    initialise_monitor_handles();
1a0014ea:	f7ff ffcd 	bl	1a001488 <initialise_monitor_handles>
    main();
1a0014ee:	f7ff ff11 	bl	1a001314 <main>
        __asm__ volatile("wfi");
1a0014f2:	bf30      	wfi
1a0014f4:	e7fd      	b.n	1a0014f2 <Reset_Handler+0x66>
1a0014f6:	bf00      	nop
1a0014f8:	40053100 	.word	0x40053100
1a0014fc:	10df1000 	.word	0x10df1000
1a001500:	01dff7ff 	.word	0x01dff7ff
1a001504:	e000e280 	.word	0xe000e280
1a001508:	1a000114 	.word	0x1a000114
1a00150c:	1a000150 	.word	0x1a000150
1a001510:	1a000178 	.word	0x1a000178

1a001514 <_fini>:
void _fini(void) {}
1a001514:	4770      	bx	lr

1a001516 <_init>:
void _init(void) {}
1a001516:	4770      	bx	lr

1a001518 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a001518:	2309      	movs	r3, #9
1a00151a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00151c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001520:	4770      	bx	lr

1a001522 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a001522:	2358      	movs	r3, #88	; 0x58
1a001524:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00152a:	4770      	bx	lr

1a00152c <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a00152c:	2902      	cmp	r1, #2
1a00152e:	d904      	bls.n	1a00153a <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a001530:	2309      	movs	r3, #9
1a001532:	6003      	str	r3, [r0, #0]
       return -1;
1a001534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001538:	4770      	bx	lr
       return 1;
1a00153a:	2001      	movs	r0, #1
   }
}
1a00153c:	4770      	bx	lr

1a00153e <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00153e:	2358      	movs	r3, #88	; 0x58
1a001540:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001546:	4770      	bx	lr

1a001548 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a001548:	2902      	cmp	r1, #2
1a00154a:	d81f      	bhi.n	1a00158c <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a00154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001550:	461d      	mov	r5, r3
1a001552:	4617      	mov	r7, r2
1a001554:	4606      	mov	r6, r0
  size_t i = 0;
1a001556:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a001558:	42ac      	cmp	r4, r5
1a00155a:	d211      	bcs.n	1a001580 <_read_r+0x38>
         int c = __stdio_getchar();
1a00155c:	f000 f92f 	bl	1a0017be <__stdio_getchar>
         if( c != -1 ){
1a001560:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001564:	d0f8      	beq.n	1a001558 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a001566:	f104 0801 	add.w	r8, r4, #1
1a00156a:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a00156c:	280d      	cmp	r0, #13
1a00156e:	d003      	beq.n	1a001578 <_read_r+0x30>
1a001570:	280a      	cmp	r0, #10
1a001572:	d001      	beq.n	1a001578 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a001574:	4644      	mov	r4, r8
1a001576:	e7ef      	b.n	1a001558 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a001578:	f000 f921 	bl	1a0017be <__stdio_getchar>
               return i;
1a00157c:	4640      	mov	r0, r8
1a00157e:	e003      	b.n	1a001588 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a001580:	2313      	movs	r3, #19
1a001582:	6033      	str	r3, [r6, #0]
      return -1;
1a001584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a001588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a00158c:	2313      	movs	r3, #19
1a00158e:	6003      	str	r3, [r0, #0]
      return -1;
1a001590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a001594:	4770      	bx	lr

1a001596 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a001596:	2902      	cmp	r1, #2
1a001598:	d80c      	bhi.n	1a0015b4 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00159a:	b570      	push	{r4, r5, r6, lr}
1a00159c:	461d      	mov	r5, r3
1a00159e:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0015a0:	2400      	movs	r4, #0
1a0015a2:	42ac      	cmp	r4, r5
1a0015a4:	d204      	bcs.n	1a0015b0 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a0015a6:	5d30      	ldrb	r0, [r6, r4]
1a0015a8:	f000 f904 	bl	1a0017b4 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0015ac:	3401      	adds	r4, #1
1a0015ae:	e7f8      	b.n	1a0015a2 <_write_r+0xc>
       return n;
1a0015b0:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0015b2:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0015b4:	2313      	movs	r3, #19
1a0015b6:	6003      	str	r3, [r0, #0]
       return -1;
1a0015b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0015bc:	4770      	bx	lr
1a0015be:	Address 0x000000001a0015be is out of bounds.


1a0015c0 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0015c0:	4b05      	ldr	r3, [pc, #20]	; (1a0015d8 <_sbrk_r+0x18>)
1a0015c2:	681b      	ldr	r3, [r3, #0]
1a0015c4:	b123      	cbz	r3, 1a0015d0 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0015c6:	4b04      	ldr	r3, [pc, #16]	; (1a0015d8 <_sbrk_r+0x18>)
1a0015c8:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0015ca:	4401      	add	r1, r0
1a0015cc:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0015ce:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0015d0:	4b01      	ldr	r3, [pc, #4]	; (1a0015d8 <_sbrk_r+0x18>)
1a0015d2:	4a02      	ldr	r2, [pc, #8]	; (1a0015dc <_sbrk_r+0x1c>)
1a0015d4:	601a      	str	r2, [r3, #0]
1a0015d6:	e7f6      	b.n	1a0015c6 <_sbrk_r+0x6>
1a0015d8:	10000594 	.word	0x10000594
1a0015dc:	10000704 	.word	0x10000704

1a0015e0 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0015e0:	2200      	movs	r2, #0
1a0015e2:	2a05      	cmp	r2, #5
1a0015e4:	d819      	bhi.n	1a00161a <Board_LED_Init+0x3a>
{
1a0015e6:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0015e8:	490c      	ldr	r1, [pc, #48]	; (1a00161c <Board_LED_Init+0x3c>)
1a0015ea:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0015ee:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0015f2:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0015f4:	4b0a      	ldr	r3, [pc, #40]	; (1a001620 <Board_LED_Init+0x40>)
1a0015f6:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0015fa:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0015fe:	2001      	movs	r0, #1
1a001600:	40a0      	lsls	r0, r4
1a001602:	4301      	orrs	r1, r0
1a001604:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a001608:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a00160c:	2100      	movs	r1, #0
1a00160e:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001610:	3201      	adds	r2, #1
1a001612:	2a05      	cmp	r2, #5
1a001614:	d9e8      	bls.n	1a0015e8 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a001616:	bc70      	pop	{r4, r5, r6}
1a001618:	4770      	bx	lr
1a00161a:	4770      	bx	lr
1a00161c:	1a003e24 	.word	0x1a003e24
1a001620:	400f4000 	.word	0x400f4000

1a001624 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001624:	2300      	movs	r3, #0
1a001626:	2b03      	cmp	r3, #3
1a001628:	d816      	bhi.n	1a001658 <Board_TEC_Init+0x34>
{
1a00162a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00162c:	490b      	ldr	r1, [pc, #44]	; (1a00165c <Board_TEC_Init+0x38>)
1a00162e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001632:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001636:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001638:	4c09      	ldr	r4, [pc, #36]	; (1a001660 <Board_TEC_Init+0x3c>)
1a00163a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00163e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a001642:	2001      	movs	r0, #1
1a001644:	40a8      	lsls	r0, r5
1a001646:	ea21 0100 	bic.w	r1, r1, r0
1a00164a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00164e:	3301      	adds	r3, #1
1a001650:	2b03      	cmp	r3, #3
1a001652:	d9eb      	bls.n	1a00162c <Board_TEC_Init+0x8>
   }
}
1a001654:	bc30      	pop	{r4, r5}
1a001656:	4770      	bx	lr
1a001658:	4770      	bx	lr
1a00165a:	bf00      	nop
1a00165c:	1a003e1c 	.word	0x1a003e1c
1a001660:	400f4000 	.word	0x400f4000

1a001664 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001664:	2300      	movs	r3, #0
1a001666:	2b08      	cmp	r3, #8
1a001668:	d816      	bhi.n	1a001698 <Board_GPIO_Init+0x34>
{
1a00166a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00166c:	490b      	ldr	r1, [pc, #44]	; (1a00169c <Board_GPIO_Init+0x38>)
1a00166e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001672:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001676:	784d      	ldrb	r5, [r1, #1]
1a001678:	4c09      	ldr	r4, [pc, #36]	; (1a0016a0 <Board_GPIO_Init+0x3c>)
1a00167a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00167e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a001682:	2001      	movs	r0, #1
1a001684:	40a8      	lsls	r0, r5
1a001686:	ea21 0100 	bic.w	r1, r1, r0
1a00168a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00168e:	3301      	adds	r3, #1
1a001690:	2b08      	cmp	r3, #8
1a001692:	d9eb      	bls.n	1a00166c <Board_GPIO_Init+0x8>
   }
}
1a001694:	bc30      	pop	{r4, r5}
1a001696:	4770      	bx	lr
1a001698:	4770      	bx	lr
1a00169a:	bf00      	nop
1a00169c:	1a003e30 	.word	0x1a003e30
1a0016a0:	400f4000 	.word	0x400f4000

1a0016a4 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0016a4:	b510      	push	{r4, lr}
1a0016a6:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0016a8:	4c08      	ldr	r4, [pc, #32]	; (1a0016cc <Board_ADC_Init+0x28>)
1a0016aa:	4669      	mov	r1, sp
1a0016ac:	4620      	mov	r0, r4
1a0016ae:	f000 f9d9 	bl	1a001a64 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0016b2:	4a07      	ldr	r2, [pc, #28]	; (1a0016d0 <Board_ADC_Init+0x2c>)
1a0016b4:	4669      	mov	r1, sp
1a0016b6:	4620      	mov	r0, r4
1a0016b8:	f000 f9f4 	bl	1a001aa4 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0016bc:	2200      	movs	r2, #0
1a0016be:	4669      	mov	r1, sp
1a0016c0:	4620      	mov	r0, r4
1a0016c2:	f000 fa08 	bl	1a001ad6 <Chip_ADC_SetResolution>
}
1a0016c6:	b002      	add	sp, #8
1a0016c8:	bd10      	pop	{r4, pc}
1a0016ca:	bf00      	nop
1a0016cc:	400e3000 	.word	0x400e3000
1a0016d0:	00061a80 	.word	0x00061a80

1a0016d4 <Board_SPI_Init>:
{
1a0016d4:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0016d6:	4c0b      	ldr	r4, [pc, #44]	; (1a001704 <Board_SPI_Init+0x30>)
1a0016d8:	4620      	mov	r0, r4
1a0016da:	f000 fdbf 	bl	1a00225c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0016de:	6863      	ldr	r3, [r4, #4]
1a0016e0:	f023 0304 	bic.w	r3, r3, #4
1a0016e4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0016e6:	6823      	ldr	r3, [r4, #0]
1a0016e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0016ec:	f043 0307 	orr.w	r3, r3, #7
1a0016f0:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0016f2:	4905      	ldr	r1, [pc, #20]	; (1a001708 <Board_SPI_Init+0x34>)
1a0016f4:	4620      	mov	r0, r4
1a0016f6:	f000 fd92 	bl	1a00221e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0016fa:	6863      	ldr	r3, [r4, #4]
1a0016fc:	f043 0302 	orr.w	r3, r3, #2
1a001700:	6063      	str	r3, [r4, #4]
}
1a001702:	bd10      	pop	{r4, pc}
1a001704:	400c5000 	.word	0x400c5000
1a001708:	000186a0 	.word	0x000186a0

1a00170c <Board_I2C_Init>:
{
1a00170c:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a00170e:	2000      	movs	r0, #0
1a001710:	f000 fdd0 	bl	1a0022b4 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001714:	4b04      	ldr	r3, [pc, #16]	; (1a001728 <Board_I2C_Init+0x1c>)
1a001716:	f640 0208 	movw	r2, #2056	; 0x808
1a00171a:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a00171e:	4903      	ldr	r1, [pc, #12]	; (1a00172c <Board_I2C_Init+0x20>)
1a001720:	2000      	movs	r0, #0
1a001722:	f000 fdd9 	bl	1a0022d8 <Chip_I2C_SetClockRate>
}
1a001726:	bd08      	pop	{r3, pc}
1a001728:	40086000 	.word	0x40086000
1a00172c:	000f4240 	.word	0x000f4240

1a001730 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a001730:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a001732:	4c07      	ldr	r4, [pc, #28]	; (1a001750 <Board_Debug_Init+0x20>)
1a001734:	4620      	mov	r0, r4
1a001736:	f000 f8b9 	bl	1a0018ac <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00173a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00173e:	4620      	mov	r0, r4
1a001740:	f000 f8fe 	bl	1a001940 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001744:	2303      	movs	r3, #3
1a001746:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a001748:	2301      	movs	r3, #1
1a00174a:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a00174c:	bd10      	pop	{r4, pc}
1a00174e:	bf00      	nop
1a001750:	400c1000 	.word	0x400c1000

1a001754 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001754:	4b03      	ldr	r3, [pc, #12]	; (1a001764 <Board_UARTPutChar+0x10>)
1a001756:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a001758:	f013 0f20 	tst.w	r3, #32
1a00175c:	d0fa      	beq.n	1a001754 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a00175e:	4b01      	ldr	r3, [pc, #4]	; (1a001764 <Board_UARTPutChar+0x10>)
1a001760:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a001762:	4770      	bx	lr
1a001764:	400c1000 	.word	0x400c1000

1a001768 <Board_UARTGetChar>:
	return pUART->LSR;
1a001768:	4b05      	ldr	r3, [pc, #20]	; (1a001780 <Board_UARTGetChar+0x18>)
1a00176a:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a00176c:	f013 0f01 	tst.w	r3, #1
1a001770:	d003      	beq.n	1a00177a <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001772:	4b03      	ldr	r3, [pc, #12]	; (1a001780 <Board_UARTGetChar+0x18>)
1a001774:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a001776:	b2c0      	uxtb	r0, r0
1a001778:	4770      	bx	lr
   }
   return EOF;
1a00177a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00177e:	4770      	bx	lr
1a001780:	400c1000 	.word	0x400c1000

1a001784 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a001784:	b508      	push	{r3, lr}
   DEBUGINIT();
1a001786:	f7ff ffd3 	bl	1a001730 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00178a:	4809      	ldr	r0, [pc, #36]	; (1a0017b0 <Board_Init+0x2c>)
1a00178c:	f000 fc7a 	bl	1a002084 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a001790:	f7ff ff68 	bl	1a001664 <Board_GPIO_Init>
   Board_ADC_Init();
1a001794:	f7ff ff86 	bl	1a0016a4 <Board_ADC_Init>
   Board_SPI_Init();
1a001798:	f7ff ff9c 	bl	1a0016d4 <Board_SPI_Init>
   Board_I2C_Init();
1a00179c:	f7ff ffb6 	bl	1a00170c <Board_I2C_Init>

   Board_LED_Init();
1a0017a0:	f7ff ff1e 	bl	1a0015e0 <Board_LED_Init>
   Board_TEC_Init();
1a0017a4:	f7ff ff3e 	bl	1a001624 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0017a8:	f000 f99c 	bl	1a001ae4 <SystemCoreClockUpdate>
}
1a0017ac:	bd08      	pop	{r3, pc}
1a0017ae:	bf00      	nop
1a0017b0:	400f4000 	.word	0x400f4000

1a0017b4 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a0017b4:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0017b6:	b2c0      	uxtb	r0, r0
1a0017b8:	f7ff ffcc 	bl	1a001754 <Board_UARTPutChar>
}
1a0017bc:	bd08      	pop	{r3, pc}

1a0017be <__stdio_getchar>:

int __stdio_getchar()
{
1a0017be:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0017c0:	f7ff ffd2 	bl	1a001768 <Board_UARTGetChar>
}
1a0017c4:	bd08      	pop	{r3, pc}

1a0017c6 <__stdio_init>:

void __stdio_init()
{
1a0017c6:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0017c8:	f7ff ffb2 	bl	1a001730 <Board_Debug_Init>
1a0017cc:	bd08      	pop	{r3, pc}
1a0017ce:	Address 0x000000001a0017ce is out of bounds.


1a0017d0 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0017d0:	2300      	movs	r3, #0
1a0017d2:	2b1c      	cmp	r3, #28
1a0017d4:	d812      	bhi.n	1a0017fc <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0017d6:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0017d8:	4a09      	ldr	r2, [pc, #36]	; (1a001800 <Board_SetupMuxing+0x30>)
1a0017da:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0017de:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0017e2:	784a      	ldrb	r2, [r1, #1]
1a0017e4:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0017e6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0017ea:	4906      	ldr	r1, [pc, #24]	; (1a001804 <Board_SetupMuxing+0x34>)
1a0017ec:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0017f0:	3301      	adds	r3, #1
1a0017f2:	2b1c      	cmp	r3, #28
1a0017f4:	d9f0      	bls.n	1a0017d8 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0017f6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0017fa:	4770      	bx	lr
1a0017fc:	4770      	bx	lr
1a0017fe:	bf00      	nop
1a001800:	1a003e4c 	.word	0x1a003e4c
1a001804:	40086000 	.word	0x40086000

1a001808 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a001808:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00180a:	4a17      	ldr	r2, [pc, #92]	; (1a001868 <Board_SetupClocking+0x60>)
1a00180c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001814:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001818:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00181c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001820:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001824:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001828:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00182c:	2201      	movs	r2, #1
1a00182e:	490f      	ldr	r1, [pc, #60]	; (1a00186c <Board_SetupClocking+0x64>)
1a001830:	2006      	movs	r0, #6
1a001832:	f000 fc29 	bl	1a002088 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001836:	2400      	movs	r4, #0
1a001838:	b14c      	cbz	r4, 1a00184e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00183a:	4b0b      	ldr	r3, [pc, #44]	; (1a001868 <Board_SetupClocking+0x60>)
1a00183c:	685a      	ldr	r2, [r3, #4]
1a00183e:	f022 020c 	bic.w	r2, r2, #12
1a001842:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001844:	685a      	ldr	r2, [r3, #4]
1a001846:	f042 0203 	orr.w	r2, r2, #3
1a00184a:	605a      	str	r2, [r3, #4]
}
1a00184c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00184e:	4808      	ldr	r0, [pc, #32]	; (1a001870 <Board_SetupClocking+0x68>)
1a001850:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001854:	2301      	movs	r3, #1
1a001856:	788a      	ldrb	r2, [r1, #2]
1a001858:	7849      	ldrb	r1, [r1, #1]
1a00185a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00185e:	f000 fb6d 	bl	1a001f3c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001862:	3401      	adds	r4, #1
1a001864:	e7e8      	b.n	1a001838 <Board_SetupClocking+0x30>
1a001866:	bf00      	nop
1a001868:	40043000 	.word	0x40043000
1a00186c:	0c28cb00 	.word	0x0c28cb00
1a001870:	1a003e48 	.word	0x1a003e48

1a001874 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a001874:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a001876:	f7ff ffab 	bl	1a0017d0 <Board_SetupMuxing>
    Board_SetupClocking();
1a00187a:	f7ff ffc5 	bl	1a001808 <Board_SetupClocking>
}
1a00187e:	bd08      	pop	{r3, pc}

1a001880 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001880:	4b09      	ldr	r3, [pc, #36]	; (1a0018a8 <Chip_UART_GetIndex+0x28>)
1a001882:	4298      	cmp	r0, r3
1a001884:	d009      	beq.n	1a00189a <Chip_UART_GetIndex+0x1a>
1a001886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00188a:	4298      	cmp	r0, r3
1a00188c:	d007      	beq.n	1a00189e <Chip_UART_GetIndex+0x1e>
1a00188e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001892:	4298      	cmp	r0, r3
1a001894:	d005      	beq.n	1a0018a2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001896:	2000      	movs	r0, #0
1a001898:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00189a:	2002      	movs	r0, #2
1a00189c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00189e:	2003      	movs	r0, #3
1a0018a0:	4770      	bx	lr
			return 1;
1a0018a2:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0018a4:	4770      	bx	lr
1a0018a6:	bf00      	nop
1a0018a8:	400c1000 	.word	0x400c1000

1a0018ac <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0018ac:	b530      	push	{r4, r5, lr}
1a0018ae:	b083      	sub	sp, #12
1a0018b0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0018b2:	f7ff ffe5 	bl	1a001880 <Chip_UART_GetIndex>
1a0018b6:	2301      	movs	r3, #1
1a0018b8:	461a      	mov	r2, r3
1a0018ba:	4619      	mov	r1, r3
1a0018bc:	4d0e      	ldr	r5, [pc, #56]	; (1a0018f8 <Chip_UART_Init+0x4c>)
1a0018be:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0018c2:	f000 fb81 	bl	1a001fc8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0018c6:	2307      	movs	r3, #7
1a0018c8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0018ca:	2300      	movs	r3, #0
1a0018cc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0018ce:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0018d0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0018d2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0018d4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0018d6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0018d8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0018da:	4b08      	ldr	r3, [pc, #32]	; (1a0018fc <Chip_UART_Init+0x50>)
1a0018dc:	429c      	cmp	r4, r3
1a0018de:	d006      	beq.n	1a0018ee <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0018e0:	2303      	movs	r3, #3
1a0018e2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0018e4:	2310      	movs	r3, #16
1a0018e6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0018e8:	9b01      	ldr	r3, [sp, #4]
}
1a0018ea:	b003      	add	sp, #12
1a0018ec:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0018ee:	2300      	movs	r3, #0
1a0018f0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0018f2:	69a3      	ldr	r3, [r4, #24]
1a0018f4:	9301      	str	r3, [sp, #4]
1a0018f6:	e7f3      	b.n	1a0018e0 <Chip_UART_Init+0x34>
1a0018f8:	1a003ec8 	.word	0x1a003ec8
1a0018fc:	40082000 	.word	0x40082000

1a001900 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001900:	b538      	push	{r3, r4, r5, lr}
1a001902:	4605      	mov	r5, r0
1a001904:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001906:	f7ff ffbb 	bl	1a001880 <Chip_UART_GetIndex>
1a00190a:	4b0c      	ldr	r3, [pc, #48]	; (1a00193c <Chip_UART_SetBaud+0x3c>)
1a00190c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001910:	f000 fb92 	bl	1a002038 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a001914:	0123      	lsls	r3, r4, #4
1a001916:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a00191a:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00191c:	68ea      	ldr	r2, [r5, #12]
1a00191e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001922:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a001924:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a001926:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00192a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00192c:	68ea      	ldr	r2, [r5, #12]
1a00192e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a001932:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a001934:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a001938:	0900      	lsrs	r0, r0, #4
1a00193a:	bd38      	pop	{r3, r4, r5, pc}
1a00193c:	1a003ec0 	.word	0x1a003ec0

1a001940 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001944:	b083      	sub	sp, #12
1a001946:	9001      	str	r0, [sp, #4]
1a001948:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00194a:	f7ff ff99 	bl	1a001880 <Chip_UART_GetIndex>
1a00194e:	4b32      	ldr	r3, [pc, #200]	; (1a001a18 <Chip_UART_SetBaudFDR+0xd8>)
1a001950:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001954:	f000 fb70 	bl	1a002038 <Chip_Clock_GetRate>
1a001958:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00195a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00195e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001960:	f04f 0b00 	mov.w	fp, #0
1a001964:	46a2      	mov	sl, r4
1a001966:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001968:	e02a      	b.n	1a0019c0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00196a:	4242      	negs	r2, r0
				div ++;
1a00196c:	1c4b      	adds	r3, r1, #1
1a00196e:	e017      	b.n	1a0019a0 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001970:	b30a      	cbz	r2, 1a0019b6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a001972:	4617      	mov	r7, r2
			sd = d;
1a001974:	46ab      	mov	fp, r5
			sm = m;
1a001976:	46a2      	mov	sl, r4
			sdiv = div;
1a001978:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00197a:	3501      	adds	r5, #1
1a00197c:	42ac      	cmp	r4, r5
1a00197e:	d91e      	bls.n	1a0019be <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001980:	0933      	lsrs	r3, r6, #4
1a001982:	0730      	lsls	r0, r6, #28
1a001984:	fba4 0100 	umull	r0, r1, r4, r0
1a001988:	fb04 1103 	mla	r1, r4, r3, r1
1a00198c:	1962      	adds	r2, r4, r5
1a00198e:	fb08 f202 	mul.w	r2, r8, r2
1a001992:	2300      	movs	r3, #0
1a001994:	f001 f92a 	bl	1a002bec <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001998:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00199a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00199c:	2800      	cmp	r0, #0
1a00199e:	dbe4      	blt.n	1a00196a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0019a0:	4297      	cmp	r7, r2
1a0019a2:	d3ea      	bcc.n	1a00197a <Chip_UART_SetBaudFDR+0x3a>
1a0019a4:	2b00      	cmp	r3, #0
1a0019a6:	d0e8      	beq.n	1a00197a <Chip_UART_SetBaudFDR+0x3a>
1a0019a8:	0c19      	lsrs	r1, r3, #16
1a0019aa:	d1e6      	bne.n	1a00197a <Chip_UART_SetBaudFDR+0x3a>
1a0019ac:	2b02      	cmp	r3, #2
1a0019ae:	d8df      	bhi.n	1a001970 <Chip_UART_SetBaudFDR+0x30>
1a0019b0:	2d00      	cmp	r5, #0
1a0019b2:	d0dd      	beq.n	1a001970 <Chip_UART_SetBaudFDR+0x30>
1a0019b4:	e7e1      	b.n	1a00197a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0019b6:	4617      	mov	r7, r2
			sd = d;
1a0019b8:	46ab      	mov	fp, r5
			sm = m;
1a0019ba:	46a2      	mov	sl, r4
			sdiv = div;
1a0019bc:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0019be:	3401      	adds	r4, #1
1a0019c0:	b11f      	cbz	r7, 1a0019ca <Chip_UART_SetBaudFDR+0x8a>
1a0019c2:	2c0f      	cmp	r4, #15
1a0019c4:	d801      	bhi.n	1a0019ca <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0019c6:	2500      	movs	r5, #0
1a0019c8:	e7d8      	b.n	1a00197c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0019ca:	f1b9 0f00 	cmp.w	r9, #0
1a0019ce:	d01e      	beq.n	1a001a0e <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0019d0:	9a01      	ldr	r2, [sp, #4]
1a0019d2:	4611      	mov	r1, r2
1a0019d4:	68d3      	ldr	r3, [r2, #12]
1a0019d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0019da:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a0019dc:	fa5f f389 	uxtb.w	r3, r9
1a0019e0:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0019e2:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0019e6:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0019e8:	68d3      	ldr	r3, [r2, #12]
1a0019ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0019ee:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0019f0:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0019f4:	b2db      	uxtb	r3, r3
1a0019f6:	f00b 020f 	and.w	r2, fp, #15
1a0019fa:	4313      	orrs	r3, r2
1a0019fc:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0019fe:	0933      	lsrs	r3, r6, #4
1a001a00:	fb0a f303 	mul.w	r3, sl, r3
1a001a04:	44da      	add	sl, fp
1a001a06:	fb09 f90a 	mul.w	r9, r9, sl
1a001a0a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a001a0e:	4648      	mov	r0, r9
1a001a10:	b003      	add	sp, #12
1a001a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001a16:	bf00      	nop
1a001a18:	1a003ec0 	.word	0x1a003ec0

1a001a1c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a001a1c:	4b03      	ldr	r3, [pc, #12]	; (1a001a2c <Chip_ADC_GetClockIndex+0x10>)
1a001a1e:	4298      	cmp	r0, r3
1a001a20:	d001      	beq.n	1a001a26 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a001a22:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a001a24:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a001a26:	2004      	movs	r0, #4
1a001a28:	4770      	bx	lr
1a001a2a:	bf00      	nop
1a001a2c:	400e4000 	.word	0x400e4000

1a001a30 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a001a30:	b570      	push	{r4, r5, r6, lr}
1a001a32:	460d      	mov	r5, r1
1a001a34:	4614      	mov	r4, r2
1a001a36:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001a38:	f7ff fff0 	bl	1a001a1c <Chip_ADC_GetClockIndex>
1a001a3c:	f000 fafc 	bl	1a002038 <Chip_Clock_GetRate>
	if (burstMode) {
1a001a40:	b155      	cbz	r5, 1a001a58 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a001a42:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001a46:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a001a4a:	0064      	lsls	r4, r4, #1
1a001a4c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001a50:	b2c0      	uxtb	r0, r0
1a001a52:	3801      	subs	r0, #1
	return div;
}
1a001a54:	b2c0      	uxtb	r0, r0
1a001a56:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a001a58:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001a5c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a001a60:	e7f1      	b.n	1a001a46 <getClkDiv+0x16>
1a001a62:	Address 0x000000001a001a62 is out of bounds.


1a001a64 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001a64:	b538      	push	{r3, r4, r5, lr}
1a001a66:	4605      	mov	r5, r0
1a001a68:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001a6a:	f7ff ffd7 	bl	1a001a1c <Chip_ADC_GetClockIndex>
1a001a6e:	2301      	movs	r3, #1
1a001a70:	461a      	mov	r2, r3
1a001a72:	4619      	mov	r1, r3
1a001a74:	f000 faa8 	bl	1a001fc8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001a78:	2100      	movs	r1, #0
1a001a7a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001a7c:	4a08      	ldr	r2, [pc, #32]	; (1a001aa0 <Chip_ADC_Init+0x3c>)
1a001a7e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001a80:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a001a82:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001a84:	230b      	movs	r3, #11
1a001a86:	4628      	mov	r0, r5
1a001a88:	f7ff ffd2 	bl	1a001a30 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001a8c:	0200      	lsls	r0, r0, #8
1a001a8e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001a92:	7920      	ldrb	r0, [r4, #4]
1a001a94:	0440      	lsls	r0, r0, #17
1a001a96:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001a9a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a001a9c:	6028      	str	r0, [r5, #0]
}
1a001a9e:	bd38      	pop	{r3, r4, r5, pc}
1a001aa0:	00061a80 	.word	0x00061a80

1a001aa4 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001aa4:	b570      	push	{r4, r5, r6, lr}
1a001aa6:	4605      	mov	r5, r0
1a001aa8:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001aaa:	6804      	ldr	r4, [r0, #0]
1a001aac:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001ab0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001ab4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001ab6:	790b      	ldrb	r3, [r1, #4]
1a001ab8:	f1c3 030b 	rsb	r3, r3, #11
1a001abc:	b2db      	uxtb	r3, r3
1a001abe:	7949      	ldrb	r1, [r1, #5]
1a001ac0:	f7ff ffb6 	bl	1a001a30 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001ac4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001ac8:	7933      	ldrb	r3, [r6, #4]
1a001aca:	045b      	lsls	r3, r3, #17
1a001acc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a001ad0:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a001ad2:	602b      	str	r3, [r5, #0]
}
1a001ad4:	bd70      	pop	{r4, r5, r6, pc}

1a001ad6 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001ad6:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001ad8:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001ada:	680a      	ldr	r2, [r1, #0]
1a001adc:	f7ff ffe2 	bl	1a001aa4 <Chip_ADC_SetSampleRate>
}
1a001ae0:	bd08      	pop	{r3, pc}
1a001ae2:	Address 0x000000001a001ae2 is out of bounds.


1a001ae4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001ae4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001ae6:	2069      	movs	r0, #105	; 0x69
1a001ae8:	f000 faa6 	bl	1a002038 <Chip_Clock_GetRate>
1a001aec:	4b01      	ldr	r3, [pc, #4]	; (1a001af4 <SystemCoreClockUpdate+0x10>)
1a001aee:	6018      	str	r0, [r3, #0]
}
1a001af0:	bd08      	pop	{r3, pc}
1a001af2:	bf00      	nop
1a001af4:	100006f0 	.word	0x100006f0

1a001af8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001af8:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001afa:	680b      	ldr	r3, [r1, #0]
1a001afc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001b00:	d002      	beq.n	1a001b08 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a001b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001b06:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001b08:	4607      	mov	r7, r0
1a001b0a:	2501      	movs	r5, #1
1a001b0c:	e03a      	b.n	1a001b84 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a001b0e:	694b      	ldr	r3, [r1, #20]
1a001b10:	fb03 f302 	mul.w	r3, r3, r2
1a001b14:	fbb3 f3f5 	udiv	r3, r3, r5
1a001b18:	e01c      	b.n	1a001b54 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a001b1a:	461c      	mov	r4, r3
	if (val < 0)
1a001b1c:	ebb0 0c04 	subs.w	ip, r0, r4
1a001b20:	d427      	bmi.n	1a001b72 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a001b22:	4567      	cmp	r7, ip
1a001b24:	d906      	bls.n	1a001b34 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a001b26:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001b28:	1c77      	adds	r7, r6, #1
1a001b2a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001b2c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a001b2e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a001b30:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a001b32:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a001b34:	3201      	adds	r2, #1
1a001b36:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a001b3a:	dc1d      	bgt.n	1a001b78 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a001b3c:	680c      	ldr	r4, [r1, #0]
1a001b3e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a001b42:	d0e4      	beq.n	1a001b0e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001b44:	1c73      	adds	r3, r6, #1
1a001b46:	fa02 fc03 	lsl.w	ip, r2, r3
1a001b4a:	694b      	ldr	r3, [r1, #20]
1a001b4c:	fb03 f30c 	mul.w	r3, r3, ip
1a001b50:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001b54:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a001b90 <pll_calc_divs+0x98>
1a001b58:	4563      	cmp	r3, ip
1a001b5a:	d9eb      	bls.n	1a001b34 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001b5c:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a001b94 <pll_calc_divs+0x9c>
1a001b60:	4563      	cmp	r3, ip
1a001b62:	d809      	bhi.n	1a001b78 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a001b64:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001b68:	d1d7      	bne.n	1a001b1a <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a001b6a:	1c74      	adds	r4, r6, #1
1a001b6c:	fa23 f404 	lsr.w	r4, r3, r4
1a001b70:	e7d4      	b.n	1a001b1c <pll_calc_divs+0x24>
		return -val;
1a001b72:	f1cc 0c00 	rsb	ip, ip, #0
1a001b76:	e7d4      	b.n	1a001b22 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a001b78:	3601      	adds	r6, #1
1a001b7a:	2e03      	cmp	r6, #3
1a001b7c:	dc01      	bgt.n	1a001b82 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a001b7e:	2201      	movs	r2, #1
1a001b80:	e7d9      	b.n	1a001b36 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a001b82:	3501      	adds	r5, #1
1a001b84:	2d04      	cmp	r5, #4
1a001b86:	dc01      	bgt.n	1a001b8c <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a001b88:	2600      	movs	r6, #0
1a001b8a:	e7f6      	b.n	1a001b7a <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a001b8c:	bcf0      	pop	{r4, r5, r6, r7}
1a001b8e:	4770      	bx	lr
1a001b90:	094c5eff 	.word	0x094c5eff
1a001b94:	1312d000 	.word	0x1312d000

1a001b98 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001b9a:	b099      	sub	sp, #100	; 0x64
1a001b9c:	4605      	mov	r5, r0
1a001b9e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001ba0:	225c      	movs	r2, #92	; 0x5c
1a001ba2:	2100      	movs	r1, #0
1a001ba4:	a801      	add	r0, sp, #4
1a001ba6:	f001 fb80 	bl	1a0032aa <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001baa:	2380      	movs	r3, #128	; 0x80
1a001bac:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001bae:	6963      	ldr	r3, [r4, #20]
1a001bb0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001bb2:	7923      	ldrb	r3, [r4, #4]
1a001bb4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001bb8:	4669      	mov	r1, sp
1a001bba:	4628      	mov	r0, r5
1a001bbc:	f7ff ff9c 	bl	1a001af8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001bc0:	9b06      	ldr	r3, [sp, #24]
1a001bc2:	42ab      	cmp	r3, r5
1a001bc4:	d027      	beq.n	1a001c16 <pll_get_frac+0x7e>
	if (val < 0)
1a001bc6:	1aeb      	subs	r3, r5, r3
1a001bc8:	d42e      	bmi.n	1a001c28 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001bca:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001bd2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001bd4:	6963      	ldr	r3, [r4, #20]
1a001bd6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001bd8:	7923      	ldrb	r3, [r4, #4]
1a001bda:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001bde:	a910      	add	r1, sp, #64	; 0x40
1a001be0:	4628      	mov	r0, r5
1a001be2:	f7ff ff89 	bl	1a001af8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001be6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001be8:	42ab      	cmp	r3, r5
1a001bea:	d01f      	beq.n	1a001c2c <pll_get_frac+0x94>
	if (val < 0)
1a001bec:	1aeb      	subs	r3, r5, r3
1a001bee:	d425      	bmi.n	1a001c3c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001bf0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a001bf2:	4b2b      	ldr	r3, [pc, #172]	; (1a001ca0 <pll_get_frac+0x108>)
1a001bf4:	429d      	cmp	r5, r3
1a001bf6:	d923      	bls.n	1a001c40 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a001bfa:	1aed      	subs	r5, r5, r3
1a001bfc:	d433      	bmi.n	1a001c66 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001bfe:	42ae      	cmp	r6, r5
1a001c00:	dc3b      	bgt.n	1a001c7a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a001c02:	42be      	cmp	r6, r7
1a001c04:	dc31      	bgt.n	1a001c6a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a001c06:	466d      	mov	r5, sp
1a001c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001c0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001c14:	e006      	b.n	1a001c24 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a001c16:	466d      	mov	r5, sp
1a001c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001c1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a001c24:	b019      	add	sp, #100	; 0x64
1a001c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001c28:	425b      	negs	r3, r3
1a001c2a:	e7ce      	b.n	1a001bca <pll_get_frac+0x32>
		*ppll = pll[2];
1a001c2c:	ad10      	add	r5, sp, #64	; 0x40
1a001c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001c32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001c3a:	e7f3      	b.n	1a001c24 <pll_get_frac+0x8c>
		return -val;
1a001c3c:	425b      	negs	r3, r3
1a001c3e:	e7d7      	b.n	1a001bf0 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001c40:	2340      	movs	r3, #64	; 0x40
1a001c42:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001c44:	6963      	ldr	r3, [r4, #20]
1a001c46:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001c48:	a908      	add	r1, sp, #32
1a001c4a:	4628      	mov	r0, r5
1a001c4c:	f7ff ff54 	bl	1a001af8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001c52:	42ab      	cmp	r3, r5
1a001c54:	d1d0      	bne.n	1a001bf8 <pll_get_frac+0x60>
			*ppll = pll[1];
1a001c56:	ad08      	add	r5, sp, #32
1a001c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001c5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001c64:	e7de      	b.n	1a001c24 <pll_get_frac+0x8c>
		return -val;
1a001c66:	426d      	negs	r5, r5
1a001c68:	e7c9      	b.n	1a001bfe <pll_get_frac+0x66>
			*ppll = pll[2];
1a001c6a:	ad10      	add	r5, sp, #64	; 0x40
1a001c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001c70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001c78:	e7d4      	b.n	1a001c24 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001c7a:	42af      	cmp	r7, r5
1a001c7c:	db07      	blt.n	1a001c8e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001c7e:	ad08      	add	r5, sp, #32
1a001c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001c84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001c88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001c8c:	e7ca      	b.n	1a001c24 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001c8e:	ad10      	add	r5, sp, #64	; 0x40
1a001c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001c94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001c9c:	e7c2      	b.n	1a001c24 <pll_get_frac+0x8c>
1a001c9e:	bf00      	nop
1a001ca0:	068e7780 	.word	0x068e7780

1a001ca4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001ca4:	b430      	push	{r4, r5}
1a001ca6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001ca8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001caa:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001cac:	e000      	b.n	1a001cb0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001cae:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001cb0:	281c      	cmp	r0, #28
1a001cb2:	d118      	bne.n	1a001ce6 <Chip_Clock_FindBaseClock+0x42>
1a001cb4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001cb8:	0051      	lsls	r1, r2, #1
1a001cba:	4a0c      	ldr	r2, [pc, #48]	; (1a001cec <Chip_Clock_FindBaseClock+0x48>)
1a001cbc:	440a      	add	r2, r1
1a001cbe:	7914      	ldrb	r4, [r2, #4]
1a001cc0:	4284      	cmp	r4, r0
1a001cc2:	d010      	beq.n	1a001ce6 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001cc4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001cc8:	004a      	lsls	r2, r1, #1
1a001cca:	4908      	ldr	r1, [pc, #32]	; (1a001cec <Chip_Clock_FindBaseClock+0x48>)
1a001ccc:	5a8a      	ldrh	r2, [r1, r2]
1a001cce:	42aa      	cmp	r2, r5
1a001cd0:	d8ed      	bhi.n	1a001cae <Chip_Clock_FindBaseClock+0xa>
1a001cd2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001cd6:	0051      	lsls	r1, r2, #1
1a001cd8:	4a04      	ldr	r2, [pc, #16]	; (1a001cec <Chip_Clock_FindBaseClock+0x48>)
1a001cda:	440a      	add	r2, r1
1a001cdc:	8852      	ldrh	r2, [r2, #2]
1a001cde:	42aa      	cmp	r2, r5
1a001ce0:	d3e5      	bcc.n	1a001cae <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a001ce2:	4620      	mov	r0, r4
1a001ce4:	e7e4      	b.n	1a001cb0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a001ce6:	bc30      	pop	{r4, r5}
1a001ce8:	4770      	bx	lr
1a001cea:	bf00      	nop
1a001cec:	1a003edc 	.word	0x1a003edc

1a001cf0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001cf0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001cf6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001cf8:	4a0d      	ldr	r2, [pc, #52]	; (1a001d30 <Chip_Clock_EnableCrystal+0x40>)
1a001cfa:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001cfc:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001d00:	6992      	ldr	r2, [r2, #24]
1a001d02:	428a      	cmp	r2, r1
1a001d04:	d001      	beq.n	1a001d0a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001d06:	4a0a      	ldr	r2, [pc, #40]	; (1a001d30 <Chip_Clock_EnableCrystal+0x40>)
1a001d08:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001d0a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001d0e:	4a09      	ldr	r2, [pc, #36]	; (1a001d34 <Chip_Clock_EnableCrystal+0x44>)
1a001d10:	6811      	ldr	r1, [r2, #0]
1a001d12:	4a09      	ldr	r2, [pc, #36]	; (1a001d38 <Chip_Clock_EnableCrystal+0x48>)
1a001d14:	4291      	cmp	r1, r2
1a001d16:	d901      	bls.n	1a001d1c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001d18:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001d1c:	4a04      	ldr	r2, [pc, #16]	; (1a001d30 <Chip_Clock_EnableCrystal+0x40>)
1a001d1e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001d20:	9b01      	ldr	r3, [sp, #4]
1a001d22:	1e5a      	subs	r2, r3, #1
1a001d24:	9201      	str	r2, [sp, #4]
1a001d26:	2b00      	cmp	r3, #0
1a001d28:	d1fa      	bne.n	1a001d20 <Chip_Clock_EnableCrystal+0x30>
}
1a001d2a:	b002      	add	sp, #8
1a001d2c:	4770      	bx	lr
1a001d2e:	bf00      	nop
1a001d30:	40050000 	.word	0x40050000
1a001d34:	1a003e44 	.word	0x1a003e44
1a001d38:	01312cff 	.word	0x01312cff

1a001d3c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001d3c:	3012      	adds	r0, #18
1a001d3e:	4b05      	ldr	r3, [pc, #20]	; (1a001d54 <Chip_Clock_GetDividerSource+0x18>)
1a001d40:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001d44:	f010 0f01 	tst.w	r0, #1
1a001d48:	d102      	bne.n	1a001d50 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001d4a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001d4e:	4770      	bx	lr
		return CLKINPUT_PD;
1a001d50:	2011      	movs	r0, #17
}
1a001d52:	4770      	bx	lr
1a001d54:	40050000 	.word	0x40050000

1a001d58 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001d58:	f100 0212 	add.w	r2, r0, #18
1a001d5c:	4b03      	ldr	r3, [pc, #12]	; (1a001d6c <Chip_Clock_GetDividerDivisor+0x14>)
1a001d5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001d62:	4b03      	ldr	r3, [pc, #12]	; (1a001d70 <Chip_Clock_GetDividerDivisor+0x18>)
1a001d64:	5c18      	ldrb	r0, [r3, r0]
}
1a001d66:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001d6a:	4770      	bx	lr
1a001d6c:	40050000 	.word	0x40050000
1a001d70:	1a003ed4 	.word	0x1a003ed4

1a001d74 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001d74:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001d76:	2810      	cmp	r0, #16
1a001d78:	d80a      	bhi.n	1a001d90 <Chip_Clock_GetClockInputHz+0x1c>
1a001d7a:	e8df f000 	tbb	[pc, r0]
1a001d7e:	0b44      	.short	0x0b44
1a001d80:	0921180d 	.word	0x0921180d
1a001d84:	2d2a2724 	.word	0x2d2a2724
1a001d88:	34300909 	.word	0x34300909
1a001d8c:	3c38      	.short	0x3c38
1a001d8e:	40          	.byte	0x40
1a001d8f:	00          	.byte	0x00
	uint32_t rate = 0;
1a001d90:	2000      	movs	r0, #0
1a001d92:	e03a      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001d94:	481e      	ldr	r0, [pc, #120]	; (1a001e10 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001d96:	e038      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001d98:	4b1e      	ldr	r3, [pc, #120]	; (1a001e14 <Chip_Clock_GetClockInputHz+0xa0>)
1a001d9a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001d9e:	f003 0307 	and.w	r3, r3, #7
1a001da2:	2b04      	cmp	r3, #4
1a001da4:	d001      	beq.n	1a001daa <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001da6:	481c      	ldr	r0, [pc, #112]	; (1a001e18 <Chip_Clock_GetClockInputHz+0xa4>)
1a001da8:	e02f      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a001daa:	2000      	movs	r0, #0
1a001dac:	e02d      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001dae:	4b19      	ldr	r3, [pc, #100]	; (1a001e14 <Chip_Clock_GetClockInputHz+0xa0>)
1a001db0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001db4:	f003 0307 	and.w	r3, r3, #7
1a001db8:	2b04      	cmp	r3, #4
1a001dba:	d027      	beq.n	1a001e0c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001dbc:	4816      	ldr	r0, [pc, #88]	; (1a001e18 <Chip_Clock_GetClockInputHz+0xa4>)
1a001dbe:	e024      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001dc0:	4b16      	ldr	r3, [pc, #88]	; (1a001e1c <Chip_Clock_GetClockInputHz+0xa8>)
1a001dc2:	6818      	ldr	r0, [r3, #0]
		break;
1a001dc4:	e021      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001dc6:	4b16      	ldr	r3, [pc, #88]	; (1a001e20 <Chip_Clock_GetClockInputHz+0xac>)
1a001dc8:	6818      	ldr	r0, [r3, #0]
		break;
1a001dca:	e01e      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001dcc:	4b15      	ldr	r3, [pc, #84]	; (1a001e24 <Chip_Clock_GetClockInputHz+0xb0>)
1a001dce:	6818      	ldr	r0, [r3, #0]
		break;
1a001dd0:	e01b      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001dd2:	4b14      	ldr	r3, [pc, #80]	; (1a001e24 <Chip_Clock_GetClockInputHz+0xb0>)
1a001dd4:	6858      	ldr	r0, [r3, #4]
		break;
1a001dd6:	e018      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001dd8:	f000 f868 	bl	1a001eac <Chip_Clock_GetMainPLLHz>
		break;
1a001ddc:	e015      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001dde:	2100      	movs	r1, #0
1a001de0:	f000 f89a 	bl	1a001f18 <Chip_Clock_GetDivRate>
		break;
1a001de4:	e011      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001de6:	2101      	movs	r1, #1
1a001de8:	f000 f896 	bl	1a001f18 <Chip_Clock_GetDivRate>
		break;
1a001dec:	e00d      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001dee:	2102      	movs	r1, #2
1a001df0:	f000 f892 	bl	1a001f18 <Chip_Clock_GetDivRate>
		break;
1a001df4:	e009      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001df6:	2103      	movs	r1, #3
1a001df8:	f000 f88e 	bl	1a001f18 <Chip_Clock_GetDivRate>
		break;
1a001dfc:	e005      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001dfe:	2104      	movs	r1, #4
1a001e00:	f000 f88a 	bl	1a001f18 <Chip_Clock_GetDivRate>
		break;
1a001e04:	e001      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a001e06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001e0a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001e0c:	4806      	ldr	r0, [pc, #24]	; (1a001e28 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001e0e:	e7fc      	b.n	1a001e0a <Chip_Clock_GetClockInputHz+0x96>
1a001e10:	00b71b00 	.word	0x00b71b00
1a001e14:	40043000 	.word	0x40043000
1a001e18:	017d7840 	.word	0x017d7840
1a001e1c:	1a003e18 	.word	0x1a003e18
1a001e20:	1a003e44 	.word	0x1a003e44
1a001e24:	10000598 	.word	0x10000598
1a001e28:	02faf080 	.word	0x02faf080

1a001e2c <Chip_Clock_CalcMainPLLValue>:
{
1a001e2c:	b538      	push	{r3, r4, r5, lr}
1a001e2e:	4605      	mov	r5, r0
1a001e30:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001e32:	7908      	ldrb	r0, [r1, #4]
1a001e34:	f7ff ff9e 	bl	1a001d74 <Chip_Clock_GetClockInputHz>
1a001e38:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001e3a:	4b19      	ldr	r3, [pc, #100]	; (1a001ea0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001e3c:	442b      	add	r3, r5
1a001e3e:	4a19      	ldr	r2, [pc, #100]	; (1a001ea4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001e40:	4293      	cmp	r3, r2
1a001e42:	d821      	bhi.n	1a001e88 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001e44:	b318      	cbz	r0, 1a001e8e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001e46:	2380      	movs	r3, #128	; 0x80
1a001e48:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001e4a:	2300      	movs	r3, #0
1a001e4c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001e4e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001e50:	fbb5 f3f0 	udiv	r3, r5, r0
1a001e54:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001e56:	4a14      	ldr	r2, [pc, #80]	; (1a001ea8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001e58:	4295      	cmp	r5, r2
1a001e5a:	d903      	bls.n	1a001e64 <Chip_Clock_CalcMainPLLValue+0x38>
1a001e5c:	fb03 f000 	mul.w	r0, r3, r0
1a001e60:	42a8      	cmp	r0, r5
1a001e62:	d007      	beq.n	1a001e74 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001e64:	4621      	mov	r1, r4
1a001e66:	4628      	mov	r0, r5
1a001e68:	f7ff fe96 	bl	1a001b98 <pll_get_frac>
		if (!ppll->nsel) {
1a001e6c:	68a3      	ldr	r3, [r4, #8]
1a001e6e:	b18b      	cbz	r3, 1a001e94 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001e70:	3b01      	subs	r3, #1
1a001e72:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001e74:	6923      	ldr	r3, [r4, #16]
1a001e76:	b183      	cbz	r3, 1a001e9a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001e78:	68e2      	ldr	r2, [r4, #12]
1a001e7a:	b10a      	cbz	r2, 1a001e80 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001e7c:	3a01      	subs	r2, #1
1a001e7e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001e80:	3b01      	subs	r3, #1
1a001e82:	6123      	str	r3, [r4, #16]
	return 0;
1a001e84:	2000      	movs	r0, #0
}
1a001e86:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001e8c:	e7fb      	b.n	1a001e86 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001e92:	e7f8      	b.n	1a001e86 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001e98:	e7f5      	b.n	1a001e86 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001e9e:	e7f2      	b.n	1a001e86 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001ea0:	ff6b3a10 	.word	0xff6b3a10
1a001ea4:	0b940510 	.word	0x0b940510
1a001ea8:	094c5eff 	.word	0x094c5eff

1a001eac <Chip_Clock_GetMainPLLHz>:
{
1a001eac:	b530      	push	{r4, r5, lr}
1a001eae:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001eb0:	4d17      	ldr	r5, [pc, #92]	; (1a001f10 <Chip_Clock_GetMainPLLHz+0x64>)
1a001eb2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001eb4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001eb8:	f7ff ff5c 	bl	1a001d74 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001ebc:	4b15      	ldr	r3, [pc, #84]	; (1a001f14 <Chip_Clock_GetMainPLLHz+0x68>)
1a001ebe:	681b      	ldr	r3, [r3, #0]
1a001ec0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001ec2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001ec4:	f013 0f01 	tst.w	r3, #1
1a001ec8:	d020      	beq.n	1a001f0c <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a001eca:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001ece:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001ed2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001ed6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001eda:	3301      	adds	r3, #1
	n = nsel + 1;
1a001edc:	3201      	adds	r2, #1
	p = ptab[psel];
1a001ede:	f10d 0c08 	add.w	ip, sp, #8
1a001ee2:	4461      	add	r1, ip
1a001ee4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001ee8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001eec:	d108      	bne.n	1a001f00 <Chip_Clock_GetMainPLLHz+0x54>
1a001eee:	b93d      	cbnz	r5, 1a001f00 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001ef0:	0049      	lsls	r1, r1, #1
1a001ef2:	fbb3 f3f1 	udiv	r3, r3, r1
1a001ef6:	fbb0 f0f2 	udiv	r0, r0, r2
1a001efa:	fb00 f003 	mul.w	r0, r0, r3
1a001efe:	e003      	b.n	1a001f08 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a001f00:	fbb0 f0f2 	udiv	r0, r0, r2
1a001f04:	fb03 f000 	mul.w	r0, r3, r0
}
1a001f08:	b003      	add	sp, #12
1a001f0a:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001f0c:	2000      	movs	r0, #0
1a001f0e:	e7fb      	b.n	1a001f08 <Chip_Clock_GetMainPLLHz+0x5c>
1a001f10:	40050000 	.word	0x40050000
1a001f14:	1a003ed0 	.word	0x1a003ed0

1a001f18 <Chip_Clock_GetDivRate>:
{
1a001f18:	b538      	push	{r3, r4, r5, lr}
1a001f1a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001f1c:	4608      	mov	r0, r1
1a001f1e:	f7ff ff0d 	bl	1a001d3c <Chip_Clock_GetDividerSource>
1a001f22:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001f24:	4620      	mov	r0, r4
1a001f26:	f7ff ff17 	bl	1a001d58 <Chip_Clock_GetDividerDivisor>
1a001f2a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001f2c:	4628      	mov	r0, r5
1a001f2e:	f7ff ff21 	bl	1a001d74 <Chip_Clock_GetClockInputHz>
1a001f32:	3401      	adds	r4, #1
}
1a001f34:	fbb0 f0f4 	udiv	r0, r0, r4
1a001f38:	bd38      	pop	{r3, r4, r5, pc}
1a001f3a:	Address 0x000000001a001f3a is out of bounds.


1a001f3c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001f3c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001f3e:	f100 0416 	add.w	r4, r0, #22
1a001f42:	00a4      	lsls	r4, r4, #2
1a001f44:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001f48:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001f4c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001f4e:	281b      	cmp	r0, #27
1a001f50:	d813      	bhi.n	1a001f7a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001f52:	2911      	cmp	r1, #17
1a001f54:	d01a      	beq.n	1a001f8c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001f56:	4d0e      	ldr	r5, [pc, #56]	; (1a001f90 <Chip_Clock_SetBaseClock+0x54>)
1a001f58:	4025      	ands	r5, r4

			if (autoblocken) {
1a001f5a:	b10a      	cbz	r2, 1a001f60 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001f5c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001f60:	b10b      	cbz	r3, 1a001f66 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001f62:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001f66:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001f6a:	3016      	adds	r0, #22
1a001f6c:	0080      	lsls	r0, r0, #2
1a001f6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001f72:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001f76:	6045      	str	r5, [r0, #4]
1a001f78:	e008      	b.n	1a001f8c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001f7a:	f044 0401 	orr.w	r4, r4, #1
1a001f7e:	3016      	adds	r0, #22
1a001f80:	0080      	lsls	r0, r0, #2
1a001f82:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001f86:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001f8a:	6044      	str	r4, [r0, #4]
	}
}
1a001f8c:	bc30      	pop	{r4, r5}
1a001f8e:	4770      	bx	lr
1a001f90:	e0fff7fe 	.word	0xe0fff7fe

1a001f94 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001f94:	281b      	cmp	r0, #27
1a001f96:	d80c      	bhi.n	1a001fb2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001f98:	3016      	adds	r0, #22
1a001f9a:	0080      	lsls	r0, r0, #2
1a001f9c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001fa0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001fa4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001fa6:	f010 0f01 	tst.w	r0, #1
1a001faa:	d104      	bne.n	1a001fb6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001fac:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001fb0:	4770      	bx	lr
		return CLKINPUT_PD;
1a001fb2:	2011      	movs	r0, #17
1a001fb4:	4770      	bx	lr
		return CLKINPUT_PD;
1a001fb6:	2011      	movs	r0, #17
}
1a001fb8:	4770      	bx	lr

1a001fba <Chip_Clock_GetBaseClocktHz>:
{
1a001fba:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001fbc:	f7ff ffea 	bl	1a001f94 <Chip_Clock_GetBaseClock>
1a001fc0:	f7ff fed8 	bl	1a001d74 <Chip_Clock_GetClockInputHz>
}
1a001fc4:	bd08      	pop	{r3, pc}
1a001fc6:	Address 0x000000001a001fc6 is out of bounds.


1a001fc8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001fc8:	b971      	cbnz	r1, 1a001fe8 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a001fca:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001fcc:	b10a      	cbz	r2, 1a001fd2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001fce:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001fd2:	2b02      	cmp	r3, #2
1a001fd4:	d00a      	beq.n	1a001fec <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001fd6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001fda:	d30a      	bcc.n	1a001ff2 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001fdc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001fe0:	4b06      	ldr	r3, [pc, #24]	; (1a001ffc <Chip_Clock_EnableOpts+0x34>)
1a001fe2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001fe6:	4770      	bx	lr
		reg |= (1 << 1);
1a001fe8:	2103      	movs	r1, #3
1a001fea:	e7ef      	b.n	1a001fcc <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001fec:	f041 0120 	orr.w	r1, r1, #32
1a001ff0:	e7f1      	b.n	1a001fd6 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001ff2:	3020      	adds	r0, #32
1a001ff4:	4b02      	ldr	r3, [pc, #8]	; (1a002000 <Chip_Clock_EnableOpts+0x38>)
1a001ff6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001ffa:	4770      	bx	lr
1a001ffc:	40052000 	.word	0x40052000
1a002000:	40051000 	.word	0x40051000

1a002004 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002004:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002008:	d309      	bcc.n	1a00201e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00200a:	4a09      	ldr	r2, [pc, #36]	; (1a002030 <Chip_Clock_Enable+0x2c>)
1a00200c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002010:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002014:	f043 0301 	orr.w	r3, r3, #1
1a002018:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00201c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00201e:	4a05      	ldr	r2, [pc, #20]	; (1a002034 <Chip_Clock_Enable+0x30>)
1a002020:	3020      	adds	r0, #32
1a002022:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002026:	f043 0301 	orr.w	r3, r3, #1
1a00202a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00202e:	4770      	bx	lr
1a002030:	40052000 	.word	0x40052000
1a002034:	40051000 	.word	0x40051000

1a002038 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002038:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00203a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00203e:	d309      	bcc.n	1a002054 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002040:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002044:	4a0d      	ldr	r2, [pc, #52]	; (1a00207c <Chip_Clock_GetRate+0x44>)
1a002046:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00204a:	f014 0f01 	tst.w	r4, #1
1a00204e:	d107      	bne.n	1a002060 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002050:	2000      	movs	r0, #0
	}

	return rate;
}
1a002052:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002054:	f100 0320 	add.w	r3, r0, #32
1a002058:	4a09      	ldr	r2, [pc, #36]	; (1a002080 <Chip_Clock_GetRate+0x48>)
1a00205a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00205e:	e7f4      	b.n	1a00204a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002060:	f7ff fe20 	bl	1a001ca4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002064:	f7ff ffa9 	bl	1a001fba <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002068:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00206c:	d103      	bne.n	1a002076 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00206e:	2301      	movs	r3, #1
		rate = rate / div;
1a002070:	fbb0 f0f3 	udiv	r0, r0, r3
1a002074:	e7ed      	b.n	1a002052 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002076:	2302      	movs	r3, #2
1a002078:	e7fa      	b.n	1a002070 <Chip_Clock_GetRate+0x38>
1a00207a:	bf00      	nop
1a00207c:	40052000 	.word	0x40052000
1a002080:	40051000 	.word	0x40051000

1a002084 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002084:	4770      	bx	lr
1a002086:	Address 0x000000001a002086 is out of bounds.


1a002088 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002088:	b570      	push	{r4, r5, r6, lr}
1a00208a:	b08a      	sub	sp, #40	; 0x28
1a00208c:	4605      	mov	r5, r0
1a00208e:	460e      	mov	r6, r1
1a002090:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002092:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002096:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002098:	2806      	cmp	r0, #6
1a00209a:	d018      	beq.n	1a0020ce <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00209c:	2300      	movs	r3, #0
1a00209e:	2201      	movs	r2, #1
1a0020a0:	4629      	mov	r1, r5
1a0020a2:	2004      	movs	r0, #4
1a0020a4:	f7ff ff4a 	bl	1a001f3c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0020a8:	4a4a      	ldr	r2, [pc, #296]	; (1a0021d4 <Chip_SetupCoreClock+0x14c>)
1a0020aa:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0020ac:	f043 0301 	orr.w	r3, r3, #1
1a0020b0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0020b2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0020b6:	a901      	add	r1, sp, #4
1a0020b8:	4630      	mov	r0, r6
1a0020ba:	f7ff feb7 	bl	1a001e2c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0020be:	4b46      	ldr	r3, [pc, #280]	; (1a0021d8 <Chip_SetupCoreClock+0x150>)
1a0020c0:	429e      	cmp	r6, r3
1a0020c2:	d916      	bls.n	1a0020f2 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0020c4:	9b01      	ldr	r3, [sp, #4]
1a0020c6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0020ca:	d003      	beq.n	1a0020d4 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0020cc:	e7fe      	b.n	1a0020cc <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0020ce:	f7ff fe0f 	bl	1a001cf0 <Chip_Clock_EnableCrystal>
1a0020d2:	e7e3      	b.n	1a00209c <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0020d4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0020d8:	d005      	beq.n	1a0020e6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0020da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0020de:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0020e0:	2500      	movs	r5, #0
			direct = 1;
1a0020e2:	2601      	movs	r6, #1
1a0020e4:	e007      	b.n	1a0020f6 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0020e6:	9b04      	ldr	r3, [sp, #16]
1a0020e8:	3301      	adds	r3, #1
1a0020ea:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0020ec:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0020ee:	2600      	movs	r6, #0
1a0020f0:	e001      	b.n	1a0020f6 <Chip_SetupCoreClock+0x6e>
1a0020f2:	2500      	movs	r5, #0
1a0020f4:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0020f6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0020fa:	9b01      	ldr	r3, [sp, #4]
1a0020fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002100:	9a05      	ldr	r2, [sp, #20]
1a002102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002106:	9a03      	ldr	r2, [sp, #12]
1a002108:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00210c:	9a04      	ldr	r2, [sp, #16]
1a00210e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002112:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002116:	4a2f      	ldr	r2, [pc, #188]	; (1a0021d4 <Chip_SetupCoreClock+0x14c>)
1a002118:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00211a:	4b2e      	ldr	r3, [pc, #184]	; (1a0021d4 <Chip_SetupCoreClock+0x14c>)
1a00211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00211e:	f013 0f01 	tst.w	r3, #1
1a002122:	d0fa      	beq.n	1a00211a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002124:	2300      	movs	r3, #0
1a002126:	2201      	movs	r2, #1
1a002128:	2109      	movs	r1, #9
1a00212a:	2004      	movs	r0, #4
1a00212c:	f7ff ff06 	bl	1a001f3c <Chip_Clock_SetBaseClock>

	if (direct) {
1a002130:	b306      	cbz	r6, 1a002174 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002132:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002136:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002138:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00213a:	1e5a      	subs	r2, r3, #1
1a00213c:	9209      	str	r2, [sp, #36]	; 0x24
1a00213e:	2b00      	cmp	r3, #0
1a002140:	d1fa      	bne.n	1a002138 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002142:	9b01      	ldr	r3, [sp, #4]
1a002144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002148:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00214a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00214e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002152:	9a05      	ldr	r2, [sp, #20]
1a002154:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002158:	9a03      	ldr	r2, [sp, #12]
1a00215a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00215e:	9a04      	ldr	r2, [sp, #16]
1a002160:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002164:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002168:	4a1a      	ldr	r2, [pc, #104]	; (1a0021d4 <Chip_SetupCoreClock+0x14c>)
1a00216a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00216c:	2c00      	cmp	r4, #0
1a00216e:	d12e      	bne.n	1a0021ce <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002170:	b00a      	add	sp, #40	; 0x28
1a002172:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a002174:	2d00      	cmp	r5, #0
1a002176:	d0f9      	beq.n	1a00216c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002178:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00217c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00217e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002180:	1e5a      	subs	r2, r3, #1
1a002182:	9209      	str	r2, [sp, #36]	; 0x24
1a002184:	2b00      	cmp	r3, #0
1a002186:	d1fa      	bne.n	1a00217e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a002188:	9b04      	ldr	r3, [sp, #16]
1a00218a:	1e5a      	subs	r2, r3, #1
1a00218c:	9204      	str	r2, [sp, #16]
1a00218e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002192:	9b01      	ldr	r3, [sp, #4]
1a002194:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a002198:	9905      	ldr	r1, [sp, #20]
1a00219a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00219e:	9903      	ldr	r1, [sp, #12]
1a0021a0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0021a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0021a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0021ac:	4a09      	ldr	r2, [pc, #36]	; (1a0021d4 <Chip_SetupCoreClock+0x14c>)
1a0021ae:	6453      	str	r3, [r2, #68]	; 0x44
1a0021b0:	e7dc      	b.n	1a00216c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0021b2:	480a      	ldr	r0, [pc, #40]	; (1a0021dc <Chip_SetupCoreClock+0x154>)
1a0021b4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0021b8:	78cb      	ldrb	r3, [r1, #3]
1a0021ba:	788a      	ldrb	r2, [r1, #2]
1a0021bc:	7849      	ldrb	r1, [r1, #1]
1a0021be:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0021c2:	f7ff febb 	bl	1a001f3c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0021c6:	3401      	adds	r4, #1
1a0021c8:	2c11      	cmp	r4, #17
1a0021ca:	d9f2      	bls.n	1a0021b2 <Chip_SetupCoreClock+0x12a>
1a0021cc:	e7d0      	b.n	1a002170 <Chip_SetupCoreClock+0xe8>
1a0021ce:	2400      	movs	r4, #0
1a0021d0:	e7fa      	b.n	1a0021c8 <Chip_SetupCoreClock+0x140>
1a0021d2:	bf00      	nop
1a0021d4:	40050000 	.word	0x40050000
1a0021d8:	068e7780 	.word	0x068e7780
1a0021dc:	1a003f48 	.word	0x1a003f48

1a0021e0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0021e0:	4b03      	ldr	r3, [pc, #12]	; (1a0021f0 <Chip_SSP_GetClockIndex+0x10>)
1a0021e2:	4298      	cmp	r0, r3
1a0021e4:	d001      	beq.n	1a0021ea <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0021e6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0021e8:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0021ea:	20a5      	movs	r0, #165	; 0xa5
1a0021ec:	4770      	bx	lr
1a0021ee:	bf00      	nop
1a0021f0:	400c5000 	.word	0x400c5000

1a0021f4 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0021f4:	4b04      	ldr	r3, [pc, #16]	; (1a002208 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0021f6:	4298      	cmp	r0, r3
1a0021f8:	d002      	beq.n	1a002200 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0021fa:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0021fe:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a002200:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a002204:	4770      	bx	lr
1a002206:	bf00      	nop
1a002208:	400c5000 	.word	0x400c5000

1a00220c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00220c:	6803      	ldr	r3, [r0, #0]
1a00220e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a002212:	0209      	lsls	r1, r1, #8
1a002214:	b289      	uxth	r1, r1
1a002216:	4319      	orrs	r1, r3
1a002218:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00221a:	6102      	str	r2, [r0, #16]
}
1a00221c:	4770      	bx	lr

1a00221e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00221e:	b570      	push	{r4, r5, r6, lr}
1a002220:	4606      	mov	r6, r0
1a002222:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002224:	f7ff ffe6 	bl	1a0021f4 <Chip_SSP_GetPeriphClockIndex>
1a002228:	f7ff ff06 	bl	1a002038 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00222c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00222e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a002232:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a002234:	e000      	b.n	1a002238 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a002236:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a002238:	42ab      	cmp	r3, r5
1a00223a:	d90b      	bls.n	1a002254 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00223c:	1c4c      	adds	r4, r1, #1
1a00223e:	fb02 f304 	mul.w	r3, r2, r4
1a002242:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a002246:	429d      	cmp	r5, r3
1a002248:	d2f6      	bcs.n	1a002238 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00224a:	2cff      	cmp	r4, #255	; 0xff
1a00224c:	d9f3      	bls.n	1a002236 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00224e:	3202      	adds	r2, #2
				cr0_div = 0;
1a002250:	2100      	movs	r1, #0
1a002252:	e7f1      	b.n	1a002238 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a002254:	4630      	mov	r0, r6
1a002256:	f7ff ffd9 	bl	1a00220c <Chip_SSP_SetClockRate>
}
1a00225a:	bd70      	pop	{r4, r5, r6, pc}

1a00225c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a00225c:	b510      	push	{r4, lr}
1a00225e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002260:	f7ff ffbe 	bl	1a0021e0 <Chip_SSP_GetClockIndex>
1a002264:	f7ff fece 	bl	1a002004 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002268:	4620      	mov	r0, r4
1a00226a:	f7ff ffc3 	bl	1a0021f4 <Chip_SSP_GetPeriphClockIndex>
1a00226e:	f7ff fec9 	bl	1a002004 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002272:	6863      	ldr	r3, [r4, #4]
1a002274:	f023 0304 	bic.w	r3, r3, #4
1a002278:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00227a:	6823      	ldr	r3, [r4, #0]
1a00227c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002280:	f043 0307 	orr.w	r3, r3, #7
1a002284:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002286:	4902      	ldr	r1, [pc, #8]	; (1a002290 <Chip_SSP_Init+0x34>)
1a002288:	4620      	mov	r0, r4
1a00228a:	f7ff ffc8 	bl	1a00221e <Chip_SSP_SetBitRate>
}
1a00228e:	bd10      	pop	{r4, pc}
1a002290:	000186a0 	.word	0x000186a0

1a002294 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002294:	2901      	cmp	r1, #1
1a002296:	d109      	bne.n	1a0022ac <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002298:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00229c:	0082      	lsls	r2, r0, #2
1a00229e:	4b04      	ldr	r3, [pc, #16]	; (1a0022b0 <Chip_I2C_EventHandler+0x1c>)
1a0022a0:	4413      	add	r3, r2
1a0022a2:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0022a4:	7d13      	ldrb	r3, [r2, #20]
1a0022a6:	b2db      	uxtb	r3, r3
1a0022a8:	2b04      	cmp	r3, #4
1a0022aa:	d0fb      	beq.n	1a0022a4 <Chip_I2C_EventHandler+0x10>
}
1a0022ac:	4770      	bx	lr
1a0022ae:	bf00      	nop
1a0022b0:	10000000 	.word	0x10000000

1a0022b4 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0022b4:	b570      	push	{r4, r5, r6, lr}
1a0022b6:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0022b8:	4e06      	ldr	r6, [pc, #24]	; (1a0022d4 <Chip_I2C_Init+0x20>)
1a0022ba:	00c4      	lsls	r4, r0, #3
1a0022bc:	1a22      	subs	r2, r4, r0
1a0022be:	0093      	lsls	r3, r2, #2
1a0022c0:	4433      	add	r3, r6
1a0022c2:	8898      	ldrh	r0, [r3, #4]
1a0022c4:	f7ff fe9e 	bl	1a002004 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0022c8:	1b64      	subs	r4, r4, r5
1a0022ca:	00a3      	lsls	r3, r4, #2
1a0022cc:	58f3      	ldr	r3, [r6, r3]
1a0022ce:	226c      	movs	r2, #108	; 0x6c
1a0022d0:	619a      	str	r2, [r3, #24]
}
1a0022d2:	bd70      	pop	{r4, r5, r6, pc}
1a0022d4:	10000000 	.word	0x10000000

1a0022d8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0022d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0022dc:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0022de:	4e0b      	ldr	r6, [pc, #44]	; (1a00230c <Chip_I2C_SetClockRate+0x34>)
1a0022e0:	00c5      	lsls	r5, r0, #3
1a0022e2:	1a2b      	subs	r3, r5, r0
1a0022e4:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0022e8:	eb06 0308 	add.w	r3, r6, r8
1a0022ec:	8898      	ldrh	r0, [r3, #4]
1a0022ee:	f7ff fea3 	bl	1a002038 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0022f2:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0022f6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0022fa:	0842      	lsrs	r2, r0, #1
1a0022fc:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0022fe:	f856 3008 	ldr.w	r3, [r6, r8]
1a002302:	691a      	ldr	r2, [r3, #16]
1a002304:	1a80      	subs	r0, r0, r2
1a002306:	6158      	str	r0, [r3, #20]
}
1a002308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00230c:	10000000 	.word	0x10000000

1a002310 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a002310:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a002312:	4a0b      	ldr	r2, [pc, #44]	; (1a002340 <SystemInit+0x30>)
1a002314:	4b0b      	ldr	r3, [pc, #44]	; (1a002344 <SystemInit+0x34>)
1a002316:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a002318:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a00231c:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00231e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a002322:	2b20      	cmp	r3, #32
1a002324:	d004      	beq.n	1a002330 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a002326:	f7ff faa5 	bl	1a001874 <Board_SystemInit>
   Board_Init();
1a00232a:	f7ff fa2b 	bl	1a001784 <Board_Init>
#endif
}
1a00232e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a002330:	4a04      	ldr	r2, [pc, #16]	; (1a002344 <SystemInit+0x34>)
1a002332:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a002336:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00233a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00233e:	e7f2      	b.n	1a002326 <SystemInit+0x16>
1a002340:	1a000000 	.word	0x1a000000
1a002344:	e000ed00 	.word	0xe000ed00

1a002348 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002348:	4b04      	ldr	r3, [pc, #16]	; (1a00235c <cyclesCounterInit+0x14>)
1a00234a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a00234c:	4a04      	ldr	r2, [pc, #16]	; (1a002360 <cyclesCounterInit+0x18>)
1a00234e:	6813      	ldr	r3, [r2, #0]
1a002350:	f043 0301 	orr.w	r3, r3, #1
1a002354:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002356:	2001      	movs	r0, #1
1a002358:	4770      	bx	lr
1a00235a:	bf00      	nop
1a00235c:	10000038 	.word	0x10000038
1a002360:	e0001000 	.word	0xe0001000

1a002364 <uartProcessIRQ>:
{
1a002364:	b570      	push	{r4, r5, r6, lr}
1a002366:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a002368:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a00236c:	0093      	lsls	r3, r2, #2
1a00236e:	4a22      	ldr	r2, [pc, #136]	; (1a0023f8 <uartProcessIRQ+0x94>)
1a002370:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a002372:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a002374:	b2ed      	uxtb	r5, r5
1a002376:	f015 0f01 	tst.w	r5, #1
1a00237a:	d00a      	beq.n	1a002392 <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a00237c:	b928      	cbnz	r0, 1a00238a <uartProcessIRQ+0x26>
1a00237e:	4b1f      	ldr	r3, [pc, #124]	; (1a0023fc <uartProcessIRQ+0x98>)
1a002380:	681b      	ldr	r3, [r3, #0]
1a002382:	b113      	cbz	r3, 1a00238a <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a002384:	4a1e      	ldr	r2, [pc, #120]	; (1a002400 <uartProcessIRQ+0x9c>)
1a002386:	6810      	ldr	r0, [r2, #0]
1a002388:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a00238a:	2c03      	cmp	r4, #3
1a00238c:	d014      	beq.n	1a0023b8 <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a00238e:	2c05      	cmp	r4, #5
1a002390:	d01a      	beq.n	1a0023c8 <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a002392:	f015 0f20 	tst.w	r5, #32
1a002396:	d00e      	beq.n	1a0023b6 <uartProcessIRQ+0x52>
	return pUART->IER;
1a002398:	6873      	ldr	r3, [r6, #4]
1a00239a:	f013 0f02 	tst.w	r3, #2
1a00239e:	d00a      	beq.n	1a0023b6 <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0023a0:	b92c      	cbnz	r4, 1a0023ae <uartProcessIRQ+0x4a>
1a0023a2:	4b18      	ldr	r3, [pc, #96]	; (1a002404 <uartProcessIRQ+0xa0>)
1a0023a4:	681b      	ldr	r3, [r3, #0]
1a0023a6:	b113      	cbz	r3, 1a0023ae <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a0023a8:	4a17      	ldr	r2, [pc, #92]	; (1a002408 <uartProcessIRQ+0xa4>)
1a0023aa:	6810      	ldr	r0, [r2, #0]
1a0023ac:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0023ae:	2c03      	cmp	r4, #3
1a0023b0:	d012      	beq.n	1a0023d8 <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0023b2:	2c05      	cmp	r4, #5
1a0023b4:	d018      	beq.n	1a0023e8 <uartProcessIRQ+0x84>
}
1a0023b6:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0023b8:	4b14      	ldr	r3, [pc, #80]	; (1a00240c <uartProcessIRQ+0xa8>)
1a0023ba:	681b      	ldr	r3, [r3, #0]
1a0023bc:	2b00      	cmp	r3, #0
1a0023be:	d0e6      	beq.n	1a00238e <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a0023c0:	4a13      	ldr	r2, [pc, #76]	; (1a002410 <uartProcessIRQ+0xac>)
1a0023c2:	6810      	ldr	r0, [r2, #0]
1a0023c4:	4798      	blx	r3
1a0023c6:	e7e2      	b.n	1a00238e <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0023c8:	4b12      	ldr	r3, [pc, #72]	; (1a002414 <uartProcessIRQ+0xb0>)
1a0023ca:	681b      	ldr	r3, [r3, #0]
1a0023cc:	2b00      	cmp	r3, #0
1a0023ce:	d0e0      	beq.n	1a002392 <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a0023d0:	4a11      	ldr	r2, [pc, #68]	; (1a002418 <uartProcessIRQ+0xb4>)
1a0023d2:	6810      	ldr	r0, [r2, #0]
1a0023d4:	4798      	blx	r3
1a0023d6:	e7dc      	b.n	1a002392 <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0023d8:	4b10      	ldr	r3, [pc, #64]	; (1a00241c <uartProcessIRQ+0xb8>)
1a0023da:	681b      	ldr	r3, [r3, #0]
1a0023dc:	2b00      	cmp	r3, #0
1a0023de:	d0e8      	beq.n	1a0023b2 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a0023e0:	4a0f      	ldr	r2, [pc, #60]	; (1a002420 <uartProcessIRQ+0xbc>)
1a0023e2:	6810      	ldr	r0, [r2, #0]
1a0023e4:	4798      	blx	r3
1a0023e6:	e7e4      	b.n	1a0023b2 <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0023e8:	4b0e      	ldr	r3, [pc, #56]	; (1a002424 <uartProcessIRQ+0xc0>)
1a0023ea:	681b      	ldr	r3, [r3, #0]
1a0023ec:	2b00      	cmp	r3, #0
1a0023ee:	d0e2      	beq.n	1a0023b6 <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a0023f0:	4a0d      	ldr	r2, [pc, #52]	; (1a002428 <uartProcessIRQ+0xc4>)
1a0023f2:	6810      	ldr	r0, [r2, #0]
1a0023f4:	4798      	blx	r3
}
1a0023f6:	e7de      	b.n	1a0023b6 <uartProcessIRQ+0x52>
1a0023f8:	1a003f90 	.word	0x1a003f90
1a0023fc:	100005a0 	.word	0x100005a0
1a002400:	100005a4 	.word	0x100005a4
1a002404:	100005b8 	.word	0x100005b8
1a002408:	100005bc 	.word	0x100005bc
1a00240c:	100005a8 	.word	0x100005a8
1a002410:	100005ac 	.word	0x100005ac
1a002414:	100005b0 	.word	0x100005b0
1a002418:	100005b4 	.word	0x100005b4
1a00241c:	100005c0 	.word	0x100005c0
1a002420:	100005c4 	.word	0x100005c4
1a002424:	100005c8 	.word	0x100005c8
1a002428:	100005cc 	.word	0x100005cc

1a00242c <uartInterrupt>:
   if( enable ) {
1a00242c:	b341      	cbz	r1, 1a002480 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a00242e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a002432:	009a      	lsls	r2, r3, #2
1a002434:	4b1e      	ldr	r3, [pc, #120]	; (1a0024b0 <uartInterrupt+0x84>)
1a002436:	4413      	add	r3, r2
1a002438:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a00243c:	2b00      	cmp	r3, #0
1a00243e:	db18      	blt.n	1a002472 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a002440:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a002444:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a002448:	22a0      	movs	r2, #160	; 0xa0
1a00244a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a00244e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002452:	0082      	lsls	r2, r0, #2
1a002454:	4b16      	ldr	r3, [pc, #88]	; (1a0024b0 <uartInterrupt+0x84>)
1a002456:	4413      	add	r3, r2
1a002458:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a00245c:	2b00      	cmp	r3, #0
1a00245e:	db25      	blt.n	1a0024ac <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002460:	f003 011f 	and.w	r1, r3, #31
1a002464:	095b      	lsrs	r3, r3, #5
1a002466:	2201      	movs	r2, #1
1a002468:	408a      	lsls	r2, r1
1a00246a:	4912      	ldr	r1, [pc, #72]	; (1a0024b4 <uartInterrupt+0x88>)
1a00246c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a002470:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a002472:	f003 030f 	and.w	r3, r3, #15
1a002476:	4a10      	ldr	r2, [pc, #64]	; (1a0024b8 <uartInterrupt+0x8c>)
1a002478:	441a      	add	r2, r3
1a00247a:	23a0      	movs	r3, #160	; 0xa0
1a00247c:	7613      	strb	r3, [r2, #24]
1a00247e:	e7e6      	b.n	1a00244e <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a002480:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002484:	0082      	lsls	r2, r0, #2
1a002486:	4b0a      	ldr	r3, [pc, #40]	; (1a0024b0 <uartInterrupt+0x84>)
1a002488:	4413      	add	r3, r2
1a00248a:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a00248e:	2b00      	cmp	r3, #0
1a002490:	db0c      	blt.n	1a0024ac <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002492:	f003 011f 	and.w	r1, r3, #31
1a002496:	095b      	lsrs	r3, r3, #5
1a002498:	2201      	movs	r2, #1
1a00249a:	408a      	lsls	r2, r1
1a00249c:	3320      	adds	r3, #32
1a00249e:	4905      	ldr	r1, [pc, #20]	; (1a0024b4 <uartInterrupt+0x88>)
1a0024a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a0024a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0024a8:	f3bf 8f6f 	isb	sy
}
1a0024ac:	4770      	bx	lr
1a0024ae:	bf00      	nop
1a0024b0:	1a003f90 	.word	0x1a003f90
1a0024b4:	e000e100 	.word	0xe000e100
1a0024b8:	e000ecfc 	.word	0xe000ecfc

1a0024bc <uartCallbackSet>:
{   
1a0024bc:	b410      	push	{r4}
   switch(event){
1a0024be:	b161      	cbz	r1, 1a0024da <uartCallbackSet+0x1e>
1a0024c0:	2901      	cmp	r1, #1
1a0024c2:	d11c      	bne.n	1a0024fe <uartCallbackSet+0x42>
         if( callbackFunc != 0 ) {
1a0024c4:	b1da      	cbz	r2, 1a0024fe <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0024c6:	2801      	cmp	r0, #1
1a0024c8:	d92c      	bls.n	1a002524 <uartCallbackSet+0x68>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0024ca:	1ec1      	subs	r1, r0, #3
1a0024cc:	b2c9      	uxtb	r1, r1
1a0024ce:	2901      	cmp	r1, #1
1a0024d0:	d92d      	bls.n	1a00252e <uartCallbackSet+0x72>
            if( uart == UART_232 ){
1a0024d2:	2805      	cmp	r0, #5
1a0024d4:	d030      	beq.n	1a002538 <uartCallbackSet+0x7c>
         intMask = UART_IER_THREINT;
1a0024d6:	2302      	movs	r3, #2
1a0024d8:	e009      	b.n	1a0024ee <uartCallbackSet+0x32>
         if( callbackFunc != 0 ) {
1a0024da:	b182      	cbz	r2, 1a0024fe <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0024dc:	2801      	cmp	r0, #1
1a0024de:	d911      	bls.n	1a002504 <uartCallbackSet+0x48>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0024e0:	1ec1      	subs	r1, r0, #3
1a0024e2:	b2c9      	uxtb	r1, r1
1a0024e4:	2901      	cmp	r1, #1
1a0024e6:	d912      	bls.n	1a00250e <uartCallbackSet+0x52>
            if( uart == UART_232 ){
1a0024e8:	2805      	cmp	r0, #5
1a0024ea:	d015      	beq.n	1a002518 <uartCallbackSet+0x5c>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0024ec:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a0024ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0024f2:	0082      	lsls	r2, r0, #2
1a0024f4:	4913      	ldr	r1, [pc, #76]	; (1a002544 <uartCallbackSet+0x88>)
1a0024f6:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a0024f8:	6851      	ldr	r1, [r2, #4]
1a0024fa:	430b      	orrs	r3, r1
1a0024fc:	6053      	str	r3, [r2, #4]
}
1a0024fe:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002502:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a002504:	4910      	ldr	r1, [pc, #64]	; (1a002548 <uartCallbackSet+0x8c>)
1a002506:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a002508:	4910      	ldr	r1, [pc, #64]	; (1a00254c <uartCallbackSet+0x90>)
1a00250a:	600b      	str	r3, [r1, #0]
1a00250c:	e7e8      	b.n	1a0024e0 <uartCallbackSet+0x24>
               rxIsrCallbackUART2 = callbackFunc;
1a00250e:	4910      	ldr	r1, [pc, #64]	; (1a002550 <uartCallbackSet+0x94>)
1a002510:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a002512:	4910      	ldr	r1, [pc, #64]	; (1a002554 <uartCallbackSet+0x98>)
1a002514:	600b      	str	r3, [r1, #0]
1a002516:	e7e7      	b.n	1a0024e8 <uartCallbackSet+0x2c>
               rxIsrCallbackUART3 = callbackFunc;
1a002518:	490f      	ldr	r1, [pc, #60]	; (1a002558 <uartCallbackSet+0x9c>)
1a00251a:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART3Params = callbackParam;
1a00251c:	4a0f      	ldr	r2, [pc, #60]	; (1a00255c <uartCallbackSet+0xa0>)
1a00251e:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a002520:	2305      	movs	r3, #5
1a002522:	e7e4      	b.n	1a0024ee <uartCallbackSet+0x32>
               txIsrCallbackUART0 = callbackFunc;
1a002524:	490e      	ldr	r1, [pc, #56]	; (1a002560 <uartCallbackSet+0xa4>)
1a002526:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART0Params = callbackParam;
1a002528:	490e      	ldr	r1, [pc, #56]	; (1a002564 <uartCallbackSet+0xa8>)
1a00252a:	600b      	str	r3, [r1, #0]
1a00252c:	e7cd      	b.n	1a0024ca <uartCallbackSet+0xe>
               txIsrCallbackUART2 = callbackFunc;
1a00252e:	490e      	ldr	r1, [pc, #56]	; (1a002568 <uartCallbackSet+0xac>)
1a002530:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART2Params = callbackParam;
1a002532:	490e      	ldr	r1, [pc, #56]	; (1a00256c <uartCallbackSet+0xb0>)
1a002534:	600b      	str	r3, [r1, #0]
1a002536:	e7cc      	b.n	1a0024d2 <uartCallbackSet+0x16>
               txIsrCallbackUART3 = callbackFunc;
1a002538:	490d      	ldr	r1, [pc, #52]	; (1a002570 <uartCallbackSet+0xb4>)
1a00253a:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART3Params = callbackParam;
1a00253c:	4a0d      	ldr	r2, [pc, #52]	; (1a002574 <uartCallbackSet+0xb8>)
1a00253e:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_THREINT;
1a002540:	2302      	movs	r3, #2
1a002542:	e7d4      	b.n	1a0024ee <uartCallbackSet+0x32>
1a002544:	1a003f90 	.word	0x1a003f90
1a002548:	100005a0 	.word	0x100005a0
1a00254c:	100005a4 	.word	0x100005a4
1a002550:	100005a8 	.word	0x100005a8
1a002554:	100005ac 	.word	0x100005ac
1a002558:	100005b0 	.word	0x100005b0
1a00255c:	100005b4 	.word	0x100005b4
1a002560:	100005b8 	.word	0x100005b8
1a002564:	100005bc 	.word	0x100005bc
1a002568:	100005c0 	.word	0x100005c0
1a00256c:	100005c4 	.word	0x100005c4
1a002570:	100005c8 	.word	0x100005c8
1a002574:	100005cc 	.word	0x100005cc

1a002578 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a002578:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00257c:	0083      	lsls	r3, r0, #2
1a00257e:	4a03      	ldr	r2, [pc, #12]	; (1a00258c <uartTxReady+0x14>)
1a002580:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a002582:	6958      	ldr	r0, [r3, #20]
}
1a002584:	f000 0020 	and.w	r0, r0, #32
1a002588:	4770      	bx	lr
1a00258a:	bf00      	nop
1a00258c:	1a003f90 	.word	0x1a003f90

1a002590 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a002590:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002594:	0083      	lsls	r3, r0, #2
1a002596:	4a02      	ldr	r2, [pc, #8]	; (1a0025a0 <uartRxRead+0x10>)
1a002598:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00259a:	6818      	ldr	r0, [r3, #0]
}
1a00259c:	b2c0      	uxtb	r0, r0
1a00259e:	4770      	bx	lr
1a0025a0:	1a003f90 	.word	0x1a003f90

1a0025a4 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0025a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0025a8:	0083      	lsls	r3, r0, #2
1a0025aa:	4a02      	ldr	r2, [pc, #8]	; (1a0025b4 <uartTxWrite+0x10>)
1a0025ac:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0025ae:	6019      	str	r1, [r3, #0]
}
1a0025b0:	4770      	bx	lr
1a0025b2:	bf00      	nop
1a0025b4:	1a003f90 	.word	0x1a003f90

1a0025b8 <uartInit>:
{
1a0025b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0025bc:	4680      	mov	r8, r0
1a0025be:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0025c0:	4c19      	ldr	r4, [pc, #100]	; (1a002628 <uartInit+0x70>)
1a0025c2:	0045      	lsls	r5, r0, #1
1a0025c4:	182a      	adds	r2, r5, r0
1a0025c6:	0093      	lsls	r3, r2, #2
1a0025c8:	18e6      	adds	r6, r4, r3
1a0025ca:	58e7      	ldr	r7, [r4, r3]
1a0025cc:	4638      	mov	r0, r7
1a0025ce:	f7ff f96d 	bl	1a0018ac <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0025d2:	4649      	mov	r1, r9
1a0025d4:	4638      	mov	r0, r7
1a0025d6:	f7ff f993 	bl	1a001900 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0025da:	2307      	movs	r3, #7
1a0025dc:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0025de:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0025e0:	2301      	movs	r3, #1
1a0025e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0025e4:	7930      	ldrb	r0, [r6, #4]
1a0025e6:	7973      	ldrb	r3, [r6, #5]
1a0025e8:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0025ea:	f042 0218 	orr.w	r2, r2, #24
1a0025ee:	490f      	ldr	r1, [pc, #60]	; (1a00262c <uartInit+0x74>)
1a0025f0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0025f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0025f8:	79f0      	ldrb	r0, [r6, #7]
1a0025fa:	7a33      	ldrb	r3, [r6, #8]
1a0025fc:	7a72      	ldrb	r2, [r6, #9]
1a0025fe:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002602:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a00260a:	f1b8 0f01 	cmp.w	r8, #1
1a00260e:	d001      	beq.n	1a002614 <uartInit+0x5c>
}
1a002610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002614:	4a06      	ldr	r2, [pc, #24]	; (1a002630 <uartInit+0x78>)
1a002616:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002618:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00261c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00261e:	221a      	movs	r2, #26
1a002620:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a002624:	e7f4      	b.n	1a002610 <uartInit+0x58>
1a002626:	bf00      	nop
1a002628:	1a003f90 	.word	0x1a003f90
1a00262c:	40086000 	.word	0x40086000
1a002630:	40081000 	.word	0x40081000

1a002634 <uartWriteByte>:
{
1a002634:	b538      	push	{r3, r4, r5, lr}
1a002636:	4604      	mov	r4, r0
1a002638:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a00263a:	4620      	mov	r0, r4
1a00263c:	f7ff ff9c 	bl	1a002578 <uartTxReady>
1a002640:	2800      	cmp	r0, #0
1a002642:	d0fa      	beq.n	1a00263a <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a002644:	4629      	mov	r1, r5
1a002646:	4620      	mov	r0, r4
1a002648:	f7ff ffac 	bl	1a0025a4 <uartTxWrite>
}
1a00264c:	bd38      	pop	{r3, r4, r5, pc}

1a00264e <uartWriteString>:
{
1a00264e:	b538      	push	{r3, r4, r5, lr}
1a002650:	4605      	mov	r5, r0
1a002652:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a002654:	7821      	ldrb	r1, [r4, #0]
1a002656:	b121      	cbz	r1, 1a002662 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a002658:	4628      	mov	r0, r5
1a00265a:	f7ff ffeb 	bl	1a002634 <uartWriteByte>
      str++;
1a00265e:	3401      	adds	r4, #1
1a002660:	e7f8      	b.n	1a002654 <uartWriteString+0x6>
}
1a002662:	bd38      	pop	{r3, r4, r5, pc}

1a002664 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a002664:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a002666:	2003      	movs	r0, #3
1a002668:	f7ff fe7c 	bl	1a002364 <uartProcessIRQ>
}
1a00266c:	bd08      	pop	{r3, pc}

1a00266e <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a00266e:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a002670:	2005      	movs	r0, #5
1a002672:	f7ff fe77 	bl	1a002364 <uartProcessIRQ>
}
1a002676:	bd08      	pop	{r3, pc}

1a002678 <tickCallbackSet>:
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickCallbackSet() in a program with freeRTOS has no effect\r\n" );
      return 0;
   #else
      bool_t retVal = TRUE;
      if( tickCallback != NULL ) {
1a002678:	b130      	cbz	r0, 1a002688 <tickCallbackSet+0x10>
         tickHookFunction = tickCallback;
1a00267a:	4a05      	ldr	r2, [pc, #20]	; (1a002690 <tickCallbackSet+0x18>)
1a00267c:	6010      	str	r0, [r2, #0]
      bool_t retVal = TRUE;
1a00267e:	2001      	movs	r0, #1
      } else {
         retVal = FALSE;
      }
      if( tickCallbackParams != NULL ) {
1a002680:	b121      	cbz	r1, 1a00268c <tickCallbackSet+0x14>
         callBackFuncParams = tickCallbackParams;
1a002682:	4b04      	ldr	r3, [pc, #16]	; (1a002694 <tickCallbackSet+0x1c>)
1a002684:	6019      	str	r1, [r3, #0]
1a002686:	4770      	bx	lr
         retVal = FALSE;
1a002688:	2000      	movs	r0, #0
1a00268a:	e7f9      	b.n	1a002680 <tickCallbackSet+0x8>
      } else {
         retVal &= FALSE;
1a00268c:	2000      	movs	r0, #0
      }
      return retVal;
   #endif
}
1a00268e:	4770      	bx	lr
1a002690:	100005e0 	.word	0x100005e0
1a002694:	100005d0 	.word	0x100005d0

1a002698 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a002698:	b118      	cbz	r0, 1a0026a2 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a00269a:	4b04      	ldr	r3, [pc, #16]	; (1a0026ac <tickPowerSet+0x14>)
1a00269c:	2207      	movs	r2, #7
1a00269e:	601a      	str	r2, [r3, #0]
1a0026a0:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a0026a2:	4b02      	ldr	r3, [pc, #8]	; (1a0026ac <tickPowerSet+0x14>)
1a0026a4:	2200      	movs	r2, #0
1a0026a6:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a0026a8:	4770      	bx	lr
1a0026aa:	bf00      	nop
1a0026ac:	e000e010 	.word	0xe000e010

1a0026b0 <tickInit>:
{
1a0026b0:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a0026b2:	ea50 0401 	orrs.w	r4, r0, r1
1a0026b6:	d02a      	beq.n	1a00270e <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0026b8:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a0026bc:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a0026c0:	2b00      	cmp	r3, #0
1a0026c2:	bf08      	it	eq
1a0026c4:	2a32      	cmpeq	r2, #50	; 0x32
1a0026c6:	d227      	bcs.n	1a002718 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0026c8:	4b14      	ldr	r3, [pc, #80]	; (1a00271c <tickInit+0x6c>)
1a0026ca:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0026ce:	4b14      	ldr	r3, [pc, #80]	; (1a002720 <tickInit+0x70>)
1a0026d0:	681b      	ldr	r3, [r3, #0]
1a0026d2:	fba3 4500 	umull	r4, r5, r3, r0
1a0026d6:	fb03 5501 	mla	r5, r3, r1, r5
1a0026da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0026de:	2300      	movs	r3, #0
1a0026e0:	4620      	mov	r0, r4
1a0026e2:	4629      	mov	r1, r5
1a0026e4:	f000 fa82 	bl	1a002bec <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0026e8:	3801      	subs	r0, #1
1a0026ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0026ee:	d209      	bcs.n	1a002704 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0026f0:	4b0c      	ldr	r3, [pc, #48]	; (1a002724 <tickInit+0x74>)
1a0026f2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0026f4:	4a0c      	ldr	r2, [pc, #48]	; (1a002728 <tickInit+0x78>)
1a0026f6:	21e0      	movs	r1, #224	; 0xe0
1a0026f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0026fc:	2200      	movs	r2, #0
1a0026fe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a002700:	2207      	movs	r2, #7
1a002702:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a002704:	2001      	movs	r0, #1
1a002706:	f7ff ffc7 	bl	1a002698 <tickPowerSet>
      bool_t ret_val = 1;
1a00270a:	2001      	movs	r0, #1
}
1a00270c:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00270e:	2000      	movs	r0, #0
1a002710:	f7ff ffc2 	bl	1a002698 <tickPowerSet>
         ret_val = 0;
1a002714:	2000      	movs	r0, #0
1a002716:	e7f9      	b.n	1a00270c <tickInit+0x5c>
            ret_val = 0;
1a002718:	2000      	movs	r0, #0
1a00271a:	e7f7      	b.n	1a00270c <tickInit+0x5c>
1a00271c:	10000040 	.word	0x10000040
1a002720:	100006f0 	.word	0x100006f0
1a002724:	e000e010 	.word	0xe000e010
1a002728:	e000ed00 	.word	0xe000ed00

1a00272c <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00272c:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a00272e:	4a07      	ldr	r2, [pc, #28]	; (1a00274c <SysTick_Handler+0x20>)
1a002730:	6813      	ldr	r3, [r2, #0]
1a002732:	6851      	ldr	r1, [r2, #4]
1a002734:	3301      	adds	r3, #1
1a002736:	f141 0100 	adc.w	r1, r1, #0
1a00273a:	6013      	str	r3, [r2, #0]
1a00273c:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00273e:	4b04      	ldr	r3, [pc, #16]	; (1a002750 <SysTick_Handler+0x24>)
1a002740:	681b      	ldr	r3, [r3, #0]
1a002742:	b113      	cbz	r3, 1a00274a <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a002744:	4a03      	ldr	r2, [pc, #12]	; (1a002754 <SysTick_Handler+0x28>)
1a002746:	6810      	ldr	r0, [r2, #0]
1a002748:	4798      	blx	r3
   }
}
1a00274a:	bd08      	pop	{r3, pc}
1a00274c:	100005d8 	.word	0x100005d8
1a002750:	100005e0 	.word	0x100005e0
1a002754:	100005d0 	.word	0x100005d0

1a002758 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a002758:	e7fe      	b.n	1a002758 <errorOcurred>

1a00275a <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a00275a:	4770      	bx	lr

1a00275c <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a00275c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00275e:	2400      	movs	r4, #0
1a002760:	e001      	b.n	1a002766 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002762:	3401      	adds	r4, #1
1a002764:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002766:	2c03      	cmp	r4, #3
1a002768:	d812      	bhi.n	1a002790 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00276a:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00276c:	4b09      	ldr	r3, [pc, #36]	; (1a002794 <TIMER0_IRQHandler+0x38>)
1a00276e:	681a      	ldr	r2, [r3, #0]
1a002770:	f004 010f 	and.w	r1, r4, #15
1a002774:	2301      	movs	r3, #1
1a002776:	408b      	lsls	r3, r1
1a002778:	421a      	tst	r2, r3
1a00277a:	d0f2      	beq.n	1a002762 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00277c:	4b06      	ldr	r3, [pc, #24]	; (1a002798 <TIMER0_IRQHandler+0x3c>)
1a00277e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a002782:	2000      	movs	r0, #0
1a002784:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002786:	2301      	movs	r3, #1
1a002788:	40ab      	lsls	r3, r5
1a00278a:	4a02      	ldr	r2, [pc, #8]	; (1a002794 <TIMER0_IRQHandler+0x38>)
1a00278c:	6013      	str	r3, [r2, #0]
1a00278e:	e7e8      	b.n	1a002762 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a002790:	bd38      	pop	{r3, r4, r5, pc}
1a002792:	bf00      	nop
1a002794:	40084000 	.word	0x40084000
1a002798:	10000048 	.word	0x10000048

1a00279c <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a00279c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00279e:	2400      	movs	r4, #0
1a0027a0:	e001      	b.n	1a0027a6 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0027a2:	3401      	adds	r4, #1
1a0027a4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0027a6:	2c03      	cmp	r4, #3
1a0027a8:	d813      	bhi.n	1a0027d2 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0027aa:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0027ac:	4b09      	ldr	r3, [pc, #36]	; (1a0027d4 <TIMER1_IRQHandler+0x38>)
1a0027ae:	681a      	ldr	r2, [r3, #0]
1a0027b0:	f004 010f 	and.w	r1, r4, #15
1a0027b4:	2301      	movs	r3, #1
1a0027b6:	408b      	lsls	r3, r1
1a0027b8:	421a      	tst	r2, r3
1a0027ba:	d0f2      	beq.n	1a0027a2 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0027bc:	1d23      	adds	r3, r4, #4
1a0027be:	4a06      	ldr	r2, [pc, #24]	; (1a0027d8 <TIMER1_IRQHandler+0x3c>)
1a0027c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0027c4:	2000      	movs	r0, #0
1a0027c6:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0027c8:	2301      	movs	r3, #1
1a0027ca:	40ab      	lsls	r3, r5
1a0027cc:	4a01      	ldr	r2, [pc, #4]	; (1a0027d4 <TIMER1_IRQHandler+0x38>)
1a0027ce:	6013      	str	r3, [r2, #0]
1a0027d0:	e7e7      	b.n	1a0027a2 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0027d2:	bd38      	pop	{r3, r4, r5, pc}
1a0027d4:	40085000 	.word	0x40085000
1a0027d8:	10000048 	.word	0x10000048

1a0027dc <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0027dc:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0027de:	2400      	movs	r4, #0
1a0027e0:	e001      	b.n	1a0027e6 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0027e2:	3401      	adds	r4, #1
1a0027e4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0027e6:	2c03      	cmp	r4, #3
1a0027e8:	d814      	bhi.n	1a002814 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0027ea:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0027ec:	4b0a      	ldr	r3, [pc, #40]	; (1a002818 <TIMER2_IRQHandler+0x3c>)
1a0027ee:	681a      	ldr	r2, [r3, #0]
1a0027f0:	f004 010f 	and.w	r1, r4, #15
1a0027f4:	2301      	movs	r3, #1
1a0027f6:	408b      	lsls	r3, r1
1a0027f8:	421a      	tst	r2, r3
1a0027fa:	d0f2      	beq.n	1a0027e2 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0027fc:	f104 0308 	add.w	r3, r4, #8
1a002800:	4a06      	ldr	r2, [pc, #24]	; (1a00281c <TIMER2_IRQHandler+0x40>)
1a002802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002806:	2000      	movs	r0, #0
1a002808:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00280a:	2301      	movs	r3, #1
1a00280c:	40ab      	lsls	r3, r5
1a00280e:	4a02      	ldr	r2, [pc, #8]	; (1a002818 <TIMER2_IRQHandler+0x3c>)
1a002810:	6013      	str	r3, [r2, #0]
1a002812:	e7e6      	b.n	1a0027e2 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a002814:	bd38      	pop	{r3, r4, r5, pc}
1a002816:	bf00      	nop
1a002818:	400c3000 	.word	0x400c3000
1a00281c:	10000048 	.word	0x10000048

1a002820 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a002820:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002822:	2400      	movs	r4, #0
1a002824:	e001      	b.n	1a00282a <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002826:	3401      	adds	r4, #1
1a002828:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00282a:	2c03      	cmp	r4, #3
1a00282c:	d814      	bhi.n	1a002858 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a00282e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002830:	4b0a      	ldr	r3, [pc, #40]	; (1a00285c <TIMER3_IRQHandler+0x3c>)
1a002832:	681a      	ldr	r2, [r3, #0]
1a002834:	f004 010f 	and.w	r1, r4, #15
1a002838:	2301      	movs	r3, #1
1a00283a:	408b      	lsls	r3, r1
1a00283c:	421a      	tst	r2, r3
1a00283e:	d0f2      	beq.n	1a002826 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002840:	f104 030c 	add.w	r3, r4, #12
1a002844:	4a06      	ldr	r2, [pc, #24]	; (1a002860 <TIMER3_IRQHandler+0x40>)
1a002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00284a:	2000      	movs	r0, #0
1a00284c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00284e:	2301      	movs	r3, #1
1a002850:	40ab      	lsls	r3, r5
1a002852:	4a02      	ldr	r2, [pc, #8]	; (1a00285c <TIMER3_IRQHandler+0x3c>)
1a002854:	6013      	str	r3, [r2, #0]
1a002856:	e7e6      	b.n	1a002826 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a002858:	bd38      	pop	{r3, r4, r5, pc}
1a00285a:	bf00      	nop
1a00285c:	400c4000 	.word	0x400c4000
1a002860:	10000048 	.word	0x10000048

1a002864 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002864:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002866:	4d0b      	ldr	r5, [pc, #44]	; (1a002894 <gpioObtainPinInit+0x30>)
1a002868:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00286c:	182c      	adds	r4, r5, r0
1a00286e:	5628      	ldrsb	r0, [r5, r0]
1a002870:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002872:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a002876:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002878:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a00287c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00287e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002882:	9b02      	ldr	r3, [sp, #8]
1a002884:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002886:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00288a:	9b03      	ldr	r3, [sp, #12]
1a00288c:	701a      	strb	r2, [r3, #0]
}
1a00288e:	bc30      	pop	{r4, r5}
1a002890:	4770      	bx	lr
1a002892:	bf00      	nop
1a002894:	1a003fd8 	.word	0x1a003fd8

1a002898 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a002898:	f110 0f02 	cmn.w	r0, #2
1a00289c:	f000 80c7 	beq.w	1a002a2e <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a0028a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0028a4:	f000 80c5 	beq.w	1a002a32 <gpioInit+0x19a>
{
1a0028a8:	b570      	push	{r4, r5, r6, lr}
1a0028aa:	b084      	sub	sp, #16
1a0028ac:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0028ae:	2300      	movs	r3, #0
1a0028b0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0028b4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0028b8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0028bc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0028c0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0028c4:	f10d 030b 	add.w	r3, sp, #11
1a0028c8:	9301      	str	r3, [sp, #4]
1a0028ca:	ab03      	add	r3, sp, #12
1a0028cc:	9300      	str	r3, [sp, #0]
1a0028ce:	f10d 030d 	add.w	r3, sp, #13
1a0028d2:	f10d 020e 	add.w	r2, sp, #14
1a0028d6:	f10d 010f 	add.w	r1, sp, #15
1a0028da:	f7ff ffc3 	bl	1a002864 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0028de:	2c05      	cmp	r4, #5
1a0028e0:	f200 80a9 	bhi.w	1a002a36 <gpioInit+0x19e>
1a0028e4:	e8df f004 	tbb	[pc, r4]
1a0028e8:	45278109 	.word	0x45278109
1a0028ec:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0028ee:	4853      	ldr	r0, [pc, #332]	; (1a002a3c <gpioInit+0x1a4>)
1a0028f0:	f7ff fbc8 	bl	1a002084 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0028f4:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0028f6:	b004      	add	sp, #16
1a0028f8:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0028fa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0028fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002902:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002906:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00290a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00290e:	494c      	ldr	r1, [pc, #304]	; (1a002a40 <gpioInit+0x1a8>)
1a002910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002914:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002918:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00291c:	2001      	movs	r0, #1
1a00291e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a002922:	4c46      	ldr	r4, [pc, #280]	; (1a002a3c <gpioInit+0x1a4>)
1a002924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002928:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00292c:	ea22 0201 	bic.w	r2, r2, r1
1a002930:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002934:	e7df      	b.n	1a0028f6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a002936:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00293a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00293e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002942:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a002946:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00294a:	493d      	ldr	r1, [pc, #244]	; (1a002a40 <gpioInit+0x1a8>)
1a00294c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002950:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002954:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002958:	2001      	movs	r0, #1
1a00295a:	fa00 f102 	lsl.w	r1, r0, r2
1a00295e:	4c37      	ldr	r4, [pc, #220]	; (1a002a3c <gpioInit+0x1a4>)
1a002960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002964:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002968:	ea22 0201 	bic.w	r2, r2, r1
1a00296c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002970:	e7c1      	b.n	1a0028f6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a002972:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002976:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00297a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00297e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a002982:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002986:	492e      	ldr	r1, [pc, #184]	; (1a002a40 <gpioInit+0x1a8>)
1a002988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00298c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002990:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002994:	2001      	movs	r0, #1
1a002996:	fa00 f102 	lsl.w	r1, r0, r2
1a00299a:	4c28      	ldr	r4, [pc, #160]	; (1a002a3c <gpioInit+0x1a4>)
1a00299c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0029a0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0029a4:	ea22 0201 	bic.w	r2, r2, r1
1a0029a8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0029ac:	e7a3      	b.n	1a0028f6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0029ae:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0029b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0029b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0029ba:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0029be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0029c2:	491f      	ldr	r1, [pc, #124]	; (1a002a40 <gpioInit+0x1a8>)
1a0029c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0029c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0029cc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0029d0:	2001      	movs	r0, #1
1a0029d2:	fa00 f102 	lsl.w	r1, r0, r2
1a0029d6:	4c19      	ldr	r4, [pc, #100]	; (1a002a3c <gpioInit+0x1a4>)
1a0029d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0029dc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0029e0:	ea22 0201 	bic.w	r2, r2, r1
1a0029e4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0029e8:	e785      	b.n	1a0028f6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0029ea:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0029ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0029f2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0029f6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0029fa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0029fe:	4910      	ldr	r1, [pc, #64]	; (1a002a40 <gpioInit+0x1a8>)
1a002a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a002a04:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a002a08:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002a0c:	2001      	movs	r0, #1
1a002a0e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a002a12:	4b0a      	ldr	r3, [pc, #40]	; (1a002a3c <gpioInit+0x1a4>)
1a002a14:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002a18:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a002a1c:	4331      	orrs	r1, r6
1a002a1e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a002a22:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a002a24:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a002a28:	2100      	movs	r1, #0
1a002a2a:	5499      	strb	r1, [r3, r2]
1a002a2c:	e763      	b.n	1a0028f6 <gpioInit+0x5e>
	  return FALSE;
1a002a2e:	2000      	movs	r0, #0
1a002a30:	4770      	bx	lr
	  return FALSE;
1a002a32:	2000      	movs	r0, #0
}
1a002a34:	4770      	bx	lr
      ret_val = 0;
1a002a36:	2000      	movs	r0, #0
1a002a38:	e75d      	b.n	1a0028f6 <gpioInit+0x5e>
1a002a3a:	bf00      	nop
1a002a3c:	400f4000 	.word	0x400f4000
1a002a40:	40086000 	.word	0x40086000

1a002a44 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a002a44:	f110 0f02 	cmn.w	r0, #2
1a002a48:	d03c      	beq.n	1a002ac4 <gpioWrite+0x80>
	  return FALSE;
   }
   if( pin == GND ){
1a002a4a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002a4e:	d03b      	beq.n	1a002ac8 <gpioWrite+0x84>
{
1a002a50:	b510      	push	{r4, lr}
1a002a52:	b084      	sub	sp, #16
1a002a54:	460c      	mov	r4, r1
	  return FALSE;
   }

   if( pin == LED_W){
1a002a56:	282e      	cmp	r0, #46	; 0x2e
1a002a58:	d027      	beq.n	1a002aaa <gpioWrite+0x66>
   }
   else{

   bool_t ret_val     = 1;

	 int8_t pinNamePort = 0;
1a002a5a:	2300      	movs	r3, #0
1a002a5c:	f88d 300b 	strb.w	r3, [sp, #11]
	 int8_t pinNamePin  = 0;
1a002a60:	f88d 300c 	strb.w	r3, [sp, #12]

	 int8_t func        = 0;
1a002a64:	f88d 300d 	strb.w	r3, [sp, #13]

	 int8_t gpioPort    = 0;
1a002a68:	f88d 300e 	strb.w	r3, [sp, #14]
	 int8_t gpioPin     = 0;
1a002a6c:	f88d 300f 	strb.w	r3, [sp, #15]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002a70:	f10d 030f 	add.w	r3, sp, #15
1a002a74:	9301      	str	r3, [sp, #4]
1a002a76:	f10d 030e 	add.w	r3, sp, #14
1a002a7a:	9300      	str	r3, [sp, #0]
1a002a7c:	f10d 030d 	add.w	r3, sp, #13
1a002a80:	aa03      	add	r2, sp, #12
1a002a82:	f10d 010b 	add.w	r1, sp, #11
1a002a86:	f7ff feed 	bl	1a002864 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002a8a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002a8e:	f89d 200f 	ldrb.w	r2, [sp, #15]
1a002a92:	3400      	adds	r4, #0
1a002a94:	bf18      	it	ne
1a002a96:	2401      	movne	r4, #1
1a002a98:	015b      	lsls	r3, r3, #5
1a002a9a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002a9e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002aa2:	549c      	strb	r4, [r3, r2]

   return ret_val;}
1a002aa4:	2001      	movs	r0, #1
}
1a002aa6:	b004      	add	sp, #16
1a002aa8:	bd10      	pop	{r4, pc}
	  gpioWrite(LEDR, value);
1a002aaa:	2028      	movs	r0, #40	; 0x28
1a002aac:	f7ff ffca 	bl	1a002a44 <gpioWrite>
	  gpioWrite(LEDG, value);
1a002ab0:	4621      	mov	r1, r4
1a002ab2:	2029      	movs	r0, #41	; 0x29
1a002ab4:	f7ff ffc6 	bl	1a002a44 <gpioWrite>
	  gpioWrite(LEDB, value);
1a002ab8:	4621      	mov	r1, r4
1a002aba:	202a      	movs	r0, #42	; 0x2a
1a002abc:	f7ff ffc2 	bl	1a002a44 <gpioWrite>
	  return TRUE;
1a002ac0:	2001      	movs	r0, #1
1a002ac2:	e7f0      	b.n	1a002aa6 <gpioWrite+0x62>
	  return FALSE;
1a002ac4:	2000      	movs	r0, #0
1a002ac6:	4770      	bx	lr
	  return FALSE;
1a002ac8:	2000      	movs	r0, #0
}
1a002aca:	4770      	bx	lr

1a002acc <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a002acc:	f110 0f02 	cmn.w	r0, #2
1a002ad0:	d02c      	beq.n	1a002b2c <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a002ad2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002ad6:	d02b      	beq.n	1a002b30 <gpioRead+0x64>
{
1a002ad8:	b500      	push	{lr}
1a002ada:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a002adc:	2300      	movs	r3, #0
1a002ade:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002ae2:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002ae6:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002aea:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002aee:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002af2:	f10d 030b 	add.w	r3, sp, #11
1a002af6:	9301      	str	r3, [sp, #4]
1a002af8:	ab03      	add	r3, sp, #12
1a002afa:	9300      	str	r3, [sp, #0]
1a002afc:	f10d 030d 	add.w	r3, sp, #13
1a002b00:	f10d 020e 	add.w	r2, sp, #14
1a002b04:	f10d 010f 	add.w	r1, sp, #15
1a002b08:	f7ff feac 	bl	1a002864 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a002b0c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a002b10:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a002b14:	015b      	lsls	r3, r3, #5
1a002b16:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002b1a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002b1e:	5c98      	ldrb	r0, [r3, r2]
1a002b20:	3000      	adds	r0, #0
1a002b22:	bf18      	it	ne
1a002b24:	2001      	movne	r0, #1

   return ret_val;
}
1a002b26:	b005      	add	sp, #20
1a002b28:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a002b2c:	2001      	movs	r0, #1
1a002b2e:	4770      	bx	lr
      return FALSE;
1a002b30:	2000      	movs	r0, #0
}
1a002b32:	4770      	bx	lr

1a002b34 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a002b34:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a002b36:	4b04      	ldr	r3, [pc, #16]	; (1a002b48 <USB0_IRQHandler+0x14>)
1a002b38:	681b      	ldr	r3, [r3, #0]
1a002b3a:	681b      	ldr	r3, [r3, #0]
1a002b3c:	68db      	ldr	r3, [r3, #12]
1a002b3e:	4a03      	ldr	r2, [pc, #12]	; (1a002b4c <USB0_IRQHandler+0x18>)
1a002b40:	6810      	ldr	r0, [r2, #0]
1a002b42:	4798      	blx	r3
}
1a002b44:	bd08      	pop	{r3, pc}
1a002b46:	bf00      	nop
1a002b48:	100006f4 	.word	0x100006f4
1a002b4c:	100005e4 	.word	0x100005e4

1a002b50 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002b50:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a002b52:	f7fe ffc7 	bl	1a001ae4 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a002b56:	4b1a      	ldr	r3, [pc, #104]	; (1a002bc0 <boardInit+0x70>)
1a002b58:	6818      	ldr	r0, [r3, #0]
1a002b5a:	f7ff fbf5 	bl	1a002348 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a002b5e:	2001      	movs	r0, #1
1a002b60:	2100      	movs	r1, #0
1a002b62:	f7ff fda5 	bl	1a0026b0 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a002b66:	2105      	movs	r1, #5
1a002b68:	2000      	movs	r0, #0
1a002b6a:	f7ff fe95 	bl	1a002898 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a002b6e:	2100      	movs	r1, #0
1a002b70:	2024      	movs	r0, #36	; 0x24
1a002b72:	f7ff fe91 	bl	1a002898 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a002b76:	2100      	movs	r1, #0
1a002b78:	2025      	movs	r0, #37	; 0x25
1a002b7a:	f7ff fe8d 	bl	1a002898 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a002b7e:	2100      	movs	r1, #0
1a002b80:	2026      	movs	r0, #38	; 0x26
1a002b82:	f7ff fe89 	bl	1a002898 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a002b86:	2100      	movs	r1, #0
1a002b88:	2027      	movs	r0, #39	; 0x27
1a002b8a:	f7ff fe85 	bl	1a002898 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a002b8e:	2101      	movs	r1, #1
1a002b90:	2028      	movs	r0, #40	; 0x28
1a002b92:	f7ff fe81 	bl	1a002898 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a002b96:	2101      	movs	r1, #1
1a002b98:	2029      	movs	r0, #41	; 0x29
1a002b9a:	f7ff fe7d 	bl	1a002898 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a002b9e:	2101      	movs	r1, #1
1a002ba0:	202a      	movs	r0, #42	; 0x2a
1a002ba2:	f7ff fe79 	bl	1a002898 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a002ba6:	2101      	movs	r1, #1
1a002ba8:	202b      	movs	r0, #43	; 0x2b
1a002baa:	f7ff fe75 	bl	1a002898 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a002bae:	2101      	movs	r1, #1
1a002bb0:	202c      	movs	r0, #44	; 0x2c
1a002bb2:	f7ff fe71 	bl	1a002898 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a002bb6:	2101      	movs	r1, #1
1a002bb8:	202d      	movs	r0, #45	; 0x2d
1a002bba:	f7ff fe6d 	bl	1a002898 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a002bbe:	bd08      	pop	{r3, pc}
1a002bc0:	100006f0 	.word	0x100006f0

1a002bc4 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a002bc4:	b508      	push	{r3, lr}
1a002bc6:	460b      	mov	r3, r1
   *printer = uart;
1a002bc8:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a002bca:	4611      	mov	r1, r2
1a002bcc:	4618      	mov	r0, r3
1a002bce:	f7ff fcf3 	bl	1a0025b8 <uartInit>
}
1a002bd2:	bd08      	pop	{r3, pc}

1a002bd4 <printString>:
}

// Print String

void printString( print_t printer, const char* string )
{
1a002bd4:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a002bd6:	f7ff fd3a 	bl	1a00264e <uartWriteString>
}
1a002bda:	bd08      	pop	{r3, pc}

1a002bdc <printEnter>:

void printEnter( print_t printer )
{
1a002bdc:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a002bde:	4902      	ldr	r1, [pc, #8]	; (1a002be8 <printEnter+0xc>)
1a002be0:	f7ff fd35 	bl	1a00264e <uartWriteString>
}
1a002be4:	bd08      	pop	{r3, pc}
1a002be6:	bf00      	nop
1a002be8:	1a0040c0 	.word	0x1a0040c0

1a002bec <__aeabi_uldivmod>:
1a002bec:	b953      	cbnz	r3, 1a002c04 <__aeabi_uldivmod+0x18>
1a002bee:	b94a      	cbnz	r2, 1a002c04 <__aeabi_uldivmod+0x18>
1a002bf0:	2900      	cmp	r1, #0
1a002bf2:	bf08      	it	eq
1a002bf4:	2800      	cmpeq	r0, #0
1a002bf6:	bf1c      	itt	ne
1a002bf8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a002bfc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002c00:	f000 b974 	b.w	1a002eec <__aeabi_idiv0>
1a002c04:	f1ad 0c08 	sub.w	ip, sp, #8
1a002c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002c0c:	f000 f806 	bl	1a002c1c <__udivmoddi4>
1a002c10:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002c18:	b004      	add	sp, #16
1a002c1a:	4770      	bx	lr

1a002c1c <__udivmoddi4>:
1a002c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002c20:	9e08      	ldr	r6, [sp, #32]
1a002c22:	4604      	mov	r4, r0
1a002c24:	4688      	mov	r8, r1
1a002c26:	2b00      	cmp	r3, #0
1a002c28:	f040 8085 	bne.w	1a002d36 <__udivmoddi4+0x11a>
1a002c2c:	428a      	cmp	r2, r1
1a002c2e:	4615      	mov	r5, r2
1a002c30:	d948      	bls.n	1a002cc4 <__udivmoddi4+0xa8>
1a002c32:	fab2 f282 	clz	r2, r2
1a002c36:	b14a      	cbz	r2, 1a002c4c <__udivmoddi4+0x30>
1a002c38:	f1c2 0720 	rsb	r7, r2, #32
1a002c3c:	fa01 f302 	lsl.w	r3, r1, r2
1a002c40:	fa20 f707 	lsr.w	r7, r0, r7
1a002c44:	4095      	lsls	r5, r2
1a002c46:	ea47 0803 	orr.w	r8, r7, r3
1a002c4a:	4094      	lsls	r4, r2
1a002c4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002c50:	0c23      	lsrs	r3, r4, #16
1a002c52:	fbb8 f7fe 	udiv	r7, r8, lr
1a002c56:	fa1f fc85 	uxth.w	ip, r5
1a002c5a:	fb0e 8817 	mls	r8, lr, r7, r8
1a002c5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002c62:	fb07 f10c 	mul.w	r1, r7, ip
1a002c66:	4299      	cmp	r1, r3
1a002c68:	d909      	bls.n	1a002c7e <__udivmoddi4+0x62>
1a002c6a:	18eb      	adds	r3, r5, r3
1a002c6c:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a002c70:	f080 80e3 	bcs.w	1a002e3a <__udivmoddi4+0x21e>
1a002c74:	4299      	cmp	r1, r3
1a002c76:	f240 80e0 	bls.w	1a002e3a <__udivmoddi4+0x21e>
1a002c7a:	3f02      	subs	r7, #2
1a002c7c:	442b      	add	r3, r5
1a002c7e:	1a5b      	subs	r3, r3, r1
1a002c80:	b2a4      	uxth	r4, r4
1a002c82:	fbb3 f0fe 	udiv	r0, r3, lr
1a002c86:	fb0e 3310 	mls	r3, lr, r0, r3
1a002c8a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002c8e:	fb00 fc0c 	mul.w	ip, r0, ip
1a002c92:	45a4      	cmp	ip, r4
1a002c94:	d909      	bls.n	1a002caa <__udivmoddi4+0x8e>
1a002c96:	192c      	adds	r4, r5, r4
1a002c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002c9c:	f080 80cb 	bcs.w	1a002e36 <__udivmoddi4+0x21a>
1a002ca0:	45a4      	cmp	ip, r4
1a002ca2:	f240 80c8 	bls.w	1a002e36 <__udivmoddi4+0x21a>
1a002ca6:	3802      	subs	r0, #2
1a002ca8:	442c      	add	r4, r5
1a002caa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002cae:	eba4 040c 	sub.w	r4, r4, ip
1a002cb2:	2700      	movs	r7, #0
1a002cb4:	b11e      	cbz	r6, 1a002cbe <__udivmoddi4+0xa2>
1a002cb6:	40d4      	lsrs	r4, r2
1a002cb8:	2300      	movs	r3, #0
1a002cba:	e9c6 4300 	strd	r4, r3, [r6]
1a002cbe:	4639      	mov	r1, r7
1a002cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002cc4:	2a00      	cmp	r2, #0
1a002cc6:	d053      	beq.n	1a002d70 <__udivmoddi4+0x154>
1a002cc8:	fab2 f282 	clz	r2, r2
1a002ccc:	2a00      	cmp	r2, #0
1a002cce:	f040 80b6 	bne.w	1a002e3e <__udivmoddi4+0x222>
1a002cd2:	1b49      	subs	r1, r1, r5
1a002cd4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002cd8:	fa1f f885 	uxth.w	r8, r5
1a002cdc:	2701      	movs	r7, #1
1a002cde:	fbb1 fcfe 	udiv	ip, r1, lr
1a002ce2:	0c23      	lsrs	r3, r4, #16
1a002ce4:	fb0e 111c 	mls	r1, lr, ip, r1
1a002ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002cec:	fb08 f10c 	mul.w	r1, r8, ip
1a002cf0:	4299      	cmp	r1, r3
1a002cf2:	d907      	bls.n	1a002d04 <__udivmoddi4+0xe8>
1a002cf4:	18eb      	adds	r3, r5, r3
1a002cf6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a002cfa:	d202      	bcs.n	1a002d02 <__udivmoddi4+0xe6>
1a002cfc:	4299      	cmp	r1, r3
1a002cfe:	f200 80ec 	bhi.w	1a002eda <__udivmoddi4+0x2be>
1a002d02:	4684      	mov	ip, r0
1a002d04:	1a59      	subs	r1, r3, r1
1a002d06:	b2a3      	uxth	r3, r4
1a002d08:	fbb1 f0fe 	udiv	r0, r1, lr
1a002d0c:	fb0e 1410 	mls	r4, lr, r0, r1
1a002d10:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002d14:	fb08 f800 	mul.w	r8, r8, r0
1a002d18:	45a0      	cmp	r8, r4
1a002d1a:	d907      	bls.n	1a002d2c <__udivmoddi4+0x110>
1a002d1c:	192c      	adds	r4, r5, r4
1a002d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002d22:	d202      	bcs.n	1a002d2a <__udivmoddi4+0x10e>
1a002d24:	45a0      	cmp	r8, r4
1a002d26:	f200 80dc 	bhi.w	1a002ee2 <__udivmoddi4+0x2c6>
1a002d2a:	4618      	mov	r0, r3
1a002d2c:	eba4 0408 	sub.w	r4, r4, r8
1a002d30:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002d34:	e7be      	b.n	1a002cb4 <__udivmoddi4+0x98>
1a002d36:	428b      	cmp	r3, r1
1a002d38:	d908      	bls.n	1a002d4c <__udivmoddi4+0x130>
1a002d3a:	2e00      	cmp	r6, #0
1a002d3c:	d078      	beq.n	1a002e30 <__udivmoddi4+0x214>
1a002d3e:	2700      	movs	r7, #0
1a002d40:	e9c6 0100 	strd	r0, r1, [r6]
1a002d44:	4638      	mov	r0, r7
1a002d46:	4639      	mov	r1, r7
1a002d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002d4c:	fab3 f783 	clz	r7, r3
1a002d50:	b97f      	cbnz	r7, 1a002d72 <__udivmoddi4+0x156>
1a002d52:	428b      	cmp	r3, r1
1a002d54:	d302      	bcc.n	1a002d5c <__udivmoddi4+0x140>
1a002d56:	4282      	cmp	r2, r0
1a002d58:	f200 80bd 	bhi.w	1a002ed6 <__udivmoddi4+0x2ba>
1a002d5c:	1a84      	subs	r4, r0, r2
1a002d5e:	eb61 0303 	sbc.w	r3, r1, r3
1a002d62:	2001      	movs	r0, #1
1a002d64:	4698      	mov	r8, r3
1a002d66:	2e00      	cmp	r6, #0
1a002d68:	d0a9      	beq.n	1a002cbe <__udivmoddi4+0xa2>
1a002d6a:	e9c6 4800 	strd	r4, r8, [r6]
1a002d6e:	e7a6      	b.n	1a002cbe <__udivmoddi4+0xa2>
1a002d70:	deff      	udf	#255	; 0xff
1a002d72:	f1c7 0520 	rsb	r5, r7, #32
1a002d76:	40bb      	lsls	r3, r7
1a002d78:	fa22 fc05 	lsr.w	ip, r2, r5
1a002d7c:	ea4c 0c03 	orr.w	ip, ip, r3
1a002d80:	fa01 f407 	lsl.w	r4, r1, r7
1a002d84:	fa20 f805 	lsr.w	r8, r0, r5
1a002d88:	fa21 f305 	lsr.w	r3, r1, r5
1a002d8c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a002d90:	ea48 0404 	orr.w	r4, r8, r4
1a002d94:	fbb3 f9fe 	udiv	r9, r3, lr
1a002d98:	0c21      	lsrs	r1, r4, #16
1a002d9a:	fb0e 3319 	mls	r3, lr, r9, r3
1a002d9e:	fa1f f88c 	uxth.w	r8, ip
1a002da2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002da6:	fb09 fa08 	mul.w	sl, r9, r8
1a002daa:	459a      	cmp	sl, r3
1a002dac:	fa02 f207 	lsl.w	r2, r2, r7
1a002db0:	fa00 f107 	lsl.w	r1, r0, r7
1a002db4:	d90b      	bls.n	1a002dce <__udivmoddi4+0x1b2>
1a002db6:	eb1c 0303 	adds.w	r3, ip, r3
1a002dba:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a002dbe:	f080 8088 	bcs.w	1a002ed2 <__udivmoddi4+0x2b6>
1a002dc2:	459a      	cmp	sl, r3
1a002dc4:	f240 8085 	bls.w	1a002ed2 <__udivmoddi4+0x2b6>
1a002dc8:	f1a9 0902 	sub.w	r9, r9, #2
1a002dcc:	4463      	add	r3, ip
1a002dce:	eba3 030a 	sub.w	r3, r3, sl
1a002dd2:	b2a4      	uxth	r4, r4
1a002dd4:	fbb3 f0fe 	udiv	r0, r3, lr
1a002dd8:	fb0e 3310 	mls	r3, lr, r0, r3
1a002ddc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002de0:	fb00 f808 	mul.w	r8, r0, r8
1a002de4:	45a0      	cmp	r8, r4
1a002de6:	d908      	bls.n	1a002dfa <__udivmoddi4+0x1de>
1a002de8:	eb1c 0404 	adds.w	r4, ip, r4
1a002dec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002df0:	d26b      	bcs.n	1a002eca <__udivmoddi4+0x2ae>
1a002df2:	45a0      	cmp	r8, r4
1a002df4:	d969      	bls.n	1a002eca <__udivmoddi4+0x2ae>
1a002df6:	3802      	subs	r0, #2
1a002df8:	4464      	add	r4, ip
1a002dfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002dfe:	eba4 0408 	sub.w	r4, r4, r8
1a002e02:	fba0 8902 	umull	r8, r9, r0, r2
1a002e06:	454c      	cmp	r4, r9
1a002e08:	46c6      	mov	lr, r8
1a002e0a:	464b      	mov	r3, r9
1a002e0c:	d354      	bcc.n	1a002eb8 <__udivmoddi4+0x29c>
1a002e0e:	d051      	beq.n	1a002eb4 <__udivmoddi4+0x298>
1a002e10:	2e00      	cmp	r6, #0
1a002e12:	d069      	beq.n	1a002ee8 <__udivmoddi4+0x2cc>
1a002e14:	ebb1 020e 	subs.w	r2, r1, lr
1a002e18:	eb64 0403 	sbc.w	r4, r4, r3
1a002e1c:	fa04 f505 	lsl.w	r5, r4, r5
1a002e20:	fa22 f307 	lsr.w	r3, r2, r7
1a002e24:	40fc      	lsrs	r4, r7
1a002e26:	431d      	orrs	r5, r3
1a002e28:	e9c6 5400 	strd	r5, r4, [r6]
1a002e2c:	2700      	movs	r7, #0
1a002e2e:	e746      	b.n	1a002cbe <__udivmoddi4+0xa2>
1a002e30:	4637      	mov	r7, r6
1a002e32:	4630      	mov	r0, r6
1a002e34:	e743      	b.n	1a002cbe <__udivmoddi4+0xa2>
1a002e36:	4618      	mov	r0, r3
1a002e38:	e737      	b.n	1a002caa <__udivmoddi4+0x8e>
1a002e3a:	4607      	mov	r7, r0
1a002e3c:	e71f      	b.n	1a002c7e <__udivmoddi4+0x62>
1a002e3e:	f1c2 0320 	rsb	r3, r2, #32
1a002e42:	fa20 f703 	lsr.w	r7, r0, r3
1a002e46:	4095      	lsls	r5, r2
1a002e48:	fa01 f002 	lsl.w	r0, r1, r2
1a002e4c:	fa21 f303 	lsr.w	r3, r1, r3
1a002e50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002e54:	4338      	orrs	r0, r7
1a002e56:	0c01      	lsrs	r1, r0, #16
1a002e58:	fbb3 f7fe 	udiv	r7, r3, lr
1a002e5c:	fa1f f885 	uxth.w	r8, r5
1a002e60:	fb0e 3317 	mls	r3, lr, r7, r3
1a002e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002e68:	fb07 f308 	mul.w	r3, r7, r8
1a002e6c:	428b      	cmp	r3, r1
1a002e6e:	fa04 f402 	lsl.w	r4, r4, r2
1a002e72:	d907      	bls.n	1a002e84 <__udivmoddi4+0x268>
1a002e74:	1869      	adds	r1, r5, r1
1a002e76:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a002e7a:	d228      	bcs.n	1a002ece <__udivmoddi4+0x2b2>
1a002e7c:	428b      	cmp	r3, r1
1a002e7e:	d926      	bls.n	1a002ece <__udivmoddi4+0x2b2>
1a002e80:	3f02      	subs	r7, #2
1a002e82:	4429      	add	r1, r5
1a002e84:	1acb      	subs	r3, r1, r3
1a002e86:	b281      	uxth	r1, r0
1a002e88:	fbb3 f0fe 	udiv	r0, r3, lr
1a002e8c:	fb0e 3310 	mls	r3, lr, r0, r3
1a002e90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002e94:	fb00 f308 	mul.w	r3, r0, r8
1a002e98:	428b      	cmp	r3, r1
1a002e9a:	d907      	bls.n	1a002eac <__udivmoddi4+0x290>
1a002e9c:	1869      	adds	r1, r5, r1
1a002e9e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002ea2:	d210      	bcs.n	1a002ec6 <__udivmoddi4+0x2aa>
1a002ea4:	428b      	cmp	r3, r1
1a002ea6:	d90e      	bls.n	1a002ec6 <__udivmoddi4+0x2aa>
1a002ea8:	3802      	subs	r0, #2
1a002eaa:	4429      	add	r1, r5
1a002eac:	1ac9      	subs	r1, r1, r3
1a002eae:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002eb2:	e714      	b.n	1a002cde <__udivmoddi4+0xc2>
1a002eb4:	4541      	cmp	r1, r8
1a002eb6:	d2ab      	bcs.n	1a002e10 <__udivmoddi4+0x1f4>
1a002eb8:	ebb8 0e02 	subs.w	lr, r8, r2
1a002ebc:	eb69 020c 	sbc.w	r2, r9, ip
1a002ec0:	3801      	subs	r0, #1
1a002ec2:	4613      	mov	r3, r2
1a002ec4:	e7a4      	b.n	1a002e10 <__udivmoddi4+0x1f4>
1a002ec6:	4660      	mov	r0, ip
1a002ec8:	e7f0      	b.n	1a002eac <__udivmoddi4+0x290>
1a002eca:	4618      	mov	r0, r3
1a002ecc:	e795      	b.n	1a002dfa <__udivmoddi4+0x1de>
1a002ece:	4667      	mov	r7, ip
1a002ed0:	e7d8      	b.n	1a002e84 <__udivmoddi4+0x268>
1a002ed2:	4681      	mov	r9, r0
1a002ed4:	e77b      	b.n	1a002dce <__udivmoddi4+0x1b2>
1a002ed6:	4638      	mov	r0, r7
1a002ed8:	e745      	b.n	1a002d66 <__udivmoddi4+0x14a>
1a002eda:	f1ac 0c02 	sub.w	ip, ip, #2
1a002ede:	442b      	add	r3, r5
1a002ee0:	e710      	b.n	1a002d04 <__udivmoddi4+0xe8>
1a002ee2:	3802      	subs	r0, #2
1a002ee4:	442c      	add	r4, r5
1a002ee6:	e721      	b.n	1a002d2c <__udivmoddi4+0x110>
1a002ee8:	4637      	mov	r7, r6
1a002eea:	e6e8      	b.n	1a002cbe <__udivmoddi4+0xa2>

1a002eec <__aeabi_idiv0>:
1a002eec:	4770      	bx	lr
1a002eee:	bf00      	nop

1a002ef0 <__sflush_r>:
1a002ef0:	898a      	ldrh	r2, [r1, #12]
1a002ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002ef6:	4605      	mov	r5, r0
1a002ef8:	0710      	lsls	r0, r2, #28
1a002efa:	460c      	mov	r4, r1
1a002efc:	d458      	bmi.n	1a002fb0 <__sflush_r+0xc0>
1a002efe:	684b      	ldr	r3, [r1, #4]
1a002f00:	2b00      	cmp	r3, #0
1a002f02:	dc05      	bgt.n	1a002f10 <__sflush_r+0x20>
1a002f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a002f06:	2b00      	cmp	r3, #0
1a002f08:	dc02      	bgt.n	1a002f10 <__sflush_r+0x20>
1a002f0a:	2000      	movs	r0, #0
1a002f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a002f12:	2e00      	cmp	r6, #0
1a002f14:	d0f9      	beq.n	1a002f0a <__sflush_r+0x1a>
1a002f16:	2300      	movs	r3, #0
1a002f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a002f1c:	682f      	ldr	r7, [r5, #0]
1a002f1e:	602b      	str	r3, [r5, #0]
1a002f20:	d032      	beq.n	1a002f88 <__sflush_r+0x98>
1a002f22:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a002f24:	89a3      	ldrh	r3, [r4, #12]
1a002f26:	075a      	lsls	r2, r3, #29
1a002f28:	d505      	bpl.n	1a002f36 <__sflush_r+0x46>
1a002f2a:	6863      	ldr	r3, [r4, #4]
1a002f2c:	1ac0      	subs	r0, r0, r3
1a002f2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a002f30:	b10b      	cbz	r3, 1a002f36 <__sflush_r+0x46>
1a002f32:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a002f34:	1ac0      	subs	r0, r0, r3
1a002f36:	2300      	movs	r3, #0
1a002f38:	4602      	mov	r2, r0
1a002f3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a002f3c:	6a21      	ldr	r1, [r4, #32]
1a002f3e:	4628      	mov	r0, r5
1a002f40:	47b0      	blx	r6
1a002f42:	1c43      	adds	r3, r0, #1
1a002f44:	89a3      	ldrh	r3, [r4, #12]
1a002f46:	d106      	bne.n	1a002f56 <__sflush_r+0x66>
1a002f48:	6829      	ldr	r1, [r5, #0]
1a002f4a:	291d      	cmp	r1, #29
1a002f4c:	d849      	bhi.n	1a002fe2 <__sflush_r+0xf2>
1a002f4e:	4a2a      	ldr	r2, [pc, #168]	; (1a002ff8 <__sflush_r+0x108>)
1a002f50:	40ca      	lsrs	r2, r1
1a002f52:	07d6      	lsls	r6, r2, #31
1a002f54:	d545      	bpl.n	1a002fe2 <__sflush_r+0xf2>
1a002f56:	2200      	movs	r2, #0
1a002f58:	6062      	str	r2, [r4, #4]
1a002f5a:	04d9      	lsls	r1, r3, #19
1a002f5c:	6922      	ldr	r2, [r4, #16]
1a002f5e:	6022      	str	r2, [r4, #0]
1a002f60:	d504      	bpl.n	1a002f6c <__sflush_r+0x7c>
1a002f62:	1c42      	adds	r2, r0, #1
1a002f64:	d101      	bne.n	1a002f6a <__sflush_r+0x7a>
1a002f66:	682b      	ldr	r3, [r5, #0]
1a002f68:	b903      	cbnz	r3, 1a002f6c <__sflush_r+0x7c>
1a002f6a:	6560      	str	r0, [r4, #84]	; 0x54
1a002f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a002f6e:	602f      	str	r7, [r5, #0]
1a002f70:	2900      	cmp	r1, #0
1a002f72:	d0ca      	beq.n	1a002f0a <__sflush_r+0x1a>
1a002f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a002f78:	4299      	cmp	r1, r3
1a002f7a:	d002      	beq.n	1a002f82 <__sflush_r+0x92>
1a002f7c:	4628      	mov	r0, r5
1a002f7e:	f000 f99d 	bl	1a0032bc <_free_r>
1a002f82:	2000      	movs	r0, #0
1a002f84:	6360      	str	r0, [r4, #52]	; 0x34
1a002f86:	e7c1      	b.n	1a002f0c <__sflush_r+0x1c>
1a002f88:	6a21      	ldr	r1, [r4, #32]
1a002f8a:	2301      	movs	r3, #1
1a002f8c:	4628      	mov	r0, r5
1a002f8e:	47b0      	blx	r6
1a002f90:	1c41      	adds	r1, r0, #1
1a002f92:	d1c7      	bne.n	1a002f24 <__sflush_r+0x34>
1a002f94:	682b      	ldr	r3, [r5, #0]
1a002f96:	2b00      	cmp	r3, #0
1a002f98:	d0c4      	beq.n	1a002f24 <__sflush_r+0x34>
1a002f9a:	2b1d      	cmp	r3, #29
1a002f9c:	d001      	beq.n	1a002fa2 <__sflush_r+0xb2>
1a002f9e:	2b16      	cmp	r3, #22
1a002fa0:	d101      	bne.n	1a002fa6 <__sflush_r+0xb6>
1a002fa2:	602f      	str	r7, [r5, #0]
1a002fa4:	e7b1      	b.n	1a002f0a <__sflush_r+0x1a>
1a002fa6:	89a3      	ldrh	r3, [r4, #12]
1a002fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002fac:	81a3      	strh	r3, [r4, #12]
1a002fae:	e7ad      	b.n	1a002f0c <__sflush_r+0x1c>
1a002fb0:	690f      	ldr	r7, [r1, #16]
1a002fb2:	2f00      	cmp	r7, #0
1a002fb4:	d0a9      	beq.n	1a002f0a <__sflush_r+0x1a>
1a002fb6:	0793      	lsls	r3, r2, #30
1a002fb8:	680e      	ldr	r6, [r1, #0]
1a002fba:	bf08      	it	eq
1a002fbc:	694b      	ldreq	r3, [r1, #20]
1a002fbe:	600f      	str	r7, [r1, #0]
1a002fc0:	bf18      	it	ne
1a002fc2:	2300      	movne	r3, #0
1a002fc4:	eba6 0807 	sub.w	r8, r6, r7
1a002fc8:	608b      	str	r3, [r1, #8]
1a002fca:	f1b8 0f00 	cmp.w	r8, #0
1a002fce:	dd9c      	ble.n	1a002f0a <__sflush_r+0x1a>
1a002fd0:	4643      	mov	r3, r8
1a002fd2:	463a      	mov	r2, r7
1a002fd4:	6a21      	ldr	r1, [r4, #32]
1a002fd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a002fd8:	4628      	mov	r0, r5
1a002fda:	47b0      	blx	r6
1a002fdc:	2800      	cmp	r0, #0
1a002fde:	dc06      	bgt.n	1a002fee <__sflush_r+0xfe>
1a002fe0:	89a3      	ldrh	r3, [r4, #12]
1a002fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002fe6:	81a3      	strh	r3, [r4, #12]
1a002fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002fec:	e78e      	b.n	1a002f0c <__sflush_r+0x1c>
1a002fee:	4407      	add	r7, r0
1a002ff0:	eba8 0800 	sub.w	r8, r8, r0
1a002ff4:	e7e9      	b.n	1a002fca <__sflush_r+0xda>
1a002ff6:	bf00      	nop
1a002ff8:	20400001 	.word	0x20400001

1a002ffc <_fflush_r>:
1a002ffc:	b538      	push	{r3, r4, r5, lr}
1a002ffe:	690b      	ldr	r3, [r1, #16]
1a003000:	4605      	mov	r5, r0
1a003002:	460c      	mov	r4, r1
1a003004:	b913      	cbnz	r3, 1a00300c <_fflush_r+0x10>
1a003006:	2500      	movs	r5, #0
1a003008:	4628      	mov	r0, r5
1a00300a:	bd38      	pop	{r3, r4, r5, pc}
1a00300c:	b118      	cbz	r0, 1a003016 <_fflush_r+0x1a>
1a00300e:	6983      	ldr	r3, [r0, #24]
1a003010:	b90b      	cbnz	r3, 1a003016 <_fflush_r+0x1a>
1a003012:	f000 f887 	bl	1a003124 <__sinit>
1a003016:	4b14      	ldr	r3, [pc, #80]	; (1a003068 <_fflush_r+0x6c>)
1a003018:	429c      	cmp	r4, r3
1a00301a:	d11b      	bne.n	1a003054 <_fflush_r+0x58>
1a00301c:	686c      	ldr	r4, [r5, #4]
1a00301e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003022:	2b00      	cmp	r3, #0
1a003024:	d0ef      	beq.n	1a003006 <_fflush_r+0xa>
1a003026:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a003028:	07d0      	lsls	r0, r2, #31
1a00302a:	d404      	bmi.n	1a003036 <_fflush_r+0x3a>
1a00302c:	0599      	lsls	r1, r3, #22
1a00302e:	d402      	bmi.n	1a003036 <_fflush_r+0x3a>
1a003030:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003032:	f000 f938 	bl	1a0032a6 <__retarget_lock_acquire_recursive>
1a003036:	4628      	mov	r0, r5
1a003038:	4621      	mov	r1, r4
1a00303a:	f7ff ff59 	bl	1a002ef0 <__sflush_r>
1a00303e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003040:	07da      	lsls	r2, r3, #31
1a003042:	4605      	mov	r5, r0
1a003044:	d4e0      	bmi.n	1a003008 <_fflush_r+0xc>
1a003046:	89a3      	ldrh	r3, [r4, #12]
1a003048:	059b      	lsls	r3, r3, #22
1a00304a:	d4dd      	bmi.n	1a003008 <_fflush_r+0xc>
1a00304c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00304e:	f000 f92b 	bl	1a0032a8 <__retarget_lock_release_recursive>
1a003052:	e7d9      	b.n	1a003008 <_fflush_r+0xc>
1a003054:	4b05      	ldr	r3, [pc, #20]	; (1a00306c <_fflush_r+0x70>)
1a003056:	429c      	cmp	r4, r3
1a003058:	d101      	bne.n	1a00305e <_fflush_r+0x62>
1a00305a:	68ac      	ldr	r4, [r5, #8]
1a00305c:	e7df      	b.n	1a00301e <_fflush_r+0x22>
1a00305e:	4b04      	ldr	r3, [pc, #16]	; (1a003070 <_fflush_r+0x74>)
1a003060:	429c      	cmp	r4, r3
1a003062:	bf08      	it	eq
1a003064:	68ec      	ldreq	r4, [r5, #12]
1a003066:	e7da      	b.n	1a00301e <_fflush_r+0x22>
1a003068:	1a0040e4 	.word	0x1a0040e4
1a00306c:	1a004104 	.word	0x1a004104
1a003070:	1a0040c4 	.word	0x1a0040c4

1a003074 <std>:
1a003074:	2300      	movs	r3, #0
1a003076:	b510      	push	{r4, lr}
1a003078:	4604      	mov	r4, r0
1a00307a:	e9c0 3300 	strd	r3, r3, [r0]
1a00307e:	6083      	str	r3, [r0, #8]
1a003080:	8181      	strh	r1, [r0, #12]
1a003082:	6643      	str	r3, [r0, #100]	; 0x64
1a003084:	81c2      	strh	r2, [r0, #14]
1a003086:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a00308a:	6183      	str	r3, [r0, #24]
1a00308c:	4619      	mov	r1, r3
1a00308e:	2208      	movs	r2, #8
1a003090:	305c      	adds	r0, #92	; 0x5c
1a003092:	f000 f90a 	bl	1a0032aa <memset>
1a003096:	4b05      	ldr	r3, [pc, #20]	; (1a0030ac <std+0x38>)
1a003098:	6263      	str	r3, [r4, #36]	; 0x24
1a00309a:	4b05      	ldr	r3, [pc, #20]	; (1a0030b0 <std+0x3c>)
1a00309c:	62a3      	str	r3, [r4, #40]	; 0x28
1a00309e:	4b05      	ldr	r3, [pc, #20]	; (1a0030b4 <std+0x40>)
1a0030a0:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0030a2:	4b05      	ldr	r3, [pc, #20]	; (1a0030b8 <std+0x44>)
1a0030a4:	6224      	str	r4, [r4, #32]
1a0030a6:	6323      	str	r3, [r4, #48]	; 0x30
1a0030a8:	bd10      	pop	{r4, pc}
1a0030aa:	bf00      	nop
1a0030ac:	1a0039f5 	.word	0x1a0039f5
1a0030b0:	1a003a17 	.word	0x1a003a17
1a0030b4:	1a003a4f 	.word	0x1a003a4f
1a0030b8:	1a003a73 	.word	0x1a003a73

1a0030bc <_cleanup_r>:
1a0030bc:	4901      	ldr	r1, [pc, #4]	; (1a0030c4 <_cleanup_r+0x8>)
1a0030be:	f000 b8af 	b.w	1a003220 <_fwalk_reent>
1a0030c2:	bf00      	nop
1a0030c4:	1a002ffd 	.word	0x1a002ffd

1a0030c8 <__sfmoreglue>:
1a0030c8:	b570      	push	{r4, r5, r6, lr}
1a0030ca:	1e4a      	subs	r2, r1, #1
1a0030cc:	2568      	movs	r5, #104	; 0x68
1a0030ce:	4355      	muls	r5, r2
1a0030d0:	460e      	mov	r6, r1
1a0030d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a0030d6:	f000 f93f 	bl	1a003358 <_malloc_r>
1a0030da:	4604      	mov	r4, r0
1a0030dc:	b140      	cbz	r0, 1a0030f0 <__sfmoreglue+0x28>
1a0030de:	2100      	movs	r1, #0
1a0030e0:	e9c0 1600 	strd	r1, r6, [r0]
1a0030e4:	300c      	adds	r0, #12
1a0030e6:	60a0      	str	r0, [r4, #8]
1a0030e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a0030ec:	f000 f8dd 	bl	1a0032aa <memset>
1a0030f0:	4620      	mov	r0, r4
1a0030f2:	bd70      	pop	{r4, r5, r6, pc}

1a0030f4 <__sfp_lock_acquire>:
1a0030f4:	4801      	ldr	r0, [pc, #4]	; (1a0030fc <__sfp_lock_acquire+0x8>)
1a0030f6:	f000 b8d6 	b.w	1a0032a6 <__retarget_lock_acquire_recursive>
1a0030fa:	bf00      	nop
1a0030fc:	10000700 	.word	0x10000700

1a003100 <__sfp_lock_release>:
1a003100:	4801      	ldr	r0, [pc, #4]	; (1a003108 <__sfp_lock_release+0x8>)
1a003102:	f000 b8d1 	b.w	1a0032a8 <__retarget_lock_release_recursive>
1a003106:	bf00      	nop
1a003108:	10000700 	.word	0x10000700

1a00310c <__sinit_lock_acquire>:
1a00310c:	4801      	ldr	r0, [pc, #4]	; (1a003114 <__sinit_lock_acquire+0x8>)
1a00310e:	f000 b8ca 	b.w	1a0032a6 <__retarget_lock_acquire_recursive>
1a003112:	bf00      	nop
1a003114:	100006fb 	.word	0x100006fb

1a003118 <__sinit_lock_release>:
1a003118:	4801      	ldr	r0, [pc, #4]	; (1a003120 <__sinit_lock_release+0x8>)
1a00311a:	f000 b8c5 	b.w	1a0032a8 <__retarget_lock_release_recursive>
1a00311e:	bf00      	nop
1a003120:	100006fb 	.word	0x100006fb

1a003124 <__sinit>:
1a003124:	b510      	push	{r4, lr}
1a003126:	4604      	mov	r4, r0
1a003128:	f7ff fff0 	bl	1a00310c <__sinit_lock_acquire>
1a00312c:	69a3      	ldr	r3, [r4, #24]
1a00312e:	b11b      	cbz	r3, 1a003138 <__sinit+0x14>
1a003130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003134:	f7ff bff0 	b.w	1a003118 <__sinit_lock_release>
1a003138:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a00313c:	6523      	str	r3, [r4, #80]	; 0x50
1a00313e:	4b13      	ldr	r3, [pc, #76]	; (1a00318c <__sinit+0x68>)
1a003140:	4a13      	ldr	r2, [pc, #76]	; (1a003190 <__sinit+0x6c>)
1a003142:	681b      	ldr	r3, [r3, #0]
1a003144:	62a2      	str	r2, [r4, #40]	; 0x28
1a003146:	42a3      	cmp	r3, r4
1a003148:	bf04      	itt	eq
1a00314a:	2301      	moveq	r3, #1
1a00314c:	61a3      	streq	r3, [r4, #24]
1a00314e:	4620      	mov	r0, r4
1a003150:	f000 f820 	bl	1a003194 <__sfp>
1a003154:	6060      	str	r0, [r4, #4]
1a003156:	4620      	mov	r0, r4
1a003158:	f000 f81c 	bl	1a003194 <__sfp>
1a00315c:	60a0      	str	r0, [r4, #8]
1a00315e:	4620      	mov	r0, r4
1a003160:	f000 f818 	bl	1a003194 <__sfp>
1a003164:	2200      	movs	r2, #0
1a003166:	60e0      	str	r0, [r4, #12]
1a003168:	2104      	movs	r1, #4
1a00316a:	6860      	ldr	r0, [r4, #4]
1a00316c:	f7ff ff82 	bl	1a003074 <std>
1a003170:	2201      	movs	r2, #1
1a003172:	2109      	movs	r1, #9
1a003174:	68a0      	ldr	r0, [r4, #8]
1a003176:	f7ff ff7d 	bl	1a003074 <std>
1a00317a:	2202      	movs	r2, #2
1a00317c:	2112      	movs	r1, #18
1a00317e:	68e0      	ldr	r0, [r4, #12]
1a003180:	f7ff ff78 	bl	1a003074 <std>
1a003184:	2301      	movs	r3, #1
1a003186:	61a3      	str	r3, [r4, #24]
1a003188:	e7d2      	b.n	1a003130 <__sinit+0xc>
1a00318a:	bf00      	nop
1a00318c:	1a004124 	.word	0x1a004124
1a003190:	1a0030bd 	.word	0x1a0030bd

1a003194 <__sfp>:
1a003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003196:	4607      	mov	r7, r0
1a003198:	f7ff ffac 	bl	1a0030f4 <__sfp_lock_acquire>
1a00319c:	4b1e      	ldr	r3, [pc, #120]	; (1a003218 <__sfp+0x84>)
1a00319e:	681e      	ldr	r6, [r3, #0]
1a0031a0:	69b3      	ldr	r3, [r6, #24]
1a0031a2:	b913      	cbnz	r3, 1a0031aa <__sfp+0x16>
1a0031a4:	4630      	mov	r0, r6
1a0031a6:	f7ff ffbd 	bl	1a003124 <__sinit>
1a0031aa:	3648      	adds	r6, #72	; 0x48
1a0031ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a0031b0:	3b01      	subs	r3, #1
1a0031b2:	d503      	bpl.n	1a0031bc <__sfp+0x28>
1a0031b4:	6833      	ldr	r3, [r6, #0]
1a0031b6:	b30b      	cbz	r3, 1a0031fc <__sfp+0x68>
1a0031b8:	6836      	ldr	r6, [r6, #0]
1a0031ba:	e7f7      	b.n	1a0031ac <__sfp+0x18>
1a0031bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0031c0:	b9d5      	cbnz	r5, 1a0031f8 <__sfp+0x64>
1a0031c2:	4b16      	ldr	r3, [pc, #88]	; (1a00321c <__sfp+0x88>)
1a0031c4:	60e3      	str	r3, [r4, #12]
1a0031c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0031ca:	6665      	str	r5, [r4, #100]	; 0x64
1a0031cc:	f000 f86a 	bl	1a0032a4 <__retarget_lock_init_recursive>
1a0031d0:	f7ff ff96 	bl	1a003100 <__sfp_lock_release>
1a0031d4:	6025      	str	r5, [r4, #0]
1a0031d6:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a0031da:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a0031de:	61a5      	str	r5, [r4, #24]
1a0031e0:	2208      	movs	r2, #8
1a0031e2:	4629      	mov	r1, r5
1a0031e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0031e8:	f000 f85f 	bl	1a0032aa <memset>
1a0031ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a0031f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a0031f4:	4620      	mov	r0, r4
1a0031f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0031f8:	3468      	adds	r4, #104	; 0x68
1a0031fa:	e7d9      	b.n	1a0031b0 <__sfp+0x1c>
1a0031fc:	2104      	movs	r1, #4
1a0031fe:	4638      	mov	r0, r7
1a003200:	f7ff ff62 	bl	1a0030c8 <__sfmoreglue>
1a003204:	4604      	mov	r4, r0
1a003206:	6030      	str	r0, [r6, #0]
1a003208:	2800      	cmp	r0, #0
1a00320a:	d1d5      	bne.n	1a0031b8 <__sfp+0x24>
1a00320c:	f7ff ff78 	bl	1a003100 <__sfp_lock_release>
1a003210:	230c      	movs	r3, #12
1a003212:	603b      	str	r3, [r7, #0]
1a003214:	e7ee      	b.n	1a0031f4 <__sfp+0x60>
1a003216:	bf00      	nop
1a003218:	1a004124 	.word	0x1a004124
1a00321c:	ffff0001 	.word	0xffff0001

1a003220 <_fwalk_reent>:
1a003220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003224:	4680      	mov	r8, r0
1a003226:	4689      	mov	r9, r1
1a003228:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a00322c:	2600      	movs	r6, #0
1a00322e:	b914      	cbnz	r4, 1a003236 <_fwalk_reent+0x16>
1a003230:	4630      	mov	r0, r6
1a003232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003236:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a00323a:	3f01      	subs	r7, #1
1a00323c:	d501      	bpl.n	1a003242 <_fwalk_reent+0x22>
1a00323e:	6824      	ldr	r4, [r4, #0]
1a003240:	e7f5      	b.n	1a00322e <_fwalk_reent+0xe>
1a003242:	89ab      	ldrh	r3, [r5, #12]
1a003244:	2b01      	cmp	r3, #1
1a003246:	d907      	bls.n	1a003258 <_fwalk_reent+0x38>
1a003248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a00324c:	3301      	adds	r3, #1
1a00324e:	d003      	beq.n	1a003258 <_fwalk_reent+0x38>
1a003250:	4629      	mov	r1, r5
1a003252:	4640      	mov	r0, r8
1a003254:	47c8      	blx	r9
1a003256:	4306      	orrs	r6, r0
1a003258:	3568      	adds	r5, #104	; 0x68
1a00325a:	e7ee      	b.n	1a00323a <_fwalk_reent+0x1a>

1a00325c <__libc_init_array>:
1a00325c:	b570      	push	{r4, r5, r6, lr}
1a00325e:	4d0d      	ldr	r5, [pc, #52]	; (1a003294 <__libc_init_array+0x38>)
1a003260:	4c0d      	ldr	r4, [pc, #52]	; (1a003298 <__libc_init_array+0x3c>)
1a003262:	1b64      	subs	r4, r4, r5
1a003264:	10a4      	asrs	r4, r4, #2
1a003266:	2600      	movs	r6, #0
1a003268:	42a6      	cmp	r6, r4
1a00326a:	d109      	bne.n	1a003280 <__libc_init_array+0x24>
1a00326c:	4d0b      	ldr	r5, [pc, #44]	; (1a00329c <__libc_init_array+0x40>)
1a00326e:	4c0c      	ldr	r4, [pc, #48]	; (1a0032a0 <__libc_init_array+0x44>)
1a003270:	f7fe f951 	bl	1a001516 <_init>
1a003274:	1b64      	subs	r4, r4, r5
1a003276:	10a4      	asrs	r4, r4, #2
1a003278:	2600      	movs	r6, #0
1a00327a:	42a6      	cmp	r6, r4
1a00327c:	d105      	bne.n	1a00328a <__libc_init_array+0x2e>
1a00327e:	bd70      	pop	{r4, r5, r6, pc}
1a003280:	f855 3b04 	ldr.w	r3, [r5], #4
1a003284:	4798      	blx	r3
1a003286:	3601      	adds	r6, #1
1a003288:	e7ee      	b.n	1a003268 <__libc_init_array+0xc>
1a00328a:	f855 3b04 	ldr.w	r3, [r5], #4
1a00328e:	4798      	blx	r3
1a003290:	3601      	adds	r6, #1
1a003292:	e7f2      	b.n	1a00327a <__libc_init_array+0x1e>
1a003294:	1a00415c 	.word	0x1a00415c
1a003298:	1a00415c 	.word	0x1a00415c
1a00329c:	1a00415c 	.word	0x1a00415c
1a0032a0:	1a004160 	.word	0x1a004160

1a0032a4 <__retarget_lock_init_recursive>:
1a0032a4:	4770      	bx	lr

1a0032a6 <__retarget_lock_acquire_recursive>:
1a0032a6:	4770      	bx	lr

1a0032a8 <__retarget_lock_release_recursive>:
1a0032a8:	4770      	bx	lr

1a0032aa <memset>:
1a0032aa:	4402      	add	r2, r0
1a0032ac:	4603      	mov	r3, r0
1a0032ae:	4293      	cmp	r3, r2
1a0032b0:	d100      	bne.n	1a0032b4 <memset+0xa>
1a0032b2:	4770      	bx	lr
1a0032b4:	f803 1b01 	strb.w	r1, [r3], #1
1a0032b8:	e7f9      	b.n	1a0032ae <memset+0x4>
1a0032ba:	Address 0x000000001a0032ba is out of bounds.


1a0032bc <_free_r>:
1a0032bc:	b538      	push	{r3, r4, r5, lr}
1a0032be:	4605      	mov	r5, r0
1a0032c0:	2900      	cmp	r1, #0
1a0032c2:	d045      	beq.n	1a003350 <_free_r+0x94>
1a0032c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0032c8:	1f0c      	subs	r4, r1, #4
1a0032ca:	2b00      	cmp	r3, #0
1a0032cc:	bfb8      	it	lt
1a0032ce:	18e4      	addlt	r4, r4, r3
1a0032d0:	f000 fd5e 	bl	1a003d90 <__malloc_lock>
1a0032d4:	4a1f      	ldr	r2, [pc, #124]	; (1a003354 <_free_r+0x98>)
1a0032d6:	6813      	ldr	r3, [r2, #0]
1a0032d8:	4610      	mov	r0, r2
1a0032da:	b933      	cbnz	r3, 1a0032ea <_free_r+0x2e>
1a0032dc:	6063      	str	r3, [r4, #4]
1a0032de:	6014      	str	r4, [r2, #0]
1a0032e0:	4628      	mov	r0, r5
1a0032e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0032e6:	f000 bd59 	b.w	1a003d9c <__malloc_unlock>
1a0032ea:	42a3      	cmp	r3, r4
1a0032ec:	d90c      	bls.n	1a003308 <_free_r+0x4c>
1a0032ee:	6821      	ldr	r1, [r4, #0]
1a0032f0:	1862      	adds	r2, r4, r1
1a0032f2:	4293      	cmp	r3, r2
1a0032f4:	bf04      	itt	eq
1a0032f6:	681a      	ldreq	r2, [r3, #0]
1a0032f8:	685b      	ldreq	r3, [r3, #4]
1a0032fa:	6063      	str	r3, [r4, #4]
1a0032fc:	bf04      	itt	eq
1a0032fe:	1852      	addeq	r2, r2, r1
1a003300:	6022      	streq	r2, [r4, #0]
1a003302:	6004      	str	r4, [r0, #0]
1a003304:	e7ec      	b.n	1a0032e0 <_free_r+0x24>
1a003306:	4613      	mov	r3, r2
1a003308:	685a      	ldr	r2, [r3, #4]
1a00330a:	b10a      	cbz	r2, 1a003310 <_free_r+0x54>
1a00330c:	42a2      	cmp	r2, r4
1a00330e:	d9fa      	bls.n	1a003306 <_free_r+0x4a>
1a003310:	6819      	ldr	r1, [r3, #0]
1a003312:	1858      	adds	r0, r3, r1
1a003314:	42a0      	cmp	r0, r4
1a003316:	d10b      	bne.n	1a003330 <_free_r+0x74>
1a003318:	6820      	ldr	r0, [r4, #0]
1a00331a:	4401      	add	r1, r0
1a00331c:	1858      	adds	r0, r3, r1
1a00331e:	4282      	cmp	r2, r0
1a003320:	6019      	str	r1, [r3, #0]
1a003322:	d1dd      	bne.n	1a0032e0 <_free_r+0x24>
1a003324:	6810      	ldr	r0, [r2, #0]
1a003326:	6852      	ldr	r2, [r2, #4]
1a003328:	605a      	str	r2, [r3, #4]
1a00332a:	4401      	add	r1, r0
1a00332c:	6019      	str	r1, [r3, #0]
1a00332e:	e7d7      	b.n	1a0032e0 <_free_r+0x24>
1a003330:	d902      	bls.n	1a003338 <_free_r+0x7c>
1a003332:	230c      	movs	r3, #12
1a003334:	602b      	str	r3, [r5, #0]
1a003336:	e7d3      	b.n	1a0032e0 <_free_r+0x24>
1a003338:	6820      	ldr	r0, [r4, #0]
1a00333a:	1821      	adds	r1, r4, r0
1a00333c:	428a      	cmp	r2, r1
1a00333e:	bf04      	itt	eq
1a003340:	6811      	ldreq	r1, [r2, #0]
1a003342:	6852      	ldreq	r2, [r2, #4]
1a003344:	6062      	str	r2, [r4, #4]
1a003346:	bf04      	itt	eq
1a003348:	1809      	addeq	r1, r1, r0
1a00334a:	6021      	streq	r1, [r4, #0]
1a00334c:	605c      	str	r4, [r3, #4]
1a00334e:	e7c7      	b.n	1a0032e0 <_free_r+0x24>
1a003350:	bd38      	pop	{r3, r4, r5, pc}
1a003352:	bf00      	nop
1a003354:	100005e8 	.word	0x100005e8

1a003358 <_malloc_r>:
1a003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00335a:	1ccd      	adds	r5, r1, #3
1a00335c:	f025 0503 	bic.w	r5, r5, #3
1a003360:	3508      	adds	r5, #8
1a003362:	2d0c      	cmp	r5, #12
1a003364:	bf38      	it	cc
1a003366:	250c      	movcc	r5, #12
1a003368:	2d00      	cmp	r5, #0
1a00336a:	4606      	mov	r6, r0
1a00336c:	db01      	blt.n	1a003372 <_malloc_r+0x1a>
1a00336e:	42a9      	cmp	r1, r5
1a003370:	d903      	bls.n	1a00337a <_malloc_r+0x22>
1a003372:	230c      	movs	r3, #12
1a003374:	6033      	str	r3, [r6, #0]
1a003376:	2000      	movs	r0, #0
1a003378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00337a:	f000 fd09 	bl	1a003d90 <__malloc_lock>
1a00337e:	4921      	ldr	r1, [pc, #132]	; (1a003404 <_malloc_r+0xac>)
1a003380:	680a      	ldr	r2, [r1, #0]
1a003382:	4614      	mov	r4, r2
1a003384:	b99c      	cbnz	r4, 1a0033ae <_malloc_r+0x56>
1a003386:	4f20      	ldr	r7, [pc, #128]	; (1a003408 <_malloc_r+0xb0>)
1a003388:	683b      	ldr	r3, [r7, #0]
1a00338a:	b923      	cbnz	r3, 1a003396 <_malloc_r+0x3e>
1a00338c:	4621      	mov	r1, r4
1a00338e:	4630      	mov	r0, r6
1a003390:	f7fe f916 	bl	1a0015c0 <_sbrk_r>
1a003394:	6038      	str	r0, [r7, #0]
1a003396:	4629      	mov	r1, r5
1a003398:	4630      	mov	r0, r6
1a00339a:	f7fe f911 	bl	1a0015c0 <_sbrk_r>
1a00339e:	1c43      	adds	r3, r0, #1
1a0033a0:	d123      	bne.n	1a0033ea <_malloc_r+0x92>
1a0033a2:	230c      	movs	r3, #12
1a0033a4:	6033      	str	r3, [r6, #0]
1a0033a6:	4630      	mov	r0, r6
1a0033a8:	f000 fcf8 	bl	1a003d9c <__malloc_unlock>
1a0033ac:	e7e3      	b.n	1a003376 <_malloc_r+0x1e>
1a0033ae:	6823      	ldr	r3, [r4, #0]
1a0033b0:	1b5b      	subs	r3, r3, r5
1a0033b2:	d417      	bmi.n	1a0033e4 <_malloc_r+0x8c>
1a0033b4:	2b0b      	cmp	r3, #11
1a0033b6:	d903      	bls.n	1a0033c0 <_malloc_r+0x68>
1a0033b8:	6023      	str	r3, [r4, #0]
1a0033ba:	441c      	add	r4, r3
1a0033bc:	6025      	str	r5, [r4, #0]
1a0033be:	e004      	b.n	1a0033ca <_malloc_r+0x72>
1a0033c0:	6863      	ldr	r3, [r4, #4]
1a0033c2:	42a2      	cmp	r2, r4
1a0033c4:	bf0c      	ite	eq
1a0033c6:	600b      	streq	r3, [r1, #0]
1a0033c8:	6053      	strne	r3, [r2, #4]
1a0033ca:	4630      	mov	r0, r6
1a0033cc:	f000 fce6 	bl	1a003d9c <__malloc_unlock>
1a0033d0:	f104 000b 	add.w	r0, r4, #11
1a0033d4:	1d23      	adds	r3, r4, #4
1a0033d6:	f020 0007 	bic.w	r0, r0, #7
1a0033da:	1ac2      	subs	r2, r0, r3
1a0033dc:	d0cc      	beq.n	1a003378 <_malloc_r+0x20>
1a0033de:	1a1b      	subs	r3, r3, r0
1a0033e0:	50a3      	str	r3, [r4, r2]
1a0033e2:	e7c9      	b.n	1a003378 <_malloc_r+0x20>
1a0033e4:	4622      	mov	r2, r4
1a0033e6:	6864      	ldr	r4, [r4, #4]
1a0033e8:	e7cc      	b.n	1a003384 <_malloc_r+0x2c>
1a0033ea:	1cc4      	adds	r4, r0, #3
1a0033ec:	f024 0403 	bic.w	r4, r4, #3
1a0033f0:	42a0      	cmp	r0, r4
1a0033f2:	d0e3      	beq.n	1a0033bc <_malloc_r+0x64>
1a0033f4:	1a21      	subs	r1, r4, r0
1a0033f6:	4630      	mov	r0, r6
1a0033f8:	f7fe f8e2 	bl	1a0015c0 <_sbrk_r>
1a0033fc:	3001      	adds	r0, #1
1a0033fe:	d1dd      	bne.n	1a0033bc <_malloc_r+0x64>
1a003400:	e7cf      	b.n	1a0033a2 <_malloc_r+0x4a>
1a003402:	bf00      	nop
1a003404:	100005e8 	.word	0x100005e8
1a003408:	100005ec 	.word	0x100005ec

1a00340c <__sfputc_r>:
1a00340c:	6893      	ldr	r3, [r2, #8]
1a00340e:	3b01      	subs	r3, #1
1a003410:	2b00      	cmp	r3, #0
1a003412:	b410      	push	{r4}
1a003414:	6093      	str	r3, [r2, #8]
1a003416:	da08      	bge.n	1a00342a <__sfputc_r+0x1e>
1a003418:	6994      	ldr	r4, [r2, #24]
1a00341a:	42a3      	cmp	r3, r4
1a00341c:	db01      	blt.n	1a003422 <__sfputc_r+0x16>
1a00341e:	290a      	cmp	r1, #10
1a003420:	d103      	bne.n	1a00342a <__sfputc_r+0x1e>
1a003422:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003426:	f000 bb3f 	b.w	1a003aa8 <__swbuf_r>
1a00342a:	6813      	ldr	r3, [r2, #0]
1a00342c:	1c58      	adds	r0, r3, #1
1a00342e:	6010      	str	r0, [r2, #0]
1a003430:	7019      	strb	r1, [r3, #0]
1a003432:	4608      	mov	r0, r1
1a003434:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003438:	4770      	bx	lr

1a00343a <__sfputs_r>:
1a00343a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00343c:	4606      	mov	r6, r0
1a00343e:	460f      	mov	r7, r1
1a003440:	4614      	mov	r4, r2
1a003442:	18d5      	adds	r5, r2, r3
1a003444:	42ac      	cmp	r4, r5
1a003446:	d101      	bne.n	1a00344c <__sfputs_r+0x12>
1a003448:	2000      	movs	r0, #0
1a00344a:	e007      	b.n	1a00345c <__sfputs_r+0x22>
1a00344c:	463a      	mov	r2, r7
1a00344e:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003452:	4630      	mov	r0, r6
1a003454:	f7ff ffda 	bl	1a00340c <__sfputc_r>
1a003458:	1c43      	adds	r3, r0, #1
1a00345a:	d1f3      	bne.n	1a003444 <__sfputs_r+0xa>
1a00345c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00345e:	Address 0x000000001a00345e is out of bounds.


1a003460 <_vfiprintf_r>:
1a003460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003464:	460d      	mov	r5, r1
1a003466:	b09d      	sub	sp, #116	; 0x74
1a003468:	4614      	mov	r4, r2
1a00346a:	461e      	mov	r6, r3
1a00346c:	4607      	mov	r7, r0
1a00346e:	b118      	cbz	r0, 1a003478 <_vfiprintf_r+0x18>
1a003470:	6983      	ldr	r3, [r0, #24]
1a003472:	b90b      	cbnz	r3, 1a003478 <_vfiprintf_r+0x18>
1a003474:	f7ff fe56 	bl	1a003124 <__sinit>
1a003478:	4b85      	ldr	r3, [pc, #532]	; (1a003690 <_vfiprintf_r+0x230>)
1a00347a:	429d      	cmp	r5, r3
1a00347c:	d11b      	bne.n	1a0034b6 <_vfiprintf_r+0x56>
1a00347e:	687d      	ldr	r5, [r7, #4]
1a003480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003482:	07d9      	lsls	r1, r3, #31
1a003484:	d405      	bmi.n	1a003492 <_vfiprintf_r+0x32>
1a003486:	89ab      	ldrh	r3, [r5, #12]
1a003488:	059a      	lsls	r2, r3, #22
1a00348a:	d402      	bmi.n	1a003492 <_vfiprintf_r+0x32>
1a00348c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00348e:	f7ff ff0a 	bl	1a0032a6 <__retarget_lock_acquire_recursive>
1a003492:	89ab      	ldrh	r3, [r5, #12]
1a003494:	071b      	lsls	r3, r3, #28
1a003496:	d501      	bpl.n	1a00349c <_vfiprintf_r+0x3c>
1a003498:	692b      	ldr	r3, [r5, #16]
1a00349a:	b9eb      	cbnz	r3, 1a0034d8 <_vfiprintf_r+0x78>
1a00349c:	4629      	mov	r1, r5
1a00349e:	4638      	mov	r0, r7
1a0034a0:	f000 fb54 	bl	1a003b4c <__swsetup_r>
1a0034a4:	b1c0      	cbz	r0, 1a0034d8 <_vfiprintf_r+0x78>
1a0034a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0034a8:	07d8      	lsls	r0, r3, #31
1a0034aa:	d50e      	bpl.n	1a0034ca <_vfiprintf_r+0x6a>
1a0034ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0034b0:	b01d      	add	sp, #116	; 0x74
1a0034b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0034b6:	4b77      	ldr	r3, [pc, #476]	; (1a003694 <_vfiprintf_r+0x234>)
1a0034b8:	429d      	cmp	r5, r3
1a0034ba:	d101      	bne.n	1a0034c0 <_vfiprintf_r+0x60>
1a0034bc:	68bd      	ldr	r5, [r7, #8]
1a0034be:	e7df      	b.n	1a003480 <_vfiprintf_r+0x20>
1a0034c0:	4b75      	ldr	r3, [pc, #468]	; (1a003698 <_vfiprintf_r+0x238>)
1a0034c2:	429d      	cmp	r5, r3
1a0034c4:	bf08      	it	eq
1a0034c6:	68fd      	ldreq	r5, [r7, #12]
1a0034c8:	e7da      	b.n	1a003480 <_vfiprintf_r+0x20>
1a0034ca:	89ab      	ldrh	r3, [r5, #12]
1a0034cc:	0599      	lsls	r1, r3, #22
1a0034ce:	d4ed      	bmi.n	1a0034ac <_vfiprintf_r+0x4c>
1a0034d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0034d2:	f7ff fee9 	bl	1a0032a8 <__retarget_lock_release_recursive>
1a0034d6:	e7e9      	b.n	1a0034ac <_vfiprintf_r+0x4c>
1a0034d8:	2300      	movs	r3, #0
1a0034da:	9309      	str	r3, [sp, #36]	; 0x24
1a0034dc:	2320      	movs	r3, #32
1a0034de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a0034e2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a00369c <_vfiprintf_r+0x23c>
1a0034e6:	9603      	str	r6, [sp, #12]
1a0034e8:	2330      	movs	r3, #48	; 0x30
1a0034ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a0034ee:	f04f 0a01 	mov.w	sl, #1
1a0034f2:	4623      	mov	r3, r4
1a0034f4:	461e      	mov	r6, r3
1a0034f6:	f813 2b01 	ldrb.w	r2, [r3], #1
1a0034fa:	b10a      	cbz	r2, 1a003500 <_vfiprintf_r+0xa0>
1a0034fc:	2a25      	cmp	r2, #37	; 0x25
1a0034fe:	d1f9      	bne.n	1a0034f4 <_vfiprintf_r+0x94>
1a003500:	ebb6 0b04 	subs.w	fp, r6, r4
1a003504:	d00b      	beq.n	1a00351e <_vfiprintf_r+0xbe>
1a003506:	465b      	mov	r3, fp
1a003508:	4622      	mov	r2, r4
1a00350a:	4629      	mov	r1, r5
1a00350c:	4638      	mov	r0, r7
1a00350e:	f7ff ff94 	bl	1a00343a <__sfputs_r>
1a003512:	3001      	adds	r0, #1
1a003514:	f000 80a3 	beq.w	1a00365e <_vfiprintf_r+0x1fe>
1a003518:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00351a:	445b      	add	r3, fp
1a00351c:	9309      	str	r3, [sp, #36]	; 0x24
1a00351e:	7833      	ldrb	r3, [r6, #0]
1a003520:	2b00      	cmp	r3, #0
1a003522:	f000 809c 	beq.w	1a00365e <_vfiprintf_r+0x1fe>
1a003526:	2300      	movs	r3, #0
1a003528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00352c:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a003530:	3601      	adds	r6, #1
1a003532:	9304      	str	r3, [sp, #16]
1a003534:	9307      	str	r3, [sp, #28]
1a003536:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a00353a:	931a      	str	r3, [sp, #104]	; 0x68
1a00353c:	4634      	mov	r4, r6
1a00353e:	2205      	movs	r2, #5
1a003540:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003544:	4855      	ldr	r0, [pc, #340]	; (1a00369c <_vfiprintf_r+0x23c>)
1a003546:	f000 fbd3 	bl	1a003cf0 <memchr>
1a00354a:	9b04      	ldr	r3, [sp, #16]
1a00354c:	b9c0      	cbnz	r0, 1a003580 <_vfiprintf_r+0x120>
1a00354e:	06da      	lsls	r2, r3, #27
1a003550:	bf44      	itt	mi
1a003552:	2220      	movmi	r2, #32
1a003554:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003558:	0718      	lsls	r0, r3, #28
1a00355a:	bf44      	itt	mi
1a00355c:	222b      	movmi	r2, #43	; 0x2b
1a00355e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003562:	7832      	ldrb	r2, [r6, #0]
1a003564:	2a2a      	cmp	r2, #42	; 0x2a
1a003566:	d013      	beq.n	1a003590 <_vfiprintf_r+0x130>
1a003568:	9a07      	ldr	r2, [sp, #28]
1a00356a:	4634      	mov	r4, r6
1a00356c:	2000      	movs	r0, #0
1a00356e:	260a      	movs	r6, #10
1a003570:	4621      	mov	r1, r4
1a003572:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003576:	3b30      	subs	r3, #48	; 0x30
1a003578:	2b09      	cmp	r3, #9
1a00357a:	d94b      	bls.n	1a003614 <_vfiprintf_r+0x1b4>
1a00357c:	b970      	cbnz	r0, 1a00359c <_vfiprintf_r+0x13c>
1a00357e:	e014      	b.n	1a0035aa <_vfiprintf_r+0x14a>
1a003580:	eba0 0009 	sub.w	r0, r0, r9
1a003584:	fa0a f000 	lsl.w	r0, sl, r0
1a003588:	4318      	orrs	r0, r3
1a00358a:	9004      	str	r0, [sp, #16]
1a00358c:	4626      	mov	r6, r4
1a00358e:	e7d5      	b.n	1a00353c <_vfiprintf_r+0xdc>
1a003590:	9a03      	ldr	r2, [sp, #12]
1a003592:	1d11      	adds	r1, r2, #4
1a003594:	6812      	ldr	r2, [r2, #0]
1a003596:	9103      	str	r1, [sp, #12]
1a003598:	2a00      	cmp	r2, #0
1a00359a:	db01      	blt.n	1a0035a0 <_vfiprintf_r+0x140>
1a00359c:	9207      	str	r2, [sp, #28]
1a00359e:	e004      	b.n	1a0035aa <_vfiprintf_r+0x14a>
1a0035a0:	4252      	negs	r2, r2
1a0035a2:	f043 0302 	orr.w	r3, r3, #2
1a0035a6:	9207      	str	r2, [sp, #28]
1a0035a8:	9304      	str	r3, [sp, #16]
1a0035aa:	7823      	ldrb	r3, [r4, #0]
1a0035ac:	2b2e      	cmp	r3, #46	; 0x2e
1a0035ae:	d10c      	bne.n	1a0035ca <_vfiprintf_r+0x16a>
1a0035b0:	7863      	ldrb	r3, [r4, #1]
1a0035b2:	2b2a      	cmp	r3, #42	; 0x2a
1a0035b4:	d133      	bne.n	1a00361e <_vfiprintf_r+0x1be>
1a0035b6:	9b03      	ldr	r3, [sp, #12]
1a0035b8:	1d1a      	adds	r2, r3, #4
1a0035ba:	681b      	ldr	r3, [r3, #0]
1a0035bc:	9203      	str	r2, [sp, #12]
1a0035be:	2b00      	cmp	r3, #0
1a0035c0:	bfb8      	it	lt
1a0035c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a0035c6:	3402      	adds	r4, #2
1a0035c8:	9305      	str	r3, [sp, #20]
1a0035ca:	4e35      	ldr	r6, [pc, #212]	; (1a0036a0 <_vfiprintf_r+0x240>)
1a0035cc:	7821      	ldrb	r1, [r4, #0]
1a0035ce:	2203      	movs	r2, #3
1a0035d0:	4630      	mov	r0, r6
1a0035d2:	f000 fb8d 	bl	1a003cf0 <memchr>
1a0035d6:	b138      	cbz	r0, 1a0035e8 <_vfiprintf_r+0x188>
1a0035d8:	2340      	movs	r3, #64	; 0x40
1a0035da:	1b80      	subs	r0, r0, r6
1a0035dc:	fa03 f000 	lsl.w	r0, r3, r0
1a0035e0:	9b04      	ldr	r3, [sp, #16]
1a0035e2:	4303      	orrs	r3, r0
1a0035e4:	3401      	adds	r4, #1
1a0035e6:	9304      	str	r3, [sp, #16]
1a0035e8:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0035ec:	482d      	ldr	r0, [pc, #180]	; (1a0036a4 <_vfiprintf_r+0x244>)
1a0035ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0035f2:	2206      	movs	r2, #6
1a0035f4:	f000 fb7c 	bl	1a003cf0 <memchr>
1a0035f8:	2800      	cmp	r0, #0
1a0035fa:	d03f      	beq.n	1a00367c <_vfiprintf_r+0x21c>
1a0035fc:	4b2a      	ldr	r3, [pc, #168]	; (1a0036a8 <_vfiprintf_r+0x248>)
1a0035fe:	bb13      	cbnz	r3, 1a003646 <_vfiprintf_r+0x1e6>
1a003600:	9b03      	ldr	r3, [sp, #12]
1a003602:	3307      	adds	r3, #7
1a003604:	f023 0307 	bic.w	r3, r3, #7
1a003608:	3308      	adds	r3, #8
1a00360a:	9303      	str	r3, [sp, #12]
1a00360c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00360e:	4443      	add	r3, r8
1a003610:	9309      	str	r3, [sp, #36]	; 0x24
1a003612:	e76e      	b.n	1a0034f2 <_vfiprintf_r+0x92>
1a003614:	fb06 3202 	mla	r2, r6, r2, r3
1a003618:	2001      	movs	r0, #1
1a00361a:	460c      	mov	r4, r1
1a00361c:	e7a8      	b.n	1a003570 <_vfiprintf_r+0x110>
1a00361e:	2300      	movs	r3, #0
1a003620:	3401      	adds	r4, #1
1a003622:	9305      	str	r3, [sp, #20]
1a003624:	4619      	mov	r1, r3
1a003626:	260a      	movs	r6, #10
1a003628:	4620      	mov	r0, r4
1a00362a:	f810 2b01 	ldrb.w	r2, [r0], #1
1a00362e:	3a30      	subs	r2, #48	; 0x30
1a003630:	2a09      	cmp	r2, #9
1a003632:	d903      	bls.n	1a00363c <_vfiprintf_r+0x1dc>
1a003634:	2b00      	cmp	r3, #0
1a003636:	d0c8      	beq.n	1a0035ca <_vfiprintf_r+0x16a>
1a003638:	9105      	str	r1, [sp, #20]
1a00363a:	e7c6      	b.n	1a0035ca <_vfiprintf_r+0x16a>
1a00363c:	fb06 2101 	mla	r1, r6, r1, r2
1a003640:	2301      	movs	r3, #1
1a003642:	4604      	mov	r4, r0
1a003644:	e7f0      	b.n	1a003628 <_vfiprintf_r+0x1c8>
1a003646:	ab03      	add	r3, sp, #12
1a003648:	9300      	str	r3, [sp, #0]
1a00364a:	462a      	mov	r2, r5
1a00364c:	4b17      	ldr	r3, [pc, #92]	; (1a0036ac <_vfiprintf_r+0x24c>)
1a00364e:	a904      	add	r1, sp, #16
1a003650:	4638      	mov	r0, r7
1a003652:	f3af 8000 	nop.w
1a003656:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00365a:	4680      	mov	r8, r0
1a00365c:	d1d6      	bne.n	1a00360c <_vfiprintf_r+0x1ac>
1a00365e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003660:	07d9      	lsls	r1, r3, #31
1a003662:	d405      	bmi.n	1a003670 <_vfiprintf_r+0x210>
1a003664:	89ab      	ldrh	r3, [r5, #12]
1a003666:	059a      	lsls	r2, r3, #22
1a003668:	d402      	bmi.n	1a003670 <_vfiprintf_r+0x210>
1a00366a:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00366c:	f7ff fe1c 	bl	1a0032a8 <__retarget_lock_release_recursive>
1a003670:	89ab      	ldrh	r3, [r5, #12]
1a003672:	065b      	lsls	r3, r3, #25
1a003674:	f53f af1a 	bmi.w	1a0034ac <_vfiprintf_r+0x4c>
1a003678:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00367a:	e719      	b.n	1a0034b0 <_vfiprintf_r+0x50>
1a00367c:	ab03      	add	r3, sp, #12
1a00367e:	9300      	str	r3, [sp, #0]
1a003680:	462a      	mov	r2, r5
1a003682:	4b0a      	ldr	r3, [pc, #40]	; (1a0036ac <_vfiprintf_r+0x24c>)
1a003684:	a904      	add	r1, sp, #16
1a003686:	4638      	mov	r0, r7
1a003688:	f000 f888 	bl	1a00379c <_printf_i>
1a00368c:	e7e3      	b.n	1a003656 <_vfiprintf_r+0x1f6>
1a00368e:	bf00      	nop
1a003690:	1a0040e4 	.word	0x1a0040e4
1a003694:	1a004104 	.word	0x1a004104
1a003698:	1a0040c4 	.word	0x1a0040c4
1a00369c:	1a004128 	.word	0x1a004128
1a0036a0:	1a00412e 	.word	0x1a00412e
1a0036a4:	1a004132 	.word	0x1a004132
1a0036a8:	00000000 	.word	0x00000000
1a0036ac:	1a00343b 	.word	0x1a00343b

1a0036b0 <_printf_common>:
1a0036b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0036b4:	4691      	mov	r9, r2
1a0036b6:	461f      	mov	r7, r3
1a0036b8:	688a      	ldr	r2, [r1, #8]
1a0036ba:	690b      	ldr	r3, [r1, #16]
1a0036bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0036c0:	4293      	cmp	r3, r2
1a0036c2:	bfb8      	it	lt
1a0036c4:	4613      	movlt	r3, r2
1a0036c6:	f8c9 3000 	str.w	r3, [r9]
1a0036ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a0036ce:	4606      	mov	r6, r0
1a0036d0:	460c      	mov	r4, r1
1a0036d2:	b112      	cbz	r2, 1a0036da <_printf_common+0x2a>
1a0036d4:	3301      	adds	r3, #1
1a0036d6:	f8c9 3000 	str.w	r3, [r9]
1a0036da:	6823      	ldr	r3, [r4, #0]
1a0036dc:	0699      	lsls	r1, r3, #26
1a0036de:	bf42      	ittt	mi
1a0036e0:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0036e4:	3302      	addmi	r3, #2
1a0036e6:	f8c9 3000 	strmi.w	r3, [r9]
1a0036ea:	6825      	ldr	r5, [r4, #0]
1a0036ec:	f015 0506 	ands.w	r5, r5, #6
1a0036f0:	d107      	bne.n	1a003702 <_printf_common+0x52>
1a0036f2:	f104 0a19 	add.w	sl, r4, #25
1a0036f6:	68e3      	ldr	r3, [r4, #12]
1a0036f8:	f8d9 2000 	ldr.w	r2, [r9]
1a0036fc:	1a9b      	subs	r3, r3, r2
1a0036fe:	42ab      	cmp	r3, r5
1a003700:	dc28      	bgt.n	1a003754 <_printf_common+0xa4>
1a003702:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a003706:	6822      	ldr	r2, [r4, #0]
1a003708:	3300      	adds	r3, #0
1a00370a:	bf18      	it	ne
1a00370c:	2301      	movne	r3, #1
1a00370e:	0692      	lsls	r2, r2, #26
1a003710:	d42d      	bmi.n	1a00376e <_printf_common+0xbe>
1a003712:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a003716:	4639      	mov	r1, r7
1a003718:	4630      	mov	r0, r6
1a00371a:	47c0      	blx	r8
1a00371c:	3001      	adds	r0, #1
1a00371e:	d020      	beq.n	1a003762 <_printf_common+0xb2>
1a003720:	6823      	ldr	r3, [r4, #0]
1a003722:	68e5      	ldr	r5, [r4, #12]
1a003724:	f8d9 2000 	ldr.w	r2, [r9]
1a003728:	f003 0306 	and.w	r3, r3, #6
1a00372c:	2b04      	cmp	r3, #4
1a00372e:	bf08      	it	eq
1a003730:	1aad      	subeq	r5, r5, r2
1a003732:	68a3      	ldr	r3, [r4, #8]
1a003734:	6922      	ldr	r2, [r4, #16]
1a003736:	bf0c      	ite	eq
1a003738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a00373c:	2500      	movne	r5, #0
1a00373e:	4293      	cmp	r3, r2
1a003740:	bfc4      	itt	gt
1a003742:	1a9b      	subgt	r3, r3, r2
1a003744:	18ed      	addgt	r5, r5, r3
1a003746:	f04f 0900 	mov.w	r9, #0
1a00374a:	341a      	adds	r4, #26
1a00374c:	454d      	cmp	r5, r9
1a00374e:	d11a      	bne.n	1a003786 <_printf_common+0xd6>
1a003750:	2000      	movs	r0, #0
1a003752:	e008      	b.n	1a003766 <_printf_common+0xb6>
1a003754:	2301      	movs	r3, #1
1a003756:	4652      	mov	r2, sl
1a003758:	4639      	mov	r1, r7
1a00375a:	4630      	mov	r0, r6
1a00375c:	47c0      	blx	r8
1a00375e:	3001      	adds	r0, #1
1a003760:	d103      	bne.n	1a00376a <_printf_common+0xba>
1a003762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00376a:	3501      	adds	r5, #1
1a00376c:	e7c3      	b.n	1a0036f6 <_printf_common+0x46>
1a00376e:	18e1      	adds	r1, r4, r3
1a003770:	1c5a      	adds	r2, r3, #1
1a003772:	2030      	movs	r0, #48	; 0x30
1a003774:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a003778:	4422      	add	r2, r4
1a00377a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00377e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a003782:	3302      	adds	r3, #2
1a003784:	e7c5      	b.n	1a003712 <_printf_common+0x62>
1a003786:	2301      	movs	r3, #1
1a003788:	4622      	mov	r2, r4
1a00378a:	4639      	mov	r1, r7
1a00378c:	4630      	mov	r0, r6
1a00378e:	47c0      	blx	r8
1a003790:	3001      	adds	r0, #1
1a003792:	d0e6      	beq.n	1a003762 <_printf_common+0xb2>
1a003794:	f109 0901 	add.w	r9, r9, #1
1a003798:	e7d8      	b.n	1a00374c <_printf_common+0x9c>
1a00379a:	Address 0x000000001a00379a is out of bounds.


1a00379c <_printf_i>:
1a00379c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0037a0:	4606      	mov	r6, r0
1a0037a2:	460c      	mov	r4, r1
1a0037a4:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a0037a8:	7e09      	ldrb	r1, [r1, #24]
1a0037aa:	b085      	sub	sp, #20
1a0037ac:	296e      	cmp	r1, #110	; 0x6e
1a0037ae:	4698      	mov	r8, r3
1a0037b0:	4617      	mov	r7, r2
1a0037b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0037b4:	f000 80ba 	beq.w	1a00392c <_printf_i+0x190>
1a0037b8:	d824      	bhi.n	1a003804 <_printf_i+0x68>
1a0037ba:	2963      	cmp	r1, #99	; 0x63
1a0037bc:	d039      	beq.n	1a003832 <_printf_i+0x96>
1a0037be:	d80a      	bhi.n	1a0037d6 <_printf_i+0x3a>
1a0037c0:	2900      	cmp	r1, #0
1a0037c2:	f000 80c3 	beq.w	1a00394c <_printf_i+0x1b0>
1a0037c6:	2958      	cmp	r1, #88	; 0x58
1a0037c8:	f000 8091 	beq.w	1a0038ee <_printf_i+0x152>
1a0037cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0037d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a0037d4:	e035      	b.n	1a003842 <_printf_i+0xa6>
1a0037d6:	2964      	cmp	r1, #100	; 0x64
1a0037d8:	d001      	beq.n	1a0037de <_printf_i+0x42>
1a0037da:	2969      	cmp	r1, #105	; 0x69
1a0037dc:	d1f6      	bne.n	1a0037cc <_printf_i+0x30>
1a0037de:	6825      	ldr	r5, [r4, #0]
1a0037e0:	681a      	ldr	r2, [r3, #0]
1a0037e2:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0037e6:	f102 0104 	add.w	r1, r2, #4
1a0037ea:	d02c      	beq.n	1a003846 <_printf_i+0xaa>
1a0037ec:	6812      	ldr	r2, [r2, #0]
1a0037ee:	6019      	str	r1, [r3, #0]
1a0037f0:	2a00      	cmp	r2, #0
1a0037f2:	da03      	bge.n	1a0037fc <_printf_i+0x60>
1a0037f4:	232d      	movs	r3, #45	; 0x2d
1a0037f6:	4252      	negs	r2, r2
1a0037f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0037fc:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a0039bc <_printf_i+0x220>
1a003800:	230a      	movs	r3, #10
1a003802:	e03f      	b.n	1a003884 <_printf_i+0xe8>
1a003804:	2973      	cmp	r1, #115	; 0x73
1a003806:	f000 80a5 	beq.w	1a003954 <_printf_i+0x1b8>
1a00380a:	d808      	bhi.n	1a00381e <_printf_i+0x82>
1a00380c:	296f      	cmp	r1, #111	; 0x6f
1a00380e:	d021      	beq.n	1a003854 <_printf_i+0xb8>
1a003810:	2970      	cmp	r1, #112	; 0x70
1a003812:	d1db      	bne.n	1a0037cc <_printf_i+0x30>
1a003814:	6822      	ldr	r2, [r4, #0]
1a003816:	f042 0220 	orr.w	r2, r2, #32
1a00381a:	6022      	str	r2, [r4, #0]
1a00381c:	e003      	b.n	1a003826 <_printf_i+0x8a>
1a00381e:	2975      	cmp	r1, #117	; 0x75
1a003820:	d018      	beq.n	1a003854 <_printf_i+0xb8>
1a003822:	2978      	cmp	r1, #120	; 0x78
1a003824:	d1d2      	bne.n	1a0037cc <_printf_i+0x30>
1a003826:	2278      	movs	r2, #120	; 0x78
1a003828:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a00382c:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a0039c0 <_printf_i+0x224>
1a003830:	e061      	b.n	1a0038f6 <_printf_i+0x15a>
1a003832:	681a      	ldr	r2, [r3, #0]
1a003834:	1d11      	adds	r1, r2, #4
1a003836:	6019      	str	r1, [r3, #0]
1a003838:	6813      	ldr	r3, [r2, #0]
1a00383a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00383e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a003842:	2301      	movs	r3, #1
1a003844:	e093      	b.n	1a00396e <_printf_i+0x1d2>
1a003846:	6812      	ldr	r2, [r2, #0]
1a003848:	6019      	str	r1, [r3, #0]
1a00384a:	f015 0f40 	tst.w	r5, #64	; 0x40
1a00384e:	bf18      	it	ne
1a003850:	b212      	sxthne	r2, r2
1a003852:	e7cd      	b.n	1a0037f0 <_printf_i+0x54>
1a003854:	f8d4 c000 	ldr.w	ip, [r4]
1a003858:	681a      	ldr	r2, [r3, #0]
1a00385a:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00385e:	f102 0504 	add.w	r5, r2, #4
1a003862:	601d      	str	r5, [r3, #0]
1a003864:	d001      	beq.n	1a00386a <_printf_i+0xce>
1a003866:	6812      	ldr	r2, [r2, #0]
1a003868:	e003      	b.n	1a003872 <_printf_i+0xd6>
1a00386a:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a00386e:	d0fa      	beq.n	1a003866 <_printf_i+0xca>
1a003870:	8812      	ldrh	r2, [r2, #0]
1a003872:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a0039bc <_printf_i+0x220>
1a003876:	296f      	cmp	r1, #111	; 0x6f
1a003878:	bf0c      	ite	eq
1a00387a:	2308      	moveq	r3, #8
1a00387c:	230a      	movne	r3, #10
1a00387e:	2100      	movs	r1, #0
1a003880:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a003884:	6865      	ldr	r5, [r4, #4]
1a003886:	60a5      	str	r5, [r4, #8]
1a003888:	2d00      	cmp	r5, #0
1a00388a:	bfa2      	ittt	ge
1a00388c:	6821      	ldrge	r1, [r4, #0]
1a00388e:	f021 0104 	bicge.w	r1, r1, #4
1a003892:	6021      	strge	r1, [r4, #0]
1a003894:	b90a      	cbnz	r2, 1a00389a <_printf_i+0xfe>
1a003896:	2d00      	cmp	r5, #0
1a003898:	d046      	beq.n	1a003928 <_printf_i+0x18c>
1a00389a:	4605      	mov	r5, r0
1a00389c:	fbb2 f1f3 	udiv	r1, r2, r3
1a0038a0:	fb03 2e11 	mls	lr, r3, r1, r2
1a0038a4:	4293      	cmp	r3, r2
1a0038a6:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a0038aa:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a0038ae:	d939      	bls.n	1a003924 <_printf_i+0x188>
1a0038b0:	2b08      	cmp	r3, #8
1a0038b2:	d10b      	bne.n	1a0038cc <_printf_i+0x130>
1a0038b4:	6823      	ldr	r3, [r4, #0]
1a0038b6:	07da      	lsls	r2, r3, #31
1a0038b8:	d508      	bpl.n	1a0038cc <_printf_i+0x130>
1a0038ba:	6923      	ldr	r3, [r4, #16]
1a0038bc:	6862      	ldr	r2, [r4, #4]
1a0038be:	429a      	cmp	r2, r3
1a0038c0:	bfde      	ittt	le
1a0038c2:	2330      	movle	r3, #48	; 0x30
1a0038c4:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0038c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a0038cc:	1b40      	subs	r0, r0, r5
1a0038ce:	6120      	str	r0, [r4, #16]
1a0038d0:	f8cd 8000 	str.w	r8, [sp]
1a0038d4:	463b      	mov	r3, r7
1a0038d6:	aa03      	add	r2, sp, #12
1a0038d8:	4621      	mov	r1, r4
1a0038da:	4630      	mov	r0, r6
1a0038dc:	f7ff fee8 	bl	1a0036b0 <_printf_common>
1a0038e0:	3001      	adds	r0, #1
1a0038e2:	d149      	bne.n	1a003978 <_printf_i+0x1dc>
1a0038e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0038e8:	b005      	add	sp, #20
1a0038ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0038ee:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a0039bc <_printf_i+0x220>
1a0038f2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0038f6:	681d      	ldr	r5, [r3, #0]
1a0038f8:	6821      	ldr	r1, [r4, #0]
1a0038fa:	f855 2b04 	ldr.w	r2, [r5], #4
1a0038fe:	601d      	str	r5, [r3, #0]
1a003900:	060d      	lsls	r5, r1, #24
1a003902:	d50b      	bpl.n	1a00391c <_printf_i+0x180>
1a003904:	07cd      	lsls	r5, r1, #31
1a003906:	bf44      	itt	mi
1a003908:	f041 0120 	orrmi.w	r1, r1, #32
1a00390c:	6021      	strmi	r1, [r4, #0]
1a00390e:	b91a      	cbnz	r2, 1a003918 <_printf_i+0x17c>
1a003910:	6823      	ldr	r3, [r4, #0]
1a003912:	f023 0320 	bic.w	r3, r3, #32
1a003916:	6023      	str	r3, [r4, #0]
1a003918:	2310      	movs	r3, #16
1a00391a:	e7b0      	b.n	1a00387e <_printf_i+0xe2>
1a00391c:	064b      	lsls	r3, r1, #25
1a00391e:	bf48      	it	mi
1a003920:	b292      	uxthmi	r2, r2
1a003922:	e7ef      	b.n	1a003904 <_printf_i+0x168>
1a003924:	460a      	mov	r2, r1
1a003926:	e7b9      	b.n	1a00389c <_printf_i+0x100>
1a003928:	4605      	mov	r5, r0
1a00392a:	e7c1      	b.n	1a0038b0 <_printf_i+0x114>
1a00392c:	681a      	ldr	r2, [r3, #0]
1a00392e:	f8d4 c000 	ldr.w	ip, [r4]
1a003932:	6961      	ldr	r1, [r4, #20]
1a003934:	1d15      	adds	r5, r2, #4
1a003936:	601d      	str	r5, [r3, #0]
1a003938:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00393c:	6813      	ldr	r3, [r2, #0]
1a00393e:	d001      	beq.n	1a003944 <_printf_i+0x1a8>
1a003940:	6019      	str	r1, [r3, #0]
1a003942:	e003      	b.n	1a00394c <_printf_i+0x1b0>
1a003944:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a003948:	d0fa      	beq.n	1a003940 <_printf_i+0x1a4>
1a00394a:	8019      	strh	r1, [r3, #0]
1a00394c:	2300      	movs	r3, #0
1a00394e:	6123      	str	r3, [r4, #16]
1a003950:	4605      	mov	r5, r0
1a003952:	e7bd      	b.n	1a0038d0 <_printf_i+0x134>
1a003954:	681a      	ldr	r2, [r3, #0]
1a003956:	1d11      	adds	r1, r2, #4
1a003958:	6019      	str	r1, [r3, #0]
1a00395a:	6815      	ldr	r5, [r2, #0]
1a00395c:	6862      	ldr	r2, [r4, #4]
1a00395e:	2100      	movs	r1, #0
1a003960:	4628      	mov	r0, r5
1a003962:	f000 f9c5 	bl	1a003cf0 <memchr>
1a003966:	b108      	cbz	r0, 1a00396c <_printf_i+0x1d0>
1a003968:	1b40      	subs	r0, r0, r5
1a00396a:	6060      	str	r0, [r4, #4]
1a00396c:	6863      	ldr	r3, [r4, #4]
1a00396e:	6123      	str	r3, [r4, #16]
1a003970:	2300      	movs	r3, #0
1a003972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a003976:	e7ab      	b.n	1a0038d0 <_printf_i+0x134>
1a003978:	6923      	ldr	r3, [r4, #16]
1a00397a:	462a      	mov	r2, r5
1a00397c:	4639      	mov	r1, r7
1a00397e:	4630      	mov	r0, r6
1a003980:	47c0      	blx	r8
1a003982:	3001      	adds	r0, #1
1a003984:	d0ae      	beq.n	1a0038e4 <_printf_i+0x148>
1a003986:	6823      	ldr	r3, [r4, #0]
1a003988:	079b      	lsls	r3, r3, #30
1a00398a:	d413      	bmi.n	1a0039b4 <_printf_i+0x218>
1a00398c:	68e0      	ldr	r0, [r4, #12]
1a00398e:	9b03      	ldr	r3, [sp, #12]
1a003990:	4298      	cmp	r0, r3
1a003992:	bfb8      	it	lt
1a003994:	4618      	movlt	r0, r3
1a003996:	e7a7      	b.n	1a0038e8 <_printf_i+0x14c>
1a003998:	2301      	movs	r3, #1
1a00399a:	464a      	mov	r2, r9
1a00399c:	4639      	mov	r1, r7
1a00399e:	4630      	mov	r0, r6
1a0039a0:	47c0      	blx	r8
1a0039a2:	3001      	adds	r0, #1
1a0039a4:	d09e      	beq.n	1a0038e4 <_printf_i+0x148>
1a0039a6:	3501      	adds	r5, #1
1a0039a8:	68e3      	ldr	r3, [r4, #12]
1a0039aa:	9a03      	ldr	r2, [sp, #12]
1a0039ac:	1a9b      	subs	r3, r3, r2
1a0039ae:	42ab      	cmp	r3, r5
1a0039b0:	dcf2      	bgt.n	1a003998 <_printf_i+0x1fc>
1a0039b2:	e7eb      	b.n	1a00398c <_printf_i+0x1f0>
1a0039b4:	2500      	movs	r5, #0
1a0039b6:	f104 0919 	add.w	r9, r4, #25
1a0039ba:	e7f5      	b.n	1a0039a8 <_printf_i+0x20c>
1a0039bc:	1a004139 	.word	0x1a004139
1a0039c0:	1a00414a 	.word	0x1a00414a

1a0039c4 <iprintf>:
1a0039c4:	b40f      	push	{r0, r1, r2, r3}
1a0039c6:	4b0a      	ldr	r3, [pc, #40]	; (1a0039f0 <iprintf+0x2c>)
1a0039c8:	b513      	push	{r0, r1, r4, lr}
1a0039ca:	681c      	ldr	r4, [r3, #0]
1a0039cc:	b124      	cbz	r4, 1a0039d8 <iprintf+0x14>
1a0039ce:	69a3      	ldr	r3, [r4, #24]
1a0039d0:	b913      	cbnz	r3, 1a0039d8 <iprintf+0x14>
1a0039d2:	4620      	mov	r0, r4
1a0039d4:	f7ff fba6 	bl	1a003124 <__sinit>
1a0039d8:	ab05      	add	r3, sp, #20
1a0039da:	9a04      	ldr	r2, [sp, #16]
1a0039dc:	68a1      	ldr	r1, [r4, #8]
1a0039de:	9301      	str	r3, [sp, #4]
1a0039e0:	4620      	mov	r0, r4
1a0039e2:	f7ff fd3d 	bl	1a003460 <_vfiprintf_r>
1a0039e6:	b002      	add	sp, #8
1a0039e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0039ec:	b004      	add	sp, #16
1a0039ee:	4770      	bx	lr
1a0039f0:	10000088 	.word	0x10000088

1a0039f4 <__sread>:
1a0039f4:	b510      	push	{r4, lr}
1a0039f6:	460c      	mov	r4, r1
1a0039f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0039fc:	f7fd fda4 	bl	1a001548 <_read_r>
1a003a00:	2800      	cmp	r0, #0
1a003a02:	bfab      	itete	ge
1a003a04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a003a06:	89a3      	ldrhlt	r3, [r4, #12]
1a003a08:	181b      	addge	r3, r3, r0
1a003a0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a003a0e:	bfac      	ite	ge
1a003a10:	6563      	strge	r3, [r4, #84]	; 0x54
1a003a12:	81a3      	strhlt	r3, [r4, #12]
1a003a14:	bd10      	pop	{r4, pc}

1a003a16 <__swrite>:
1a003a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003a1a:	461f      	mov	r7, r3
1a003a1c:	898b      	ldrh	r3, [r1, #12]
1a003a1e:	05db      	lsls	r3, r3, #23
1a003a20:	4605      	mov	r5, r0
1a003a22:	460c      	mov	r4, r1
1a003a24:	4616      	mov	r6, r2
1a003a26:	d505      	bpl.n	1a003a34 <__swrite+0x1e>
1a003a28:	2302      	movs	r3, #2
1a003a2a:	2200      	movs	r2, #0
1a003a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003a30:	f7fd fd85 	bl	1a00153e <_lseek_r>
1a003a34:	89a3      	ldrh	r3, [r4, #12]
1a003a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a003a3e:	81a3      	strh	r3, [r4, #12]
1a003a40:	4632      	mov	r2, r6
1a003a42:	463b      	mov	r3, r7
1a003a44:	4628      	mov	r0, r5
1a003a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a003a4a:	f7fd bda4 	b.w	1a001596 <_write_r>

1a003a4e <__sseek>:
1a003a4e:	b510      	push	{r4, lr}
1a003a50:	460c      	mov	r4, r1
1a003a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003a56:	f7fd fd72 	bl	1a00153e <_lseek_r>
1a003a5a:	1c43      	adds	r3, r0, #1
1a003a5c:	89a3      	ldrh	r3, [r4, #12]
1a003a5e:	bf15      	itete	ne
1a003a60:	6560      	strne	r0, [r4, #84]	; 0x54
1a003a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a003a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a003a6a:	81a3      	strheq	r3, [r4, #12]
1a003a6c:	bf18      	it	ne
1a003a6e:	81a3      	strhne	r3, [r4, #12]
1a003a70:	bd10      	pop	{r4, pc}

1a003a72 <__sclose>:
1a003a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003a76:	f7fd bd4f 	b.w	1a001518 <_close_r>

1a003a7a <strstr>:
1a003a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003a7c:	780c      	ldrb	r4, [r1, #0]
1a003a7e:	b164      	cbz	r4, 1a003a9a <strstr+0x20>
1a003a80:	4603      	mov	r3, r0
1a003a82:	781a      	ldrb	r2, [r3, #0]
1a003a84:	4618      	mov	r0, r3
1a003a86:	1c5e      	adds	r6, r3, #1
1a003a88:	b90a      	cbnz	r2, 1a003a8e <strstr+0x14>
1a003a8a:	4610      	mov	r0, r2
1a003a8c:	e005      	b.n	1a003a9a <strstr+0x20>
1a003a8e:	4294      	cmp	r4, r2
1a003a90:	d108      	bne.n	1a003aa4 <strstr+0x2a>
1a003a92:	460d      	mov	r5, r1
1a003a94:	f815 2f01 	ldrb.w	r2, [r5, #1]!
1a003a98:	b902      	cbnz	r2, 1a003a9c <strstr+0x22>
1a003a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a003a9c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
1a003aa0:	4297      	cmp	r7, r2
1a003aa2:	d0f7      	beq.n	1a003a94 <strstr+0x1a>
1a003aa4:	4633      	mov	r3, r6
1a003aa6:	e7ec      	b.n	1a003a82 <strstr+0x8>

1a003aa8 <__swbuf_r>:
1a003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003aaa:	460e      	mov	r6, r1
1a003aac:	4614      	mov	r4, r2
1a003aae:	4605      	mov	r5, r0
1a003ab0:	b118      	cbz	r0, 1a003aba <__swbuf_r+0x12>
1a003ab2:	6983      	ldr	r3, [r0, #24]
1a003ab4:	b90b      	cbnz	r3, 1a003aba <__swbuf_r+0x12>
1a003ab6:	f7ff fb35 	bl	1a003124 <__sinit>
1a003aba:	4b21      	ldr	r3, [pc, #132]	; (1a003b40 <__swbuf_r+0x98>)
1a003abc:	429c      	cmp	r4, r3
1a003abe:	d12b      	bne.n	1a003b18 <__swbuf_r+0x70>
1a003ac0:	686c      	ldr	r4, [r5, #4]
1a003ac2:	69a3      	ldr	r3, [r4, #24]
1a003ac4:	60a3      	str	r3, [r4, #8]
1a003ac6:	89a3      	ldrh	r3, [r4, #12]
1a003ac8:	071a      	lsls	r2, r3, #28
1a003aca:	d52f      	bpl.n	1a003b2c <__swbuf_r+0x84>
1a003acc:	6923      	ldr	r3, [r4, #16]
1a003ace:	b36b      	cbz	r3, 1a003b2c <__swbuf_r+0x84>
1a003ad0:	6923      	ldr	r3, [r4, #16]
1a003ad2:	6820      	ldr	r0, [r4, #0]
1a003ad4:	1ac0      	subs	r0, r0, r3
1a003ad6:	6963      	ldr	r3, [r4, #20]
1a003ad8:	b2f6      	uxtb	r6, r6
1a003ada:	4283      	cmp	r3, r0
1a003adc:	4637      	mov	r7, r6
1a003ade:	dc04      	bgt.n	1a003aea <__swbuf_r+0x42>
1a003ae0:	4621      	mov	r1, r4
1a003ae2:	4628      	mov	r0, r5
1a003ae4:	f7ff fa8a 	bl	1a002ffc <_fflush_r>
1a003ae8:	bb30      	cbnz	r0, 1a003b38 <__swbuf_r+0x90>
1a003aea:	68a3      	ldr	r3, [r4, #8]
1a003aec:	3b01      	subs	r3, #1
1a003aee:	60a3      	str	r3, [r4, #8]
1a003af0:	6823      	ldr	r3, [r4, #0]
1a003af2:	1c5a      	adds	r2, r3, #1
1a003af4:	6022      	str	r2, [r4, #0]
1a003af6:	701e      	strb	r6, [r3, #0]
1a003af8:	6963      	ldr	r3, [r4, #20]
1a003afa:	3001      	adds	r0, #1
1a003afc:	4283      	cmp	r3, r0
1a003afe:	d004      	beq.n	1a003b0a <__swbuf_r+0x62>
1a003b00:	89a3      	ldrh	r3, [r4, #12]
1a003b02:	07db      	lsls	r3, r3, #31
1a003b04:	d506      	bpl.n	1a003b14 <__swbuf_r+0x6c>
1a003b06:	2e0a      	cmp	r6, #10
1a003b08:	d104      	bne.n	1a003b14 <__swbuf_r+0x6c>
1a003b0a:	4621      	mov	r1, r4
1a003b0c:	4628      	mov	r0, r5
1a003b0e:	f7ff fa75 	bl	1a002ffc <_fflush_r>
1a003b12:	b988      	cbnz	r0, 1a003b38 <__swbuf_r+0x90>
1a003b14:	4638      	mov	r0, r7
1a003b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003b18:	4b0a      	ldr	r3, [pc, #40]	; (1a003b44 <__swbuf_r+0x9c>)
1a003b1a:	429c      	cmp	r4, r3
1a003b1c:	d101      	bne.n	1a003b22 <__swbuf_r+0x7a>
1a003b1e:	68ac      	ldr	r4, [r5, #8]
1a003b20:	e7cf      	b.n	1a003ac2 <__swbuf_r+0x1a>
1a003b22:	4b09      	ldr	r3, [pc, #36]	; (1a003b48 <__swbuf_r+0xa0>)
1a003b24:	429c      	cmp	r4, r3
1a003b26:	bf08      	it	eq
1a003b28:	68ec      	ldreq	r4, [r5, #12]
1a003b2a:	e7ca      	b.n	1a003ac2 <__swbuf_r+0x1a>
1a003b2c:	4621      	mov	r1, r4
1a003b2e:	4628      	mov	r0, r5
1a003b30:	f000 f80c 	bl	1a003b4c <__swsetup_r>
1a003b34:	2800      	cmp	r0, #0
1a003b36:	d0cb      	beq.n	1a003ad0 <__swbuf_r+0x28>
1a003b38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a003b3c:	e7ea      	b.n	1a003b14 <__swbuf_r+0x6c>
1a003b3e:	bf00      	nop
1a003b40:	1a0040e4 	.word	0x1a0040e4
1a003b44:	1a004104 	.word	0x1a004104
1a003b48:	1a0040c4 	.word	0x1a0040c4

1a003b4c <__swsetup_r>:
1a003b4c:	4b32      	ldr	r3, [pc, #200]	; (1a003c18 <__swsetup_r+0xcc>)
1a003b4e:	b570      	push	{r4, r5, r6, lr}
1a003b50:	681d      	ldr	r5, [r3, #0]
1a003b52:	4606      	mov	r6, r0
1a003b54:	460c      	mov	r4, r1
1a003b56:	b125      	cbz	r5, 1a003b62 <__swsetup_r+0x16>
1a003b58:	69ab      	ldr	r3, [r5, #24]
1a003b5a:	b913      	cbnz	r3, 1a003b62 <__swsetup_r+0x16>
1a003b5c:	4628      	mov	r0, r5
1a003b5e:	f7ff fae1 	bl	1a003124 <__sinit>
1a003b62:	4b2e      	ldr	r3, [pc, #184]	; (1a003c1c <__swsetup_r+0xd0>)
1a003b64:	429c      	cmp	r4, r3
1a003b66:	d10f      	bne.n	1a003b88 <__swsetup_r+0x3c>
1a003b68:	686c      	ldr	r4, [r5, #4]
1a003b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003b6e:	b29a      	uxth	r2, r3
1a003b70:	0715      	lsls	r5, r2, #28
1a003b72:	d42c      	bmi.n	1a003bce <__swsetup_r+0x82>
1a003b74:	06d0      	lsls	r0, r2, #27
1a003b76:	d411      	bmi.n	1a003b9c <__swsetup_r+0x50>
1a003b78:	2209      	movs	r2, #9
1a003b7a:	6032      	str	r2, [r6, #0]
1a003b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003b80:	81a3      	strh	r3, [r4, #12]
1a003b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003b86:	e03e      	b.n	1a003c06 <__swsetup_r+0xba>
1a003b88:	4b25      	ldr	r3, [pc, #148]	; (1a003c20 <__swsetup_r+0xd4>)
1a003b8a:	429c      	cmp	r4, r3
1a003b8c:	d101      	bne.n	1a003b92 <__swsetup_r+0x46>
1a003b8e:	68ac      	ldr	r4, [r5, #8]
1a003b90:	e7eb      	b.n	1a003b6a <__swsetup_r+0x1e>
1a003b92:	4b24      	ldr	r3, [pc, #144]	; (1a003c24 <__swsetup_r+0xd8>)
1a003b94:	429c      	cmp	r4, r3
1a003b96:	bf08      	it	eq
1a003b98:	68ec      	ldreq	r4, [r5, #12]
1a003b9a:	e7e6      	b.n	1a003b6a <__swsetup_r+0x1e>
1a003b9c:	0751      	lsls	r1, r2, #29
1a003b9e:	d512      	bpl.n	1a003bc6 <__swsetup_r+0x7a>
1a003ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003ba2:	b141      	cbz	r1, 1a003bb6 <__swsetup_r+0x6a>
1a003ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003ba8:	4299      	cmp	r1, r3
1a003baa:	d002      	beq.n	1a003bb2 <__swsetup_r+0x66>
1a003bac:	4630      	mov	r0, r6
1a003bae:	f7ff fb85 	bl	1a0032bc <_free_r>
1a003bb2:	2300      	movs	r3, #0
1a003bb4:	6363      	str	r3, [r4, #52]	; 0x34
1a003bb6:	89a3      	ldrh	r3, [r4, #12]
1a003bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a003bbc:	81a3      	strh	r3, [r4, #12]
1a003bbe:	2300      	movs	r3, #0
1a003bc0:	6063      	str	r3, [r4, #4]
1a003bc2:	6923      	ldr	r3, [r4, #16]
1a003bc4:	6023      	str	r3, [r4, #0]
1a003bc6:	89a3      	ldrh	r3, [r4, #12]
1a003bc8:	f043 0308 	orr.w	r3, r3, #8
1a003bcc:	81a3      	strh	r3, [r4, #12]
1a003bce:	6923      	ldr	r3, [r4, #16]
1a003bd0:	b94b      	cbnz	r3, 1a003be6 <__swsetup_r+0x9a>
1a003bd2:	89a3      	ldrh	r3, [r4, #12]
1a003bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a003bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a003bdc:	d003      	beq.n	1a003be6 <__swsetup_r+0x9a>
1a003bde:	4621      	mov	r1, r4
1a003be0:	4630      	mov	r0, r6
1a003be2:	f000 f845 	bl	1a003c70 <__smakebuf_r>
1a003be6:	89a2      	ldrh	r2, [r4, #12]
1a003be8:	f012 0301 	ands.w	r3, r2, #1
1a003bec:	d00c      	beq.n	1a003c08 <__swsetup_r+0xbc>
1a003bee:	2300      	movs	r3, #0
1a003bf0:	60a3      	str	r3, [r4, #8]
1a003bf2:	6963      	ldr	r3, [r4, #20]
1a003bf4:	425b      	negs	r3, r3
1a003bf6:	61a3      	str	r3, [r4, #24]
1a003bf8:	6923      	ldr	r3, [r4, #16]
1a003bfa:	b953      	cbnz	r3, 1a003c12 <__swsetup_r+0xc6>
1a003bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003c00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a003c04:	d1ba      	bne.n	1a003b7c <__swsetup_r+0x30>
1a003c06:	bd70      	pop	{r4, r5, r6, pc}
1a003c08:	0792      	lsls	r2, r2, #30
1a003c0a:	bf58      	it	pl
1a003c0c:	6963      	ldrpl	r3, [r4, #20]
1a003c0e:	60a3      	str	r3, [r4, #8]
1a003c10:	e7f2      	b.n	1a003bf8 <__swsetup_r+0xac>
1a003c12:	2000      	movs	r0, #0
1a003c14:	e7f7      	b.n	1a003c06 <__swsetup_r+0xba>
1a003c16:	bf00      	nop
1a003c18:	10000088 	.word	0x10000088
1a003c1c:	1a0040e4 	.word	0x1a0040e4
1a003c20:	1a004104 	.word	0x1a004104
1a003c24:	1a0040c4 	.word	0x1a0040c4

1a003c28 <__swhatbuf_r>:
1a003c28:	b570      	push	{r4, r5, r6, lr}
1a003c2a:	460e      	mov	r6, r1
1a003c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003c30:	2900      	cmp	r1, #0
1a003c32:	b096      	sub	sp, #88	; 0x58
1a003c34:	4614      	mov	r4, r2
1a003c36:	461d      	mov	r5, r3
1a003c38:	da07      	bge.n	1a003c4a <__swhatbuf_r+0x22>
1a003c3a:	2300      	movs	r3, #0
1a003c3c:	602b      	str	r3, [r5, #0]
1a003c3e:	89b3      	ldrh	r3, [r6, #12]
1a003c40:	061a      	lsls	r2, r3, #24
1a003c42:	d410      	bmi.n	1a003c66 <__swhatbuf_r+0x3e>
1a003c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a003c48:	e00e      	b.n	1a003c68 <__swhatbuf_r+0x40>
1a003c4a:	466a      	mov	r2, sp
1a003c4c:	f7fd fc69 	bl	1a001522 <_fstat_r>
1a003c50:	2800      	cmp	r0, #0
1a003c52:	dbf2      	blt.n	1a003c3a <__swhatbuf_r+0x12>
1a003c54:	9a01      	ldr	r2, [sp, #4]
1a003c56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a003c5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a003c5e:	425a      	negs	r2, r3
1a003c60:	415a      	adcs	r2, r3
1a003c62:	602a      	str	r2, [r5, #0]
1a003c64:	e7ee      	b.n	1a003c44 <__swhatbuf_r+0x1c>
1a003c66:	2340      	movs	r3, #64	; 0x40
1a003c68:	2000      	movs	r0, #0
1a003c6a:	6023      	str	r3, [r4, #0]
1a003c6c:	b016      	add	sp, #88	; 0x58
1a003c6e:	bd70      	pop	{r4, r5, r6, pc}

1a003c70 <__smakebuf_r>:
1a003c70:	898b      	ldrh	r3, [r1, #12]
1a003c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a003c74:	079d      	lsls	r5, r3, #30
1a003c76:	4606      	mov	r6, r0
1a003c78:	460c      	mov	r4, r1
1a003c7a:	d507      	bpl.n	1a003c8c <__smakebuf_r+0x1c>
1a003c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a003c80:	6023      	str	r3, [r4, #0]
1a003c82:	6123      	str	r3, [r4, #16]
1a003c84:	2301      	movs	r3, #1
1a003c86:	6163      	str	r3, [r4, #20]
1a003c88:	b002      	add	sp, #8
1a003c8a:	bd70      	pop	{r4, r5, r6, pc}
1a003c8c:	ab01      	add	r3, sp, #4
1a003c8e:	466a      	mov	r2, sp
1a003c90:	f7ff ffca 	bl	1a003c28 <__swhatbuf_r>
1a003c94:	9900      	ldr	r1, [sp, #0]
1a003c96:	4605      	mov	r5, r0
1a003c98:	4630      	mov	r0, r6
1a003c9a:	f7ff fb5d 	bl	1a003358 <_malloc_r>
1a003c9e:	b948      	cbnz	r0, 1a003cb4 <__smakebuf_r+0x44>
1a003ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003ca4:	059a      	lsls	r2, r3, #22
1a003ca6:	d4ef      	bmi.n	1a003c88 <__smakebuf_r+0x18>
1a003ca8:	f023 0303 	bic.w	r3, r3, #3
1a003cac:	f043 0302 	orr.w	r3, r3, #2
1a003cb0:	81a3      	strh	r3, [r4, #12]
1a003cb2:	e7e3      	b.n	1a003c7c <__smakebuf_r+0xc>
1a003cb4:	4b0d      	ldr	r3, [pc, #52]	; (1a003cec <__smakebuf_r+0x7c>)
1a003cb6:	62b3      	str	r3, [r6, #40]	; 0x28
1a003cb8:	89a3      	ldrh	r3, [r4, #12]
1a003cba:	6020      	str	r0, [r4, #0]
1a003cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003cc0:	81a3      	strh	r3, [r4, #12]
1a003cc2:	9b00      	ldr	r3, [sp, #0]
1a003cc4:	6163      	str	r3, [r4, #20]
1a003cc6:	9b01      	ldr	r3, [sp, #4]
1a003cc8:	6120      	str	r0, [r4, #16]
1a003cca:	b15b      	cbz	r3, 1a003ce4 <__smakebuf_r+0x74>
1a003ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003cd0:	4630      	mov	r0, r6
1a003cd2:	f7fd fc2b 	bl	1a00152c <_isatty_r>
1a003cd6:	b128      	cbz	r0, 1a003ce4 <__smakebuf_r+0x74>
1a003cd8:	89a3      	ldrh	r3, [r4, #12]
1a003cda:	f023 0303 	bic.w	r3, r3, #3
1a003cde:	f043 0301 	orr.w	r3, r3, #1
1a003ce2:	81a3      	strh	r3, [r4, #12]
1a003ce4:	89a3      	ldrh	r3, [r4, #12]
1a003ce6:	431d      	orrs	r5, r3
1a003ce8:	81a5      	strh	r5, [r4, #12]
1a003cea:	e7cd      	b.n	1a003c88 <__smakebuf_r+0x18>
1a003cec:	1a0030bd 	.word	0x1a0030bd

1a003cf0 <memchr>:
1a003cf0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a003cf4:	2a10      	cmp	r2, #16
1a003cf6:	db2b      	blt.n	1a003d50 <memchr+0x60>
1a003cf8:	f010 0f07 	tst.w	r0, #7
1a003cfc:	d008      	beq.n	1a003d10 <memchr+0x20>
1a003cfe:	f810 3b01 	ldrb.w	r3, [r0], #1
1a003d02:	3a01      	subs	r2, #1
1a003d04:	428b      	cmp	r3, r1
1a003d06:	d02d      	beq.n	1a003d64 <memchr+0x74>
1a003d08:	f010 0f07 	tst.w	r0, #7
1a003d0c:	b342      	cbz	r2, 1a003d60 <memchr+0x70>
1a003d0e:	d1f6      	bne.n	1a003cfe <memchr+0xe>
1a003d10:	b4f0      	push	{r4, r5, r6, r7}
1a003d12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a003d16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a003d1a:	f022 0407 	bic.w	r4, r2, #7
1a003d1e:	f07f 0700 	mvns.w	r7, #0
1a003d22:	2300      	movs	r3, #0
1a003d24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a003d28:	3c08      	subs	r4, #8
1a003d2a:	ea85 0501 	eor.w	r5, r5, r1
1a003d2e:	ea86 0601 	eor.w	r6, r6, r1
1a003d32:	fa85 f547 	uadd8	r5, r5, r7
1a003d36:	faa3 f587 	sel	r5, r3, r7
1a003d3a:	fa86 f647 	uadd8	r6, r6, r7
1a003d3e:	faa5 f687 	sel	r6, r5, r7
1a003d42:	b98e      	cbnz	r6, 1a003d68 <memchr+0x78>
1a003d44:	d1ee      	bne.n	1a003d24 <memchr+0x34>
1a003d46:	bcf0      	pop	{r4, r5, r6, r7}
1a003d48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a003d4c:	f002 0207 	and.w	r2, r2, #7
1a003d50:	b132      	cbz	r2, 1a003d60 <memchr+0x70>
1a003d52:	f810 3b01 	ldrb.w	r3, [r0], #1
1a003d56:	3a01      	subs	r2, #1
1a003d58:	ea83 0301 	eor.w	r3, r3, r1
1a003d5c:	b113      	cbz	r3, 1a003d64 <memchr+0x74>
1a003d5e:	d1f8      	bne.n	1a003d52 <memchr+0x62>
1a003d60:	2000      	movs	r0, #0
1a003d62:	4770      	bx	lr
1a003d64:	3801      	subs	r0, #1
1a003d66:	4770      	bx	lr
1a003d68:	2d00      	cmp	r5, #0
1a003d6a:	bf06      	itte	eq
1a003d6c:	4635      	moveq	r5, r6
1a003d6e:	3803      	subeq	r0, #3
1a003d70:	3807      	subne	r0, #7
1a003d72:	f015 0f01 	tst.w	r5, #1
1a003d76:	d107      	bne.n	1a003d88 <memchr+0x98>
1a003d78:	3001      	adds	r0, #1
1a003d7a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a003d7e:	bf02      	ittt	eq
1a003d80:	3001      	addeq	r0, #1
1a003d82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a003d86:	3001      	addeq	r0, #1
1a003d88:	bcf0      	pop	{r4, r5, r6, r7}
1a003d8a:	3801      	subs	r0, #1
1a003d8c:	4770      	bx	lr
1a003d8e:	bf00      	nop

1a003d90 <__malloc_lock>:
1a003d90:	4801      	ldr	r0, [pc, #4]	; (1a003d98 <__malloc_lock+0x8>)
1a003d92:	f7ff ba88 	b.w	1a0032a6 <__retarget_lock_acquire_recursive>
1a003d96:	bf00      	nop
1a003d98:	100006fc 	.word	0x100006fc

1a003d9c <__malloc_unlock>:
1a003d9c:	4801      	ldr	r0, [pc, #4]	; (1a003da4 <__malloc_unlock+0x8>)
1a003d9e:	f7ff ba83 	b.w	1a0032a8 <__retarget_lock_release_recursive>
1a003da2:	bf00      	nop
1a003da4:	100006fc 	.word	0x100006fc
1a003da8:	54524155 	.word	0x54524155
1a003dac:	4950475f 	.word	0x4950475f
1a003db0:	6f63204f 	.word	0x6f63204f
1a003db4:	6769666e 	.word	0x6769666e
1a003db8:	64617275 	.word	0x64617275
1a003dbc:	20612061 	.word	0x20612061
1a003dc0:	41524442 	.word	0x41524442
1a003dc4:	203a4554 	.word	0x203a4554
1a003dc8:	32353131 	.word	0x32353131
1a003dcc:	002e3030 	.word	0x002e3030
1a003dd0:	64656546 	.word	0x64656546
1a003dd4:	20676e69 	.word	0x20676e69
1a003dd8:	73756170 	.word	0x73756170
1a003ddc:	002e6465 	.word	0x002e6465
1a003de0:	64656546 	.word	0x64656546
1a003de4:	20676e69 	.word	0x20676e69
1a003de8:	75736572 	.word	0x75736572
1a003dec:	2e64656d 	.word	0x2e64656d
1a003df0:	ffffff00 	.word	0xffffff00
1a003df4:	69636552 	.word	0x69636552
1a003df8:	6f6d6962 	.word	0x6f6d6962
1a003dfc:	25272073 	.word	0x25272073
1a003e00:	70202773 	.word	0x70202773
1a003e04:	5520726f 	.word	0x5520726f
1a003e08:	0d545241 	.word	0x0d545241
1a003e0c:	0000000a 	.word	0x0000000a
1a003e10:	64656566 	.word	0x64656566
1a003e14:	ffffff00 	.word	0xffffff00

1a003e18 <ExtRateIn>:
1a003e18:	00000000                                ....

1a003e1c <GpioButtons>:
1a003e1c:	08000400 09010900                       ........

1a003e24 <GpioLeds>:
1a003e24:	01050005 0e000205 0c010b01              ............

1a003e30 <GpioPorts>:
1a003e30:	03030003 0f050403 05031005 07030603     ................
1a003e40:	ffff0802                                ....

1a003e44 <OscRateIn>:
1a003e44:	00b71b00                                ....

1a003e48 <InitClkStates>:
1a003e48:	01010f01                                ....

1a003e4c <pinmuxing>:
1a003e4c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a003e5c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a003e6c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a003e7c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a003e8c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a003e9c:	00d50301 00d50401 00160107 00560207     ..............V.
1a003eac:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a003ebc:	00570206                                ..W.

1a003ec0 <UART_BClock>:
1a003ec0:	01a201c2 01620182                       ......b.

1a003ec8 <UART_PClock>:
1a003ec8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a003ed8:	ffff00ff                                ....

1a003edc <periph_to_base>:
1a003edc:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a003eec:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a003efc:	000100e0 01000100 01200003 00060120     .......... . ...
1a003f0c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a003f1c:	01820013 00120182 01a201a2 01c20011     ................
1a003f2c:	001001c2 01e201e2 0202000f 000e0202     ................
1a003f3c:	02220222 0223000d 001c0223              "."...#.#...

1a003f48 <InitClkStates>:
1a003f48:	00010100 00010909 0001090a 01010701     ................
1a003f58:	00010902 00010906 0101090c 0001090d     ................
1a003f68:	0001090e 0001090f 00010910 00010911     ................
1a003f78:	00010912 00010913 00011114 00011119     ................
1a003f88:	0001111a 0001111b                       ........

1a003f90 <lpcUarts>:
1a003f90:	40081000 06020406 00180205 40081000     ...@...........@
1a003fa0:	09070509 00180706 40082000 00000000     ......... .@....
1a003fb0:	00190000 400c1000 07060107 001a0602     .......@........
1a003fc0:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a003fd0:	02020302 001b0204                       ........

1a003fd8 <gpioPinsInit>:
1a003fd8:	02000104 00050701 05010d03 04080100     ................
1a003fe8:	02020002 02000304 00000403 04070002     ................
1a003ff8:	030c0300 09050402 05040103 04030208     ................
1a004008:	04020305 06040504 0802000c 03000b06     ................
1a004018:	00090607 07060503 060f0504 03030004     ................
1a004028:	02000404 00050404 06040502 04060200     ................
1a004038:	0c050408 05040a04 0003010e 14010a00     ................
1a004048:	010f0000 0d000012 00001101 0010010c     ................
1a004058:	07070300 000f0300 01000001 00000000     ................
1a004068:	000a0600 08060603 06100504 04030005     ................
1a004078:	03000106 04090400 04010d05 010b0000     ................
1a004088:	0200000f 00000001 00010104 02010800     ................
1a004098:	01090000 09010006 05040002 04010200     ................
1a0040a8:	02020105 02020504 0e00000a 01000b02     ................
1a0040b8:	000c020b ffff0c01 00000a0d              ............

1a0040c4 <__sf_fake_stderr>:
	...

1a0040e4 <__sf_fake_stdin>:
	...

1a004104 <__sf_fake_stdout>:
	...

1a004124 <_global_impure_ptr>:
1a004124:	1000008c 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a004134:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a004144:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a004154:	64636261 ff006665                       abcdef..
