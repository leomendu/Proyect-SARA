/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef PROYECTO_REQUIRED_H_
#define PROYECTO_REQUIRED_H_

#include "../../src/sc_types.h"
#include "proyecto.h"

#ifdef __cplusplus
extern "C"
{
#endif 

/*! \file This header defines prototypes for all functions that are required by the state machine implementation.

This is a state machine uses time events which require access to a timing service. Thus the function prototypes:
	- proyecto_set_timer and
	- proyecto_unset_timer
are defined.

This state machine makes use of operations declared in the state machines interface or internal scopes. Thus the function prototypes:
	- proyecto_startMotor
	- proyecto_stopMotor
	- proyecto_opPause
	- proyecto_opUnpause
	- proyecto_opNotify
	- proyecto_opConfigureHs
	- proyecto_opConfigureMin
	- proyecto_opConfigureSec
	- proyecto_opConfigureAmount
are defined.

These functions will be called during a 'run to completion step' (runCycle) of the statechart. 
There are some constraints that have to be considered for the implementation of these functions:
	- never call the statechart API functions from within these functions.
	- make sure that the execution time is as short as possible.
 
*/
extern void proyecto_startMotor( Proyecto* handle);
extern void proyecto_stopMotor( Proyecto* handle);
extern void proyecto_opPause( Proyecto* handle);
extern void proyecto_opUnpause( Proyecto* handle);
extern void proyecto_opNotify( Proyecto* handle, const sc_integer NOTIF);
extern sc_integer proyecto_opConfigureHs( Proyecto* handle, const sc_integer intervalHs);
extern sc_integer proyecto_opConfigureMin( Proyecto* handle, const sc_integer intervalMin);
extern sc_integer proyecto_opConfigureSec( Proyecto* handle, const sc_integer intervalSec);
extern sc_integer proyecto_opConfigureAmount( Proyecto* handle, const sc_integer amount);



/*!
 * This is a timed state machine that requires timer services
 */ 

/*! This function has to set up timers for the time events that are required by the state machine. */
/*! 
	This function will be called for each time event that is relevant for a state when a state will be entered.
	\param evid An unique identifier of the event.
	\time_ms The time in milliseconds
	\periodic Indicates the the time event must be raised periodically until the timer is unset 
*/
extern void proyecto_set_timer(Proyecto* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic);

/*! This function has to unset timers for the time events that are required by the state machine. */
/*! 
	This function will be called for each time event that is relevant for a state when a state will be left.
	\param evid An unique identifier of the event.
*/
extern void proyecto_unset_timer(Proyecto* handle, const sc_eventid evid);



#ifdef __cplusplus
}
#endif 

#endif /* PROYECTO_REQUIRED_H_ */
